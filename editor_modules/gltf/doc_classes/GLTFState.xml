<?xml version="1.0" encoding="UTF-8" ?>
<class name="GLTFState" inherits="Resource">
	<brief_description>
		Represents all data of a GLTF file.
	</brief_description>
	<description>
		[b]Note:[/b] This class is only compiled in editor builds. Run-time glTF loading and saving is [i]not[/i] available in exported projects. References to [GLTFState] within a script will cause an error in an exported project.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_used_extension">
			<return type="void" />
			<argument index="0" name="extension_name" type="String" />
			<argument index="1" name="required" type="bool" />
			<description>
				Appends an extension to the list of extensions used by this GLTF file during serialization. If [code]required[/code] is true, the extension will also be added to the list of required extensions. Do not run this in [method GLTFDocumentExtension._export_post], as that stage is too late to add extensions. The final list is sorted alphabetically.
			</description>
		</method>
		<method name="get_accessors">
			<return type="Array" />
			<description>
			</description>
		</method>
		<method name="get_additional_data">
			<return type="Variant" />
			<argument index="0" name="extension_name" type="String" />
			<description>
				Gets additional arbitrary data in this [GLTFState] instance. This can be used to keep per-file state data in [GLTFDocumentExtension] classes, which is important because they are stateless.
				The argument should be the [GLTFDocumentExtension] name (does not have to match the extension name in the GLTF file), and the return value can be anything you set. If nothing was set, the return value is null.
			</description>
		</method>
		<method name="get_animation_player">
			<return type="AnimationPlayer" />
			<argument index="0" name="idx" type="int" />
			<description>
			</description>
		</method>
		<method name="get_animation_players_count">
			<return type="int" />
			<argument index="0" name="idx" type="int" />
			<description>
			</description>
		</method>
		<method name="get_animations">
			<return type="Array" />
			<description>
				Returns an array of all [GLTFAnimation]s in the GLTF file. When importing, these will be generated as animations in an [AnimationPlayer] node. When exporting, these will be generated from Godot [AnimationPlayer] nodes.
			</description>
		</method>
		<method name="get_buffer_views">
			<return type="Array" />
			<description>
			</description>
		</method>
		<method name="get_cameras">
			<return type="Array" />
			<description>
				Returns an array of all [GLTFCamera]s in the GLTF file. These are the cameras that the [member GLTFNode.camera] index refers to.
			</description>
		</method>
		<method name="get_images">
			<return type="Array" />
			<description>
			</description>
		</method>
		<method name="get_lights">
			<return type="Array" />
			<description>
				Returns an array of all [GLTFLight]s in the GLTF file. These are the lights that the [member GLTFNode.light] index refers to.
			</description>
		</method>
		<method name="get_materials">
			<return type="Array" />
			<description>
			</description>
		</method>
		<method name="get_meshes">
			<return type="Array" />
			<description>
				Returns an array of all [GLTFMesh]es in the GLTF file. These are the meshes that the [member GLTFNode.mesh] index refers to.
			</description>
		</method>
		<method name="get_nodes">
			<return type="Array" />
			<description>
				Returns an array of all [GLTFNode]s in the GLTF file. These are the nodes that [member GLTFNode.children] and [member root_nodes] refer to. This includes nodes that may not be generated in the Godot scene, or nodes that may generate multiple Godot scene nodes.
			</description>
		</method>
		<method name="get_scene_node">
			<return type="Node" />
			<argument index="0" name="idx" type="int" />
			<description>
			</description>
		</method>
		<method name="get_skeleton_to_node">
			<return type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="get_skeletons">
			<return type="Array" />
			<description>
				Returns an array of all [GLTFSkeleton]s in the GLTF file. These are the skeletons that the [member GLTFNode.skeleton] index refers to.
			</description>
		</method>
		<method name="get_skins">
			<return type="Array" />
			<description>
				Returns an array of all [GLTFSkin]s in the GLTF file. These are the skins that the [member GLTFNode.skin] index refers to.
			</description>
		</method>
		<method name="get_texture_samplers">
			<return type="Array" />
			<description>
				Retrieves the array of texture samplers that are used by the textures contained in the GLTF.
			</description>
		</method>
		<method name="get_textures">
			<return type="Array" />
			<description>
			</description>
		</method>
		<method name="get_unique_animation_names">
			<return type="Array" />
			<description>
				Returns an array of unique animation names. This is only used during the import process.
			</description>
		</method>
		<method name="get_unique_names">
			<return type="Array" />
			<description>
				Returns an array of unique node names. This is used in both the import process and export process.
			</description>
		</method>
		<method name="set_accessors">
			<return type="void" />
			<argument index="0" name="accessors" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_additional_data">
			<return type="void" />
			<argument index="0" name="extension_name" type="String" />
			<argument index="1" name="additional_data" type="Variant" />
			<description>
				Sets additional arbitrary data in this [GLTFState] instance. This can be used to keep per-file state data in [GLTFDocumentExtension] classes, which is important because they are stateless.
				The first argument should be the [GLTFDocumentExtension] name (does not have to match the extension name in the GLTF file), and the second argument can be anything you want.
			</description>
		</method>
		<method name="set_animations">
			<return type="void" />
			<argument index="0" name="animations" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_buffer_views">
			<return type="void" />
			<argument index="0" name="buffer_views" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_cameras">
			<return type="void" />
			<argument index="0" name="cameras" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_images">
			<return type="void" />
			<argument index="0" name="images" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_lights">
			<return type="void" />
			<argument index="0" name="lights" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_materials">
			<return type="void" />
			<argument index="0" name="materials" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_meshes">
			<return type="void" />
			<argument index="0" name="meshes" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_nodes">
			<return type="void" />
			<argument index="0" name="nodes" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_skeleton_to_node">
			<return type="void" />
			<argument index="0" name="skeleton_to_node" type="Dictionary" />
			<description>
			</description>
		</method>
		<method name="set_skeletons">
			<return type="void" />
			<argument index="0" name="skeletons" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_skins">
			<return type="void" />
			<argument index="0" name="skins" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_texture_samplers">
			<return type="void" />
			<argument index="0" name="texture_samplers" type="Array" />
			<description>
				Sets the array of texture samplers that are used by the textures contained in the GLTF.
			</description>
		</method>
		<method name="set_textures">
			<return type="void" />
			<argument index="0" name="textures" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_unique_animation_names">
			<return type="void" />
			<argument index="0" name="unique_animation_names" type="Array" />
			<description>
			</description>
		</method>
		<method name="set_unique_names">
			<return type="void" />
			<argument index="0" name="unique_names" type="Array" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="buffers" type="Array" setter="set_buffers" getter="get_buffers" default="[  ]">
		</member>
		<member name="create_animations" type="bool" setter="set_create_animations" getter="get_create_animations" default="true">
		</member>
		<member name="glb_data" type="PoolByteArray" setter="set_glb_data" getter="get_glb_data" default="PoolByteArray(  )">
		</member>
		<member name="json" type="Dictionary" setter="set_json" getter="get_json" default="{}">
		</member>
		<member name="major_version" type="int" setter="set_major_version" getter="get_major_version" default="0">
		</member>
		<member name="minor_version" type="int" setter="set_minor_version" getter="get_minor_version" default="0">
		</member>
		<member name="root_nodes" type="Array" setter="set_root_nodes" getter="get_root_nodes" default="[  ]">
			The root nodes of the GLTF file. Typically, a GLTF file will only have one scene, and therefore one root node. However, a GLTF file may have multiple scenes and therefore multiple root nodes, which will be generated as siblings of each other and as children of the root node of the generated Godot scene.
		</member>
		<member name="scene_name" type="String" setter="set_scene_name" getter="get_scene_name" default="&quot;&quot;">
			The name of the scene. When importing, if not specified, this will be the file name. When exporting, if specified, the scene name will be saved to the GLTF file.
		</member>
		<member name="use_named_skin_binds" type="bool" setter="set_use_named_skin_binds" getter="get_use_named_skin_binds" default="false">
		</member>
	</members>
	<constants>
	</constants>
</class>
