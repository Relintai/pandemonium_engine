<?xml version="1.0" encoding="UTF-8" ?>
<class name="AStar2D" inherits="Reference">
	<brief_description>
		AStar class representation that uses 2D vectors as edges.
	</brief_description>
	<description>
		This is a wrapper for the [AStar] class which uses 2D vectors instead of 3D vectors.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_compute_cost" qualifiers="virtual">
			<return type="float" />
			<argument index="0" name="from_id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<description>
				Called when computing the cost between two connected points.
				Note that this function is hidden in the default [code]AStar2D[/code] class.
			</description>
		</method>
		<method name="_estimate_cost" qualifiers="virtual">
			<return type="float" />
			<argument index="0" name="from_id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<description>
				Called when estimating the cost between a point and the path's ending point.
				Note that this function is hidden in the default [code]AStar2D[/code] class.
			</description>
		</method>
		<method name="add_point">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="position" type="Vector2" />
			<argument index="2" name="weight_scale" type="float" default="1.0" />
			<description>
				Adds a new point at the given position with the given identifier. The [code]id[/code] must be 0 or larger, and the [code]weight_scale[/code] must be 0.0 or greater.
				The [code]weight_scale[/code] is multiplied by the result of [method _compute_cost] when determining the overall cost of traveling across a segment from a neighboring point to this point. Thus, all else being equal, the algorithm prefers points with lower [code]weight_scale[/code]s to form a path.
				[codeblock]
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(1, 0), 4) # Adds the point (1, 0) with weight_scale 4 and id 1
				[/codeblock]
				If there already exists a point for the given [code]id[/code], its position and weight scale are updated to the given values.
			</description>
		</method>
		<method name="are_points_connected" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<argument index="2" name="bidirectional" type="bool" default="true" />
			<description>
				Returns whether there is a connection/segment between the given points. If [code]bidirectional[/code] is [code]false[/code], returns whether movement from [code]id[/code] to [code]to_id[/code] is possible through this segment.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Clears all the points and segments.
			</description>
		</method>
		<method name="connect_points">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<argument index="2" name="bidirectional" type="bool" default="true" />
			<description>
				Creates a segment between the given points. If [code]bidirectional[/code] is [code]false[/code], only movement from [code]id[/code] to [code]to_id[/code] is allowed, not the reverse direction.
				[codeblock]
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(1, 1))
				astar.add_point(2, Vector2(0, 5))
				astar.connect_points(1, 2, false)
				[/codeblock]
			</description>
		</method>
		<method name="disconnect_points">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<argument index="2" name="bidirectional" type="bool" default="true" />
			<description>
				Deletes the segment between the given points. If [code]bidirectional[/code] is [code]false[/code], only movement from [code]id[/code] to [code]to_id[/code] is prevented, and a unidirectional segment possibly remains.
			</description>
		</method>
		<method name="get_available_point_id" qualifiers="const">
			<return type="int" />
			<description>
				Returns the next available point ID with no point associated to it.
			</description>
		</method>
		<method name="get_closest_point" qualifiers="const">
			<return type="int" />
			<argument index="0" name="to_position" type="Vector2" />
			<argument index="1" name="include_disabled" type="bool" default="false" />
			<description>
				Returns the ID of the closest point to [code]to_position[/code], optionally taking disabled points into account. Returns [code]-1[/code] if there are no points in the points pool.
				[b]Note:[/b] If several points are the closest to [code]to_position[/code], the one with the smallest ID will be returned, ensuring a deterministic result.
			</description>
		</method>
		<method name="get_closest_position_in_segment" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="to_position" type="Vector2" />
			<description>
				Returns the closest position to [code]to_position[/code] that resides inside a segment between two connected points.
				[codeblock]
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(0, 0))
				astar.add_point(2, Vector2(0, 5))
				astar.connect_points(1, 2)
				var res = astar.get_closest_position_in_segment(Vector2(3, 3)) # Returns (0, 3)
				[/codeblock]
				The result is in the segment that goes from [code]y = 0[/code] to [code]y = 5[/code]. It's the closest position in the segment to the given point.
			</description>
		</method>
		<method name="get_id_path">
			<return type="PoolIntArray" />
			<argument index="0" name="from_id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<description>
				Returns an array with the IDs of the points that form the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.
				[codeblock]
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(0, 0))
				astar.add_point(2, Vector2(0, 1), 1) # Default weight is 1
				astar.add_point(3, Vector2(1, 1))
				astar.add_point(4, Vector2(2, 0))

				astar.connect_points(1, 2, false)
				astar.connect_points(2, 3, false)
				astar.connect_points(4, 3, false)
				astar.connect_points(1, 4, false)

				var res = astar.get_id_path(1, 3) # Returns [1, 2, 3]
				[/codeblock]
				If you change the 2nd point's weight to 3, then the result will be [code][1, 4, 3][/code] instead, because now even though the distance is longer, it's "easier" to get through point 4 than through point 2.
			</description>
		</method>
		<method name="get_point_capacity" qualifiers="const">
			<return type="int" />
			<description>
				Returns the capacity of the structure backing the points, useful in conjunction with [code]reserve_space[/code].
			</description>
		</method>
		<method name="get_point_connections">
			<return type="PoolIntArray" />
			<argument index="0" name="id" type="int" />
			<description>
				Returns an array with the IDs of the points that form the connection with the given point.
				[codeblock]
				var astar = AStar2D.new()
				astar.add_point(1, Vector2(0, 0))
				astar.add_point(2, Vector2(0, 1))
				astar.add_point(3, Vector2(1, 1))
				astar.add_point(4, Vector2(2, 0))

				astar.connect_points(1, 2, true)
				astar.connect_points(1, 3, true)

				var neighbors = astar.get_point_connections(1) # Returns [2, 3]
				[/codeblock]
			</description>
		</method>
		<method name="get_point_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of points currently in the points pool.
			</description>
		</method>
		<method name="get_point_path">
			<return type="PoolVector2Array" />
			<argument index="0" name="from_id" type="int" />
			<argument index="1" name="to_id" type="int" />
			<description>
				Returns an array with the points that are in the path found by AStar2D between the given points. The array is ordered from the starting point to the ending point of the path.
				[b]Note:[/b] This method is not thread-safe. If called from a [Thread], it will return an empty [PoolVector2Array] and will print an error message.
			</description>
		</method>
		<method name="get_point_position" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="id" type="int" />
			<description>
				Returns the position of the point associated with the given [code]id[/code].
			</description>
		</method>
		<method name="get_point_weight_scale" qualifiers="const">
			<return type="float" />
			<argument index="0" name="id" type="int" />
			<description>
				Returns the weight scale of the point associated with the given [code]id[/code].
			</description>
		</method>
		<method name="get_points">
			<return type="Array" />
			<description>
				Returns an array of all points.
			</description>
		</method>
		<method name="has_point" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="id" type="int" />
			<description>
				Returns whether a point associated with the given [code]id[/code] exists.
			</description>
		</method>
		<method name="is_point_disabled" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="id" type="int" />
			<description>
				Returns whether a point is disabled or not for pathfinding. By default, all points are enabled.
			</description>
		</method>
		<method name="remove_point">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<description>
				Removes the point associated with the given [code]id[/code] from the points pool.
			</description>
		</method>
		<method name="reserve_space">
			<return type="void" />
			<argument index="0" name="num_nodes" type="int" />
			<description>
				Reserves space internally for [code]num_nodes[/code] points, useful if you're adding a known large number of points at once, for a grid for instance. New capacity must be greater or equals to old capacity.
			</description>
		</method>
		<method name="set_point_disabled">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="disabled" type="bool" default="true" />
			<description>
				Disables or enables the specified point for pathfinding. Useful for making a temporary obstacle.
			</description>
		</method>
		<method name="set_point_position">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="position" type="Vector2" />
			<description>
				Sets the [code]position[/code] for the point with the given [code]id[/code].
			</description>
		</method>
		<method name="set_point_weight_scale">
			<return type="void" />
			<argument index="0" name="id" type="int" />
			<argument index="1" name="weight_scale" type="float" />
			<description>
				Sets the [code]weight_scale[/code] for the point with the given [code]id[/code]. The [code]weight_scale[/code] is multiplied by the result of [method _compute_cost] when determining the overall cost of traveling across a segment from a neighboring point to this point.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
