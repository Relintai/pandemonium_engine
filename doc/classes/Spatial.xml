<?xml version="1.0" encoding="UTF-8" ?>
<class name="Spatial" inherits="Node">
	<brief_description>
		Most basic 3D game object, parent of all 3D-related nodes.
	</brief_description>
	<description>
		Most basic 3D game object, with a 3D [Transform] and visibility settings. All other 3D game objects inherit from Spatial. Use [Spatial] as a parent node to move, scale, rotate and show/hide children in a 3D project.
		Affine operations (rotate, scale, translate) happen in parent's local coordinate system, unless the [Spatial] object is set as top-level. Affine operations in this coordinate system correspond to direct affine operations on the [Spatial]'s transform. The word local below refers to this coordinate system. The coordinate system that is attached to the [Spatial] object itself is referred to as object-local coordinate system.
		[b]Note:[/b] Unless otherwise specified, all methods that have angle parameters must have angles specified as [i]radians[/i]. To convert degrees to radians, use [method @GDScript.deg2rad].
	</description>
	<tutorials>
		<link title="Introduction to 3D">$DOCS_URL/tutorials/3d/introduction_to_3d.md</link>
		<link title="All 3D Demos">https://github.com/Relintai/pandemonium_demo_projects/tree/master/3d</link>
	</tutorials>
	<methods>
		<method name="add_gizmo">
			<return type="void" />
			<argument index="0" name="gizmo" type="SpatialGizmo" />
			<description>
				Attach a gizmo to this [code]Spatial[/code].
			</description>
		</method>
		<method name="clear_gizmos">
			<return type="void" />
			<description>
				Clear all gizmos attached to this [code]Spatial[/code].
			</description>
		</method>
		<method name="clear_subgizmo_selection">
			<return type="void" />
			<description>
				Clears subgizmo selection for this node in the editor. Useful when subgizmo IDs become invalid after a property change.
			</description>
		</method>
		<method name="force_update_transform">
			<return type="void" />
			<description>
				Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations.
			</description>
		</method>
		<method name="get_gizmos" qualifiers="const">
			<return type="Array" />
			<description>
				Returns all the gizmos attached to this [code]Spatial[/code].
			</description>
		</method>
		<method name="get_global_transform_interpolated">
			<return type="Transform" />
			<description>
				When using physics interpolation, there will be circumstances in which you want to know the interpolated (displayed) transform of a node rather than the standard transform (which may only be accurate to the most recent physics tick).
				This is particularly important for frame-based operations that take place in [method Node._process], rather than [method Node._physics_process]. Examples include [Camera]s focusing on a node, or finding where to fire lasers from on a frame rather than physics tick.
				[b]Note:[/b] This function creates an interpolation pump on the [Spatial] the first time it is called, which can respond to physics interpolation resets. If you get problems with "streaking" when initially following a [Spatial], be sure to call [method get_global_transform_interpolated] at least once [i]before[/i] resetting the [Spatial] physics interpolation.
			</description>
		</method>
		<method name="get_parent_spatial" qualifiers="const">
			<return type="Spatial" />
			<description>
				Returns the parent [Spatial], or an empty [Object] if no parent exists or parent is not of type [Spatial].
			</description>
		</method>
		<method name="get_world_3d" qualifiers="const">
			<return type="World3D" />
			<description>
				Returns the current [World3D] resource this [Spatial] node is registered to.
			</description>
		</method>
		<method name="global_rotate">
			<return type="void" />
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="angle" type="float" />
			<description>
				Rotates the global (world) transformation around axis, a unit [Vector3], by specified angle in radians. The rotation axis is in global coordinate system.
			</description>
		</method>
		<method name="global_scale">
			<return type="void" />
			<argument index="0" name="scale" type="Vector3" />
			<description>
				Scales the global (world) transformation by the given [Vector3] scale factors.
			</description>
		</method>
		<method name="global_translate">
			<return type="void" />
			<argument index="0" name="offset" type="Vector3" />
			<description>
				Moves the global (world) transformation by [Vector3] offset. The offset is in global coordinate system.
			</description>
		</method>
		<method name="hide">
			<return type="void" />
			<description>
				Disables rendering of this node. Changes [member visible] to [code]false[/code].
			</description>
		</method>
		<method name="is_local_transform_notification_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns whether node notifies about its local transformation changes. [Spatial] will not propagate this by default.
			</description>
		</method>
		<method name="is_scale_disabled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns whether this node uses a scale of [code](1, 1, 1)[/code] or its local transformation scale.
			</description>
		</method>
		<method name="is_set_as_toplevel" qualifiers="const">
			<return type="bool" />
			<description>
				Returns whether this node is set as Toplevel, that is whether it ignores its parent nodes transformations.
			</description>
		</method>
		<method name="is_transform_notification_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns whether the node notifies about its global and local transformation changes. [Spatial] will not propagate this by default.
			</description>
		</method>
		<method name="is_visible_in_tree" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the node is present in the [SceneTree], its [member visible] property is [code]true[/code] and all its ancestors are also visible. If any ancestor is hidden, this node will not be visible in the scene tree.
			</description>
		</method>
		<method name="look_at">
			<return type="void" />
			<argument index="0" name="target" type="Vector3" />
			<argument index="1" name="up" type="Vector3" default="Vector3(0, 1, 0)" />
			<argument index="2" name="use_model_front" type="bool" default="false" />
			<description>
				Rotates the node so that the local forward axis (-Z, [constant Vector3.FORWARD]) points toward the [code]target[/code] position. If the [param use_model_front] options is specified, then the model is oriented in reverse, towards the model front axis (+Z, [constant Vector3.MODEL_FRONT]), which is more useful for orienting 3D models.
				The local up axis (+Y) points as close to the [code]up[/code] vector as possible while staying perpendicular to the local forward axis. The resulting transform is orthogonal, and the scale is preserved. Non-uniform scaling may not work correctly.
				The [code]target[/code] position cannot be the same as the node's position, the [code]up[/code] vector cannot be zero, and the direction from the node's position to the [code]target[/code] vector cannot be parallel to the [code]up[/code] vector.
				Operations take place in global space.
			</description>
		</method>
		<method name="look_at_from_position">
			<return type="void" />
			<argument index="0" name="position" type="Vector3" />
			<argument index="1" name="target" type="Vector3" />
			<argument index="2" name="up" type="Vector3" default="Vector3(0, 1, 0)" />
			<argument index="3" name="use_model_front" type="bool" default="false" />
			<description>
				Moves the node to the specified [code]position[/code], and then rotates itself to point toward the [code]target[/code] as per [method look_at]. Operations take place in global space.
			</description>
		</method>
		<method name="orthonormalize">
			<return type="void" />
			<description>
				Resets this node's transformations (like scale, skew and taper) preserving its rotation and translation by performing Gram-Schmidt orthonormalization on this node's [Transform].
			</description>
		</method>
		<method name="rotate">
			<return type="void" />
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="angle" type="float" />
			<description>
				Rotates the local transformation around axis, a unit [Vector3], by specified angle in radians.
			</description>
		</method>
		<method name="rotate_object_local">
			<return type="void" />
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="angle" type="float" />
			<description>
				Rotates the local transformation around axis, a unit [Vector3], by specified angle in radians. The rotation axis is in object-local coordinate system.
			</description>
		</method>
		<method name="rotate_x">
			<return type="void" />
			<argument index="0" name="angle" type="float" />
			<description>
				Rotates the local transformation around the X axis by angle in radians.
			</description>
		</method>
		<method name="rotate_y">
			<return type="void" />
			<argument index="0" name="angle" type="float" />
			<description>
				Rotates the local transformation around the Y axis by angle in radians.
			</description>
		</method>
		<method name="rotate_z">
			<return type="void" />
			<argument index="0" name="angle" type="float" />
			<description>
				Rotates the local transformation around the Z axis by angle in radians.
			</description>
		</method>
		<method name="scale_object_local">
			<return type="void" />
			<argument index="0" name="scale" type="Vector3" />
			<description>
				Scales the local transformation by given 3D scale factors in object-local coordinate system.
			</description>
		</method>
		<method name="set_as_toplevel">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				Makes the node ignore its parents transformations. Node transformations are only in global space.
			</description>
		</method>
		<method name="set_disable_scale">
			<return type="void" />
			<argument index="0" name="disable" type="bool" />
			<description>
				Sets whether the node uses a scale of [code](1, 1, 1)[/code] or its local transformation scale. Changes to the local transformation scale are preserved.
			</description>
		</method>
		<method name="set_identity">
			<return type="void" />
			<description>
				Reset all transformations for this node (sets its [Transform] to the identity matrix).
			</description>
		</method>
		<method name="set_ignore_transform_notification">
			<return type="void" />
			<argument index="0" name="enabled" type="bool" />
			<description>
				Sets whether the node ignores notification that its transformation (global or local) changed.
			</description>
		</method>
		<method name="set_notify_local_transform">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				Sets whether the node notifies about its local transformation changes. [Spatial] will not propagate this by default.
			</description>
		</method>
		<method name="set_notify_transform">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				Sets whether the node notifies about its global and local transformation changes. [Spatial] will not propagate this by default, unless it is in the editor context and it has a valid gizmo.
			</description>
		</method>
		<method name="set_subgizmo_selection">
			<return type="void" />
			<argument index="0" name="gizmo" type="SpatialGizmo" />
			<argument index="1" name="id" type="int" />
			<argument index="2" name="transform" type="Transform" />
			<description>
				Set subgizmo selection for this node in the editor.
			</description>
		</method>
		<method name="show">
			<return type="void" />
			<description>
				Enables rendering of this node. Changes [member visible] to [code]true[/code].
			</description>
		</method>
		<method name="to_global" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="local_point" type="Vector3" />
			<description>
				Transforms [code]local_point[/code] from this node's local space to world space.
			</description>
		</method>
		<method name="to_local" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="global_point" type="Vector3" />
			<description>
				Transforms [code]global_point[/code] from world space to this node's local space.
			</description>
		</method>
		<method name="translate">
			<return type="void" />
			<argument index="0" name="offset" type="Vector3" />
			<description>
				Changes the node's position by the given offset [Vector3].
				Note that the translation [code]offset[/code] is affected by the node's scale, so if scaled by e.g. [code](10, 1, 1)[/code], a translation by an offset of [code](2, 0, 0)[/code] would actually add 20 ([code]2 * 10[/code]) to the X coordinate.
			</description>
		</method>
		<method name="translate_object_local">
			<return type="void" />
			<argument index="0" name="offset" type="Vector3" />
			<description>
				Changes the node's position by the given offset [Vector3] in local space.
			</description>
		</method>
		<method name="update_gizmos">
			<return type="void" />
			<description>
				Updates all the [SpatialGizmo]s attached to this node.
			</description>
		</method>
	</methods>
	<members>
		<member name="global_rotation" type="Vector3" setter="set_global_rotation" getter="get_global_rotation">
			Rotation part of the global transformation in radians, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).
			[b]Note:[/b] In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a [Vector3] data structure not because the rotation is a vector, but only because [Vector3] exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful.
		</member>
		<member name="global_transform" type="Transform" setter="set_global_transform" getter="get_global_transform">
			World space (global) [Transform] of this node.
		</member>
		<member name="global_translation" type="Vector3" setter="set_global_translation" getter="get_global_translation">
			Global position of this node. This is equivalent to [code]global_transform.origin[/code].
		</member>
		<member name="lod_range" type="float" setter="set_lod_range" getter="get_lod_range" default="10.0">
			Determines the threshold distance at which this node will be shown or hidden when this node is parented by a [LOD] node.
			For example, a first child with a range of [code]2[/code] will be shown from distance 0 to 2. A second child with a range of [code]5[/code] will be shown from distance 2 to 7, etc.
		</member>
		<member name="merging_mode" type="int" setter="set_merging_mode" getter="get_merging_mode" enum="Spatial.MergingMode" default="0">
			The merging mode determines whether merging features of the engine ([MergeGroup] and [RoomManager]) will attempt to operate on branches of the scene tree.
			The default mode inherited from the scene tree root is [constant MERGING_MODE_ON].
			[b]Note:[/b] Merging mode determines whether the merging is [b]allowed[/b] to be performed. It does not guarantee that merging will occur, which depends on whether there are suitable matching objects.
		</member>
		<member name="rotation" type="Vector3" setter="set_rotation" getter="get_rotation">
			Rotation part of the local transformation in radians, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).
			[b]Note:[/b] In the mathematical sense, rotation is a matrix and not a vector. The three Euler angles, which are the three independent parameters of the Euler-angle parametrization of the rotation matrix, are stored in a [Vector3] data structure not because the rotation is a vector, but only because [Vector3] exists as a convenient data-structure to store 3 floating-point numbers. Therefore, applying affine operations on the rotation "vector" is not meaningful.
		</member>
		<member name="rotation_degrees" type="Vector3" setter="set_rotation_degrees" getter="get_rotation_degrees" default="Vector3( 0, 0, 0 )">
			Rotation part of the local transformation in degrees, specified in terms of YXZ-Euler angles in the format (X angle, Y angle, Z angle).
		</member>
		<member name="scale" type="Vector3" setter="set_scale" getter="get_scale" default="Vector3( 1, 1, 1 )">
			Scale part of the local transformation.
			[b]Note:[/b] Mixed negative scales in 3D are not decomposable from the transformation matrix. Due to the way scale is represented with transformation matrices in Godot, the scale values will either be all positive or all negative.
			[b]Note:[/b] Not all nodes are visually scaled by the [member scale] property. For example, [Light]s are not visually affected by [member scale].
		</member>
		<member name="transform" type="Transform" setter="set_transform" getter="get_transform" default="Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )">
			Local space [Transform] of this node, with respect to the parent node.
		</member>
		<member name="translation" type="Vector3" setter="set_translation" getter="get_translation" default="Vector3( 0, 0, 0 )">
			Local translation of this node.
		</member>
		<member name="visible" type="bool" setter="set_visible" getter="is_visible" default="true">
			If [code]true[/code], this node is drawn. The node is only visible if all of its ancestors are visible as well (in other words, [method is_visible_in_tree] must return [code]true[/code]).
		</member>
	</members>
	<signals>
		<signal name="gameplay_entered">
			<description>
				Emitted by portal system gameplay monitor when a node enters the gameplay area.
			</description>
		</signal>
		<signal name="gameplay_exited">
			<description>
				Emitted by portal system gameplay monitor when a node exits the gameplay area.
			</description>
		</signal>
		<signal name="visibility_changed">
			<description>
				Emitted when node visibility changes.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="NOTIFICATION_TRANSFORM_CHANGED" value="2000">
			Spatial nodes receives this notification when their global transform changes. This means that either the current or a parent node changed its transform.
			In order for [constant NOTIFICATION_TRANSFORM_CHANGED] to work, users first need to ask for it, with [method set_notify_transform]. The notification is also sent if the node is in the editor context and it has at least one valid gizmo.
		</constant>
		<constant name="NOTIFICATION_ENTER_WORLD" value="41">
			Spatial nodes receives this notification when they are registered to new [World3D] resource.
		</constant>
		<constant name="NOTIFICATION_EXIT_WORLD" value="42">
			Spatial nodes receives this notification when they are unregistered from current [World3D] resource.
		</constant>
		<constant name="NOTIFICATION_VISIBILITY_CHANGED" value="43">
			Spatial nodes receives this notification when their visibility changes.
		</constant>
		<constant name="NOTIFICATION_ENTER_GAMEPLAY" value="45">
			Spatial nodes receives this notification if the portal system gameplay monitor detects they have entered the gameplay area.
		</constant>
		<constant name="NOTIFICATION_EXIT_GAMEPLAY" value="46">
			Spatial nodes receives this notification if the portal system gameplay monitor detects they have exited the gameplay area.
		</constant>
		<constant name="MERGING_MODE_INHERIT" value="0" enum="MergingMode">
			Inherits merging mode from the node's parent. For the root node, it is equivalent to [constant MERGING_MODE_ON]. Default.
		</constant>
		<constant name="MERGING_MODE_OFF" value="1" enum="MergingMode">
			Turn off merging in this node and children set to [constant MERGING_MODE_INHERIT].
		</constant>
		<constant name="MERGING_MODE_ON" value="2" enum="MergingMode">
			Turn on merging in this node and children set to [constant MERGING_MODE_INHERIT].
		</constant>
	</constants>
</class>
