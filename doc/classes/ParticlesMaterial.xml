<?xml version="1.0" encoding="UTF-8" ?>
<class name="ParticlesMaterial" inherits="Material">
	<brief_description>
		Particle properties for [Particles] and [Particles2D] nodes.
	</brief_description>
	<description>
		ParticlesMaterial defines particle properties and behavior. It is used in the [code]process_material[/code] of [Particles] and [Particles2D] emitter nodes.
		Some of this material's properties are applied to each particle when emitted, while others can have a [CurveTexture] applied to vary values over the lifetime of the particle.
		When a randomness ratio is applied to a property it is used to scale that property by a random amount. The random ratio is used to interpolate between [code]1.0[/code] and a random number less than one, the result is multiplied by the property to obtain the randomized property. For example a random ratio of [code]0.4[/code] would scale the original property between [code]0.4-1.0[/code] of its original value.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_flag" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="flag" type="int" enum="ParticlesMaterial.Flags" />
			<description>
				Returns [code]true[/code] if the specified flag is enabled.
			</description>
		</method>
		<method name="get_param" qualifiers="const">
			<return type="float" />
			<argument index="0" name="param" type="int" enum="ParticlesMaterial.Parameter" />
			<description>
				Returns the value of the specified parameter.
			</description>
		</method>
		<method name="get_param_randomness" qualifiers="const">
			<return type="float" />
			<argument index="0" name="param" type="int" enum="ParticlesMaterial.Parameter" />
			<description>
				Returns the randomness ratio associated with the specified parameter.
			</description>
		</method>
		<method name="get_param_texture" qualifiers="const">
			<return type="Texture" />
			<argument index="0" name="param" type="int" enum="ParticlesMaterial.Parameter" />
			<description>
				Returns the [Texture] used by the specified parameter.
			</description>
		</method>
		<method name="set_flag">
			<return type="void" />
			<argument index="0" name="flag" type="int" enum="ParticlesMaterial.Flags" />
			<argument index="1" name="enable" type="bool" />
			<description>
				If [code]true[/code], enables the specified flag. See [enum Flags] for options.
			</description>
		</method>
		<method name="set_param">
			<return type="void" />
			<argument index="0" name="param" type="int" enum="ParticlesMaterial.Parameter" />
			<argument index="1" name="value" type="float" />
			<description>
				Sets the specified [enum Parameter].
			</description>
		</method>
		<method name="set_param_randomness">
			<return type="void" />
			<argument index="0" name="param" type="int" enum="ParticlesMaterial.Parameter" />
			<argument index="1" name="randomness" type="float" />
			<description>
				Sets the randomness ratio for the specified [enum Parameter].
			</description>
		</method>
		<method name="set_param_texture">
			<return type="void" />
			<argument index="0" name="param" type="int" enum="ParticlesMaterial.Parameter" />
			<argument index="1" name="texture" type="Texture" />
			<description>
				Sets the [Texture] for the specified [enum Parameter].
			</description>
		</method>
	</methods>
	<members>
		<member name="angle" type="float" setter="set_param" getter="get_param" default="0.0">
			Initial rotation applied to each particle, in degrees.
			[b]Note:[/b] Only applied when [member flag_disable_z] or [member flag_rotate_y] are [code]true[/code] or the [SpatialMaterial] being used to draw the particle is using [constant SpatialMaterial.BILLBOARD_PARTICLES].
		</member>
		<member name="angle_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Each particle's rotation will be animated along this [CurveTexture].
		</member>
		<member name="angle_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Rotation randomness ratio.
		</member>
		<member name="angular_velocity" type="float" setter="set_param" getter="get_param" default="0.0">
			Initial angular velocity applied to each particle in [i]degrees[/i] per second. Sets the speed of rotation of the particle.
			[b]Note:[/b] Only applied when [member flag_disable_z] or [member flag_rotate_y] are [code]true[/code] or the [SpatialMaterial] being used to draw the particle is using [constant SpatialMaterial.BILLBOARD_PARTICLES].
		</member>
		<member name="angular_velocity_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Each particle's angular velocity will vary along this [CurveTexture].
		</member>
		<member name="angular_velocity_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Angular velocity randomness ratio.
		</member>
		<member name="anim_offset" type="float" setter="set_param" getter="get_param" default="0.0">
			Particle animation offset.
		</member>
		<member name="anim_offset_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Each particle's animation offset will vary along this [CurveTexture].
		</member>
		<member name="anim_offset_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Animation offset randomness ratio.
		</member>
		<member name="anim_speed" type="float" setter="set_param" getter="get_param" default="0.0">
			Particle animation speed.
		</member>
		<member name="anim_speed_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Each particle's animation speed will vary along this [CurveTexture].
		</member>
		<member name="anim_speed_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Animation speed randomness ratio.
		</member>
		<member name="color" type="Color" setter="set_color" getter="get_color" default="Color( 1, 1, 1, 1 )">
			Each particle's initial color. If the [Particles2D]'s [code]texture[/code] is defined, it will be multiplied by this color. To have particle display color in a [SpatialMaterial] make sure to set [member SpatialMaterial.vertex_color_use_as_albedo] to [code]true[/code].
		</member>
		<member name="color_initial_ramp" type="Texture" setter="set_color_initial_ramp" getter="get_color_initial_ramp">
			Each particle's initial color will vary along this [GradientTexture] (multiplied with [member color]).
		</member>
		<member name="color_ramp" type="Texture" setter="set_color_ramp" getter="get_color_ramp">
			Each particle's color will vary along this [GradientTexture] over its lifetime (multiplied with [member color]).
		</member>
		<member name="damping" type="float" setter="set_param" getter="get_param" default="0.0">
			The rate at which particles lose velocity.
		</member>
		<member name="damping_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Damping will vary along this [CurveTexture].
		</member>
		<member name="damping_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Damping randomness ratio.
		</member>
		<member name="direction" type="Vector3" setter="set_direction" getter="get_direction" default="Vector3( 1, 0, 0 )">
			Unit vector specifying the particles' emission direction.
		</member>
		<member name="emission_box_extents" type="Vector3" setter="set_emission_box_extents" getter="get_emission_box_extents">
			The box's extents if [code]emission_shape[/code] is set to [constant EMISSION_SHAPE_BOX].
		</member>
		<member name="emission_color_texture" type="Texture" setter="set_emission_color_texture" getter="get_emission_color_texture">
			Particle color will be modulated by color determined by sampling this texture at the same point as the [member emission_point_texture].
		</member>
		<member name="emission_normal_texture" type="Texture" setter="set_emission_normal_texture" getter="get_emission_normal_texture">
			Particle velocity and rotation will be set by sampling this texture at the same point as the [member emission_point_texture]. Used only in [constant EMISSION_SHAPE_DIRECTED_POINTS]. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.
		</member>
		<member name="emission_point_count" type="int" setter="set_emission_point_count" getter="get_emission_point_count">
			The number of emission points if [code]emission_shape[/code] is set to [constant EMISSION_SHAPE_POINTS] or [constant EMISSION_SHAPE_DIRECTED_POINTS].
		</member>
		<member name="emission_point_texture" type="Texture" setter="set_emission_point_texture" getter="get_emission_point_texture">
			Particles will be emitted at positions determined by sampling this texture at a random position. Used with [constant EMISSION_SHAPE_POINTS] and [constant EMISSION_SHAPE_DIRECTED_POINTS]. Can be created automatically from mesh or node by selecting "Create Emission Points from Mesh/Node" under the "Particles" tool in the toolbar.
		</member>
		<member name="emission_ring_axis" type="Vector3" setter="set_emission_ring_axis" getter="get_emission_ring_axis">
			The axis of the ring when using the emitter [constant EMISSION_SHAPE_RING].
		</member>
		<member name="emission_ring_height" type="float" setter="set_emission_ring_height" getter="get_emission_ring_height">
			The height of the ring when using the emitter [constant EMISSION_SHAPE_RING].
		</member>
		<member name="emission_ring_inner_radius" type="float" setter="set_emission_ring_inner_radius" getter="get_emission_ring_inner_radius">
			The inner radius of the ring when using the emitter [constant EMISSION_SHAPE_RING].
		</member>
		<member name="emission_ring_radius" type="float" setter="set_emission_ring_radius" getter="get_emission_ring_radius">
			The radius of the ring when using the emitter [constant EMISSION_SHAPE_RING].
		</member>
		<member name="emission_shape" type="int" setter="set_emission_shape" getter="get_emission_shape" enum="ParticlesMaterial.EmissionShape" default="0">
			Particles will be emitted inside this region. Use [enum EmissionShape] constants for values.
		</member>
		<member name="emission_sphere_radius" type="float" setter="set_emission_sphere_radius" getter="get_emission_sphere_radius">
			The sphere's radius if [code]emission_shape[/code] is set to [constant EMISSION_SHAPE_SPHERE].
		</member>
		<member name="flag_align_y" type="bool" setter="set_flag" getter="get_flag" default="false">
			Align Y axis of particle with the direction of its velocity.
		</member>
		<member name="flag_disable_z" type="bool" setter="set_flag" getter="get_flag" default="false">
			If [code]true[/code], particles will not move on the z axis.
		</member>
		<member name="flag_rotate_y" type="bool" setter="set_flag" getter="get_flag" default="false">
			If [code]true[/code], particles rotate around Y axis by [member angle].
		</member>
		<member name="flatness" type="float" setter="set_flatness" getter="get_flatness" default="0.0">
			Amount of [member spread] along the Y axis.
		</member>
		<member name="gravity" type="Vector3" setter="set_gravity" getter="get_gravity" default="Vector3( 0, -9.8, 0 )">
			Gravity applied to every particle.
		</member>
		<member name="hue_variation" type="float" setter="set_param" getter="get_param" default="0.0">
			Initial hue variation applied to each particle.
		</member>
		<member name="hue_variation_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Each particle's hue will vary along this [CurveTexture].
		</member>
		<member name="hue_variation_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Hue variation randomness ratio.
		</member>
		<member name="initial_velocity" type="float" setter="set_param" getter="get_param" default="0.0">
			Initial velocity magnitude for each particle. Direction comes from [member spread] and the node's orientation.
		</member>
		<member name="initial_velocity_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Initial velocity randomness ratio.
		</member>
		<member name="lifetime_randomness" type="float" setter="set_lifetime_randomness" getter="get_lifetime_randomness" default="0.0">
			Particle lifetime randomness ratio.
		</member>
		<member name="linear_accel" type="float" setter="set_param" getter="get_param" default="0.0">
			Linear acceleration applied to each particle in the direction of motion.
		</member>
		<member name="linear_accel_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Each particle's linear acceleration will vary along this [CurveTexture].
		</member>
		<member name="linear_accel_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Linear acceleration randomness ratio.
		</member>
		<member name="orbit_velocity" type="float" setter="set_param" getter="get_param">
			Orbital velocity applied to each particle. Makes the particles circle around origin. Specified in number of full rotations around origin per second.
			[b]Note:[/b] Only available when [member flag_disable_z] is [code]true[/code].
		</member>
		<member name="orbit_velocity_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Each particle's orbital velocity will vary along this [CurveTexture].
		</member>
		<member name="orbit_velocity_random" type="float" setter="set_param_randomness" getter="get_param_randomness">
			Orbital velocity randomness ratio.
		</member>
		<member name="radial_accel" type="float" setter="set_param" getter="get_param" default="0.0">
			Radial acceleration applied to each particle. Makes particle accelerate away from origin.
		</member>
		<member name="radial_accel_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Each particle's radial acceleration will vary along this [CurveTexture].
		</member>
		<member name="radial_accel_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Radial acceleration randomness ratio.
		</member>
		<member name="scale" type="float" setter="set_param" getter="get_param" default="1.0">
			Initial scale applied to each particle.
		</member>
		<member name="scale_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Each particle's scale will vary along this [CurveTexture].
		</member>
		<member name="scale_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Scale randomness ratio.
		</member>
		<member name="spread" type="float" setter="set_spread" getter="get_spread" default="45.0">
			Each particle's initial direction range from [code]+spread[/code] to [code]-spread[/code] degrees.
		</member>
		<member name="tangential_accel" type="float" setter="set_param" getter="get_param" default="0.0">
			Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.
		</member>
		<member name="tangential_accel_curve" type="Texture" setter="set_param_texture" getter="get_param_texture">
			Each particle's tangential acceleration will vary along this [CurveTexture].
		</member>
		<member name="tangential_accel_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Tangential acceleration randomness ratio.
		</member>
		<member name="trail_color_modifier" type="GradientTexture" setter="set_trail_color_modifier" getter="get_trail_color_modifier">
			Trail particles' color will vary along this [GradientTexture].
		</member>
		<member name="trail_divisor" type="int" setter="set_trail_divisor" getter="get_trail_divisor" default="1">
			Emitter will emit [code]amount[/code] divided by [code]trail_divisor[/code] particles. The remaining particles will be used as trail(s).
		</member>
		<member name="trail_size_modifier" type="CurveTexture" setter="set_trail_size_modifier" getter="get_trail_size_modifier">
			Trail particles' size will vary along this [CurveTexture].
		</member>
	</members>
	<constants>
		<constant name="PARAM_INITIAL_LINEAR_VELOCITY" value="0" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set initial velocity properties.
		</constant>
		<constant name="PARAM_ANGULAR_VELOCITY" value="1" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set angular velocity properties.
		</constant>
		<constant name="PARAM_ORBIT_VELOCITY" value="2" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set orbital velocity properties.
		</constant>
		<constant name="PARAM_LINEAR_ACCEL" value="3" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set linear acceleration properties.
		</constant>
		<constant name="PARAM_RADIAL_ACCEL" value="4" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set radial acceleration properties.
		</constant>
		<constant name="PARAM_TANGENTIAL_ACCEL" value="5" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set tangential acceleration properties.
		</constant>
		<constant name="PARAM_DAMPING" value="6" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set damping properties.
		</constant>
		<constant name="PARAM_ANGLE" value="7" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set angle properties.
		</constant>
		<constant name="PARAM_SCALE" value="8" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set scale properties.
		</constant>
		<constant name="PARAM_HUE_VARIATION" value="9" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set hue variation properties.
		</constant>
		<constant name="PARAM_ANIM_SPEED" value="10" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set animation speed properties.
		</constant>
		<constant name="PARAM_ANIM_OFFSET" value="11" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_texture] to set animation offset properties.
		</constant>
		<constant name="PARAM_MAX" value="12" enum="Parameter">
			Represents the size of the [enum Parameter] enum.
		</constant>
		<constant name="FLAG_ALIGN_Y_TO_VELOCITY" value="0" enum="Flags">
			Use with [method set_flag] to set [member flag_align_y].
		</constant>
		<constant name="FLAG_ROTATE_Y" value="1" enum="Flags">
			Use with [method set_flag] to set [member flag_rotate_y].
		</constant>
		<constant name="FLAG_DISABLE_Z" value="2" enum="Flags">
			Use with [method set_flag] to set [member flag_disable_z].
		</constant>
		<constant name="FLAG_MAX" value="3" enum="Flags">
			Represents the size of the [enum Flags] enum.
		</constant>
		<constant name="EMISSION_SHAPE_POINT" value="0" enum="EmissionShape">
			All particles will be emitted from a single point.
		</constant>
		<constant name="EMISSION_SHAPE_SPHERE" value="1" enum="EmissionShape">
			Particles will be emitted in the volume of a sphere.
		</constant>
		<constant name="EMISSION_SHAPE_BOX" value="2" enum="EmissionShape">
			Particles will be emitted in the volume of a box.
		</constant>
		<constant name="EMISSION_SHAPE_POINTS" value="3" enum="EmissionShape">
			Particles will be emitted at a position determined by sampling a random point on the [member emission_point_texture]. Particle color will be modulated by [member emission_color_texture].
		</constant>
		<constant name="EMISSION_SHAPE_DIRECTED_POINTS" value="4" enum="EmissionShape">
			Particles will be emitted at a position determined by sampling a random point on the [member emission_point_texture]. Particle velocity and rotation will be set based on [member emission_normal_texture]. Particle color will be modulated by [member emission_color_texture].
		</constant>
		<constant name="EMISSION_SHAPE_RING" value="5" enum="EmissionShape">
			Particles will be emitted in a ring or cylinder.
		</constant>
		<constant name="EMISSION_SHAPE_MAX" value="6" enum="EmissionShape">
			Represents the size of the [enum EmissionShape] enum.
		</constant>
	</constants>
</class>
