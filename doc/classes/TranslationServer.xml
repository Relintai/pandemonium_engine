<?xml version="1.0" encoding="UTF-8" ?>
<class name="TranslationServer" inherits="Object">
	<brief_description>
		Server that manages all translations.
	</brief_description>
	<description>
		Server that manages all translations. Translations can be set to it and removed from it.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/i18n/internationalizing_games.md</link>
		<link>$DOCS_URL/tutorials/i18n/locales.md</link>
	</tutorials>
	<methods>
		<method name="add_translation">
			<return type="void" />
			<argument index="0" name="translation" type="Translation" />
			<description>
				Adds a [Translation] resource.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Clears the server from all translations.
			</description>
		</method>
		<method name="compare_locales" qualifiers="const">
			<return type="int" />
			<argument index="0" name="locale_a" type="String" />
			<argument index="1" name="locale_b" type="String" />
			<description>
				Compares two locales and return similarity score between [code]0[/code](no match) and [code]10[/code](full match).
			</description>
		</method>
		<method name="get_all_countries" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Returns array of known country codes.
			</description>
		</method>
		<method name="get_all_languages" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Returns array of known language codes.
			</description>
		</method>
		<method name="get_all_scripts" qualifiers="const">
			<return type="PoolStringArray" />
			<description>
				Returns array of known script codes.
			</description>
		</method>
		<method name="get_country_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="country" type="String" />
			<description>
				Returns readable country name for the [code]country[/code] code.
			</description>
		</method>
		<method name="get_language_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="language" type="String" />
			<description>
				Returns readable language name for the [code]language[/code] code.
			</description>
		</method>
		<method name="get_loaded_locales" qualifiers="const">
			<return type="Array" />
			<description>
				Returns an array of all loaded locales of the project.
			</description>
		</method>
		<method name="get_locale" qualifiers="const">
			<return type="String" />
			<description>
				Returns the current locale of the project.
				See also [method OS.get_locale] and [method OS.get_locale_language] to query the locale of the user system.
			</description>
		</method>
		<method name="get_locale_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="locale" type="String" />
			<description>
				Returns a locale's language and its variant (e.g. [code]"en_US"[/code] would return [code]"English (United States)"[/code]).
			</description>
		</method>
		<method name="get_script_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="script" type="String" />
			<description>
				Returns readable script name for the [code]script[/code] code.
			</description>
		</method>
		<method name="remove_translation">
			<return type="void" />
			<argument index="0" name="translation" type="Translation" />
			<description>
				Removes the given translation from the server.
			</description>
		</method>
		<method name="set_locale">
			<return type="void" />
			<argument index="0" name="locale" type="String" />
			<description>
				Sets the locale of the project. The [code]locale[/code] string will be standardized to match known locales (e.g. [code]en-US[/code] would be matched to [code]en_US[/code]).
				If translations have been loaded beforehand for the new locale, they will be applied.
			</description>
		</method>
		<method name="standardize_locale" qualifiers="const">
			<return type="String" />
			<argument index="0" name="locale" type="String" />
			<description>
				Retunrs [code]locale[/code] string standardized to match known locales (e.g. [code]en-US[/code] would be matched to [code]en_US[/code]).
			</description>
		</method>
		<method name="translate" qualifiers="const">
			<return type="StringName" />
			<argument index="0" name="message" type="StringName" />
			<description>
				Returns the current locale's translation for the given message (key).
			</description>
		</method>
		<method name="translate_to" qualifiers="const">
			<return type="StringName" />
			<argument index="0" name="message" type="StringName" />
			<argument index="1" name="locale" type="String" />
			<description>
				Returns the passed in locale's translation, or the current locale's translation if it can't be found for the given message (key).
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
