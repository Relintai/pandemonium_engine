<?xml version="1.0" encoding="UTF-8" ?>
<class name="EditorScenePostImport" inherits="Reference">
	<brief_description>
		Post-processes scenes after import.
	</brief_description>
	<description>
		Imported scenes can be automatically modified right after import by setting their [b]Custom Script[/b] Import property to a [code]tool[/code] script that inherits from this class.
		The [method post_import] callback receives the imported scene's root node and returns the modified version of the scene. Usage example:
		[codeblock]
		tool # Needed so it runs in editor
		extends EditorScenePostImport

		# This sample changes all node names

		# Called right after the scene is imported and gets the root node
		func post_import(scene):
		    # Change all node names to "modified_[oldnodename]"
		    iterate(scene)
		    return scene # Remember to return the imported scene

		func iterate(node):
		    if node != null:
		        node.name = "modified_" + node.name
		        for child in node.get_children():
		            iterate(child)
		[/codeblock]
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/assets_pipeline/importing_scenes.html#custom-script</link>
	</tutorials>
	<methods>
		<method name="get_source_file" qualifiers="const">
			<return type="String" />
			<description>
				Returns the source file path which got imported (e.g. [code]res://scene.dae[/code]).
			</description>
		</method>
		<method name="get_source_folder" qualifiers="const">
			<return type="String" />
			<description>
				Returns the resource folder the imported scene file is located in.
			</description>
		</method>
		<method name="post_import" qualifiers="virtual">
			<return type="Object" />
			<argument index="0" name="scene" type="Object" />
			<description>
				Called after the scene was imported. This method must return the modified version of the scene.
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
