<?xml version="1.0" encoding="UTF-8" ?>
<class name="CPUParticles" inherits="GeometryInstance">
	<brief_description>
		CPU-based 3D particle emitter.
	</brief_description>
	<description>
		CPU-based 3D particle node used to create a variety of particle systems and effects.
		See also [Particles], which provides the same functionality with hardware acceleration, but may not run on older devices.
		[b]Note:[/b] Unlike [Particles], the visibility rect is generated on-the-fly and doesn't need to be configured by the user.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="convert_from_particles">
			<return type="void" />
			<argument index="0" name="particles" type="Node" />
			<description>
			</description>
		</method>
		<method name="get_param" qualifiers="const">
			<return type="float" />
			<argument index="0" name="param" type="int" enum="CPUParticles.Parameter" />
			<description>
				Returns the base value of the parameter specified by [enum Parameter].
			</description>
		</method>
		<method name="get_param_curve" qualifiers="const">
			<return type="Curve" />
			<argument index="0" name="param" type="int" enum="CPUParticles.Parameter" />
			<description>
				Returns the [Curve] of the parameter specified by [enum Parameter].
			</description>
		</method>
		<method name="get_param_randomness" qualifiers="const">
			<return type="float" />
			<argument index="0" name="param" type="int" enum="CPUParticles.Parameter" />
			<description>
				Returns the randomness factor of the parameter specified by [enum Parameter].
			</description>
		</method>
		<method name="get_particle_flag" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="flag" type="int" enum="CPUParticles.Flags" />
			<description>
				Returns the enabled state of the given flag (see [enum Flags] for options).
			</description>
		</method>
		<method name="restart">
			<return type="void" />
			<description>
				Restarts the particle emitter.
			</description>
		</method>
		<method name="set_param">
			<return type="void" />
			<argument index="0" name="param" type="int" enum="CPUParticles.Parameter" />
			<argument index="1" name="value" type="float" />
			<description>
				Sets the base value of the parameter specified by [enum Parameter].
			</description>
		</method>
		<method name="set_param_curve">
			<return type="void" />
			<argument index="0" name="param" type="int" enum="CPUParticles.Parameter" />
			<argument index="1" name="curve" type="Curve" />
			<description>
				Sets the [Curve] of the parameter specified by [enum Parameter].
			</description>
		</method>
		<method name="set_param_randomness">
			<return type="void" />
			<argument index="0" name="param" type="int" enum="CPUParticles.Parameter" />
			<argument index="1" name="randomness" type="float" />
			<description>
				Sets the randomness factor of the parameter specified by [enum Parameter].
			</description>
		</method>
		<method name="set_particle_flag">
			<return type="void" />
			<argument index="0" name="flag" type="int" enum="CPUParticles.Flags" />
			<argument index="1" name="enable" type="bool" />
			<description>
				Enables or disables the given flag (see [enum Flags] for options).
			</description>
		</method>
	</methods>
	<members>
		<member name="amount" type="int" setter="set_amount" getter="get_amount" default="8">
			The number of particles emitted in one emission cycle (corresponding to the [member lifetime]).
			[b]Note:[/b] Changing [member amount] will reset the particle emission, therefore removing all particles that were already emitted before changing [member amount].
		</member>
		<member name="angle" type="float" setter="set_param" getter="get_param" default="0.0">
			Initial rotation applied to each particle, in degrees.
		</member>
		<member name="angle_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Each particle's rotation will be animated along this [Curve].
		</member>
		<member name="angle_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Rotation randomness ratio.
		</member>
		<member name="angular_velocity" type="float" setter="set_param" getter="get_param" default="0.0">
			Initial angular velocity applied to each particle in [i]degrees[/i] per second. Sets the speed of rotation of the particle.
		</member>
		<member name="angular_velocity_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Each particle's angular velocity will vary along this [Curve].
		</member>
		<member name="angular_velocity_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Angular velocity randomness ratio.
		</member>
		<member name="anim_offset" type="float" setter="set_param" getter="get_param" default="0.0">
			Particle animation offset.
		</member>
		<member name="anim_offset_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Each particle's animation offset will vary along this [Curve].
		</member>
		<member name="anim_offset_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Animation offset randomness ratio.
		</member>
		<member name="anim_speed" type="float" setter="set_param" getter="get_param" default="0.0">
			Particle animation speed.
		</member>
		<member name="anim_speed_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Each particle's animation speed will vary along this [Curve].
		</member>
		<member name="anim_speed_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Animation speed randomness ratio.
		</member>
		<member name="color" type="Color" setter="set_color" getter="get_color" default="Color( 1, 1, 1, 1 )">
			Each particle's initial color.
			[b]Note:[/b] [member color] multiplies the particle mesh's vertex colors. To have a visible effect on a [SpatialMaterial], [member SpatialMaterial.vertex_color_use_as_albedo] [i]must[/i] be [code]true[/code]. For a [ShaderMaterial], [code]ALBEDO *= COLOR.rgb;[/code] must be inserted in the shader's [code]fragment()[/code] function. Otherwise, [member color] will have no visible effect.
		</member>
		<member name="color_initial_ramp" type="Gradient" setter="set_color_initial_ramp" getter="get_color_initial_ramp">
			Each particle's initial color will vary along this [GradientTexture] (multiplied with [member color]).
			[b]Note:[/b] [member color_initial_ramp] multiplies the particle mesh's vertex colors. To have a visible effect on a [SpatialMaterial], [member SpatialMaterial.vertex_color_use_as_albedo] [i]must[/i] be [code]true[/code]. For a [ShaderMaterial], [code]ALBEDO *= COLOR.rgb;[/code] must be inserted in the shader's [code]fragment()[/code] function. Otherwise, [member color_initial_ramp] will have no visible effect.
		</member>
		<member name="color_ramp" type="Gradient" setter="set_color_ramp" getter="get_color_ramp">
			Each particle's color will vary along this [GradientTexture] over its lifetime (multiplied with [member color]).
			[b]Note:[/b] [member color_ramp] multiplies the particle mesh's vertex colors. To have a visible effect on a [SpatialMaterial], [member SpatialMaterial.vertex_color_use_as_albedo] [i]must[/i] be [code]true[/code]. For a [ShaderMaterial], [code]ALBEDO *= COLOR.rgb;[/code] must be inserted in the shader's [code]fragment()[/code] function. Otherwise, [member color_ramp] will have no visible effect.
		</member>
		<member name="damping" type="float" setter="set_param" getter="get_param" default="0.0">
			The rate at which particles lose velocity.
		</member>
		<member name="damping_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Damping will vary along this [Curve].
		</member>
		<member name="damping_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Damping randomness ratio.
		</member>
		<member name="direction" type="Vector3" setter="set_direction" getter="get_direction" default="Vector3( 1, 0, 0 )">
			Unit vector specifying the particles' emission direction.
		</member>
		<member name="draw_order" type="int" setter="set_draw_order" getter="get_draw_order" enum="CPUParticles.DrawOrder" default="0">
			Particle draw order. Uses [enum DrawOrder] values.
		</member>
		<member name="emission_box_extents" type="Vector3" setter="set_emission_box_extents" getter="get_emission_box_extents">
			The rectangle's extents if [member emission_shape] is set to [constant EMISSION_SHAPE_BOX].
		</member>
		<member name="emission_colors" type="PoolColorArray" setter="set_emission_colors" getter="get_emission_colors">
			Sets the [Color]s to modulate particles by when using [constant EMISSION_SHAPE_POINTS] or [constant EMISSION_SHAPE_DIRECTED_POINTS].
			[b]Note:[/b] [member emission_colors] multiplies the particle mesh's vertex colors. To have a visible effect on a [SpatialMaterial], [member SpatialMaterial.vertex_color_use_as_albedo] [i]must[/i] be [code]true[/code]. For a [ShaderMaterial], [code]ALBEDO *= COLOR.rgb;[/code] must be inserted in the shader's [code]fragment()[/code] function. Otherwise, [member emission_colors] will have no visible effect.
		</member>
		<member name="emission_normals" type="PoolVector3Array" setter="set_emission_normals" getter="get_emission_normals">
			Sets the direction the particles will be emitted in when using [constant EMISSION_SHAPE_DIRECTED_POINTS].
		</member>
		<member name="emission_points" type="PoolVector3Array" setter="set_emission_points" getter="get_emission_points">
			Sets the initial positions to spawn particles when using [constant EMISSION_SHAPE_POINTS] or [constant EMISSION_SHAPE_DIRECTED_POINTS].
		</member>
		<member name="emission_ring_axis" type="Vector3" setter="set_emission_ring_axis" getter="get_emission_ring_axis">
			The axis for the ring shaped emitter when using [constant EMISSION_SHAPE_RING].
		</member>
		<member name="emission_ring_height" type="float" setter="set_emission_ring_height" getter="get_emission_ring_height">
			The height for the ring shaped emitter when using [constant EMISSION_SHAPE_RING].
		</member>
		<member name="emission_ring_inner_radius" type="float" setter="set_emission_ring_inner_radius" getter="get_emission_ring_inner_radius">
			The inner radius for the ring shaped emitter when using [constant EMISSION_SHAPE_RING].
		</member>
		<member name="emission_ring_radius" type="float" setter="set_emission_ring_radius" getter="get_emission_ring_radius">
			The radius for the ring shaped emitter when using [constant EMISSION_SHAPE_RING].
		</member>
		<member name="emission_shape" type="int" setter="set_emission_shape" getter="get_emission_shape" enum="CPUParticles.EmissionShape" default="0">
			Particles will be emitted inside this region. See [enum EmissionShape] for possible values.
		</member>
		<member name="emission_sphere_radius" type="float" setter="set_emission_sphere_radius" getter="get_emission_sphere_radius">
			The sphere's radius if [enum EmissionShape] is set to [constant EMISSION_SHAPE_SPHERE].
		</member>
		<member name="emitting" type="bool" setter="set_emitting" getter="is_emitting" default="true">
			If [code]true[/code], particles are being emitted.
		</member>
		<member name="explosiveness" type="float" setter="set_explosiveness_ratio" getter="get_explosiveness_ratio" default="0.0">
			How rapidly particles in an emission cycle are emitted. If greater than [code]0[/code], there will be a gap in emissions before the next cycle begins.
		</member>
		<member name="fixed_fps" type="int" setter="set_fixed_fps" getter="get_fixed_fps" default="0">
			The particle system's frame rate is fixed to a value. For instance, changing the value to 2 will make the particles render at 2 frames per second. Note this does not slow down the particle system itself.
		</member>
		<member name="flag_align_y" type="bool" setter="set_particle_flag" getter="get_particle_flag" default="false">
			Align Y axis of particle with the direction of its velocity.
		</member>
		<member name="flag_disable_z" type="bool" setter="set_particle_flag" getter="get_particle_flag" default="false">
			If [code]true[/code], particles will not move on the z axis.
		</member>
		<member name="flag_rotate_y" type="bool" setter="set_particle_flag" getter="get_particle_flag" default="false">
			If [code]true[/code], particles rotate around Y axis by [member angle].
		</member>
		<member name="flatness" type="float" setter="set_flatness" getter="get_flatness" default="0.0">
			Amount of [member spread] in Y/Z plane. A value of [code]1[/code] restricts particles to X/Z plane.
		</member>
		<member name="fract_delta" type="bool" setter="set_fractional_delta" getter="get_fractional_delta" default="true">
			If [code]true[/code], results in fractional delta calculation which has a smoother particles display effect.
		</member>
		<member name="gravity" type="Vector3" setter="set_gravity" getter="get_gravity" default="Vector3( 0, -9.8, 0 )">
			Gravity applied to every particle.
		</member>
		<member name="hue_variation" type="float" setter="set_param" getter="get_param" default="0.0">
			Initial hue variation applied to each particle.
		</member>
		<member name="hue_variation_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Each particle's hue will vary along this [Curve].
		</member>
		<member name="hue_variation_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Hue variation randomness ratio.
		</member>
		<member name="initial_velocity" type="float" setter="set_param" getter="get_param" default="0.0">
			Initial velocity magnitude for each particle. Direction comes from [member spread] and the node's orientation.
		</member>
		<member name="initial_velocity_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Initial velocity randomness ratio.
		</member>
		<member name="lifetime" type="float" setter="set_lifetime" getter="get_lifetime" default="1.0">
			The amount of time each particle will exist (in seconds).
		</member>
		<member name="lifetime_randomness" type="float" setter="set_lifetime_randomness" getter="get_lifetime_randomness" default="0.0">
			Particle lifetime randomness ratio.
		</member>
		<member name="linear_accel" type="float" setter="set_param" getter="get_param" default="0.0">
			Linear acceleration applied to each particle in the direction of motion.
		</member>
		<member name="linear_accel_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Each particle's linear acceleration will vary along this [Curve].
		</member>
		<member name="linear_accel_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Linear acceleration randomness ratio.
		</member>
		<member name="local_coords" type="bool" setter="set_use_local_coordinates" getter="get_use_local_coordinates" default="true">
			If [code]true[/code], particles use the parent node's coordinate space. If [code]false[/code], they use global coordinates.
		</member>
		<member name="mesh" type="Mesh" setter="set_mesh" getter="get_mesh">
			The [Mesh] used for each particle. If [code]null[/code], particles will be spheres.
		</member>
		<member name="one_shot" type="bool" setter="set_one_shot" getter="get_one_shot" default="false">
			If [code]true[/code], only one emission cycle occurs. If set [code]true[/code] during a cycle, emission will stop at the cycle's end.
		</member>
		<member name="orbit_velocity" type="float" setter="set_param" getter="get_param">
			Orbital velocity applied to each particle. Makes the particles circle around origin in the local XY plane. Specified in number of full rotations around origin per second.
			This property is only available when [member flag_disable_z] is [code]true[/code].
		</member>
		<member name="orbit_velocity_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Each particle's orbital velocity will vary along this [Curve].
		</member>
		<member name="orbit_velocity_random" type="float" setter="set_param_randomness" getter="get_param_randomness">
			Orbital velocity randomness ratio.
		</member>
		<member name="preprocess" type="float" setter="set_pre_process_time" getter="get_pre_process_time" default="0.0">
			Particle system starts as if it had already run for this many seconds.
		</member>
		<member name="radial_accel" type="float" setter="set_param" getter="get_param" default="0.0">
			Radial acceleration applied to each particle. Makes particle accelerate away from origin.
		</member>
		<member name="radial_accel_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Each particle's radial acceleration will vary along this [Curve].
		</member>
		<member name="radial_accel_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Radial acceleration randomness ratio.
		</member>
		<member name="randomness" type="float" setter="set_randomness_ratio" getter="get_randomness_ratio" default="0.0">
			Emission lifetime randomness ratio.
		</member>
		<member name="scale_amount" type="float" setter="set_param" getter="get_param" default="1.0">
			Initial scale applied to each particle. This can be set to a negative value to flip the particle on all axes.
		</member>
		<member name="scale_amount_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Each particle's scale will vary along this [Curve].
		</member>
		<member name="scale_amount_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Scale randomness ratio.
		</member>
		<member name="speed_scale" type="float" setter="set_speed_scale" getter="get_speed_scale" default="1.0">
			Particle system's running speed scaling ratio. A value of [code]0[/code] can be used to pause the particles.
		</member>
		<member name="spread" type="float" setter="set_spread" getter="get_spread" default="45.0">
			Each particle's initial direction range from [code]+spread[/code] to [code]-spread[/code] degrees. Applied to X/Z plane and Y/Z planes.
		</member>
		<member name="tangential_accel" type="float" setter="set_param" getter="get_param" default="0.0">
			Tangential acceleration applied to each particle. Tangential acceleration is perpendicular to the particle's velocity giving the particles a swirling motion.
		</member>
		<member name="tangential_accel_curve" type="Curve" setter="set_param_curve" getter="get_param_curve">
			Each particle's tangential acceleration will vary along this [Curve].
		</member>
		<member name="tangential_accel_random" type="float" setter="set_param_randomness" getter="get_param_randomness" default="0.0">
			Tangential acceleration randomness ratio.
		</member>
	</members>
	<constants>
		<constant name="DRAW_ORDER_INDEX" value="0" enum="DrawOrder">
			Particles are drawn in the order emitted.
		</constant>
		<constant name="DRAW_ORDER_LIFETIME" value="1" enum="DrawOrder">
			Particles are drawn in order of remaining lifetime.
		</constant>
		<constant name="DRAW_ORDER_VIEW_DEPTH" value="2" enum="DrawOrder">
			Particles are drawn in order of depth.
		</constant>
		<constant name="PARAM_INITIAL_LINEAR_VELOCITY" value="0" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set initial velocity properties.
		</constant>
		<constant name="PARAM_ANGULAR_VELOCITY" value="1" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set angular velocity properties.
		</constant>
		<constant name="PARAM_ORBIT_VELOCITY" value="2" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set orbital velocity properties.
		</constant>
		<constant name="PARAM_LINEAR_ACCEL" value="3" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set linear acceleration properties.
		</constant>
		<constant name="PARAM_RADIAL_ACCEL" value="4" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set radial acceleration properties.
		</constant>
		<constant name="PARAM_TANGENTIAL_ACCEL" value="5" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set tangential acceleration properties.
		</constant>
		<constant name="PARAM_DAMPING" value="6" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set damping properties.
		</constant>
		<constant name="PARAM_ANGLE" value="7" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set angle properties.
		</constant>
		<constant name="PARAM_SCALE" value="8" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set scale properties.
		</constant>
		<constant name="PARAM_HUE_VARIATION" value="9" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set hue variation properties.
		</constant>
		<constant name="PARAM_ANIM_SPEED" value="10" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set animation speed properties.
		</constant>
		<constant name="PARAM_ANIM_OFFSET" value="11" enum="Parameter">
			Use with [method set_param], [method set_param_randomness], and [method set_param_curve] to set animation offset properties.
		</constant>
		<constant name="PARAM_MAX" value="12" enum="Parameter">
			Represents the size of the [enum Parameter] enum.
		</constant>
		<constant name="FLAG_ALIGN_Y_TO_VELOCITY" value="0" enum="Flags">
			Use with [method set_particle_flag] to set [member flag_align_y].
		</constant>
		<constant name="FLAG_ROTATE_Y" value="1" enum="Flags">
			Use with [method set_particle_flag] to set [member flag_rotate_y].
		</constant>
		<constant name="FLAG_DISABLE_Z" value="2" enum="Flags">
			Use with [method set_particle_flag] to set [member flag_disable_z].
		</constant>
		<constant name="FLAG_MAX" value="3" enum="Flags">
			Represents the size of the [enum Flags] enum.
		</constant>
		<constant name="EMISSION_SHAPE_POINT" value="0" enum="EmissionShape">
			All particles will be emitted from a single point.
		</constant>
		<constant name="EMISSION_SHAPE_SPHERE" value="1" enum="EmissionShape">
			Particles will be emitted in the volume of a sphere.
		</constant>
		<constant name="EMISSION_SHAPE_BOX" value="2" enum="EmissionShape">
			Particles will be emitted in the volume of a box.
		</constant>
		<constant name="EMISSION_SHAPE_POINTS" value="3" enum="EmissionShape">
			Particles will be emitted at a position chosen randomly among [member emission_points]. Particle color will be modulated by [member emission_colors].
		</constant>
		<constant name="EMISSION_SHAPE_DIRECTED_POINTS" value="4" enum="EmissionShape">
			Particles will be emitted at a position chosen randomly among [member emission_points]. Particle velocity and rotation will be set based on [member emission_normals]. Particle color will be modulated by [member emission_colors].
		</constant>
		<constant name="EMISSION_SHAPE_RING" value="5" enum="EmissionShape">
			Particles will be emitted in a ring or cylinder.
		</constant>
		<constant name="EMISSION_SHAPE_MAX" value="6" enum="EmissionShape">
			Represents the size of the [enum EmissionShape] enum.
		</constant>
	</constants>
</class>
