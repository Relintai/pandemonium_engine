<?xml version="1.0" encoding="UTF-8" ?>
<class name="MenuButton" inherits="Button">
	<brief_description>
		Special button that brings up a [PopupMenu] when clicked.
	</brief_description>
	<description>
		Special button that brings up a [PopupMenu] when clicked.
		New items can be created inside this [PopupMenu] using [code]get_popup().add_item("My Item Name")[/code]. You can also create them directly from the editor. To do so, select the [MenuButton] node, then in the toolbar at the top of the 2D editor, click [b]Items[/b] then click [b]Add[/b] in the popup. You will be able to give each item new properties.
		See also [BaseButton] which contains common properties and methods associated with this node.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_popup" qualifiers="const">
			<return type="PopupMenu" />
			<description>
				Returns the [PopupMenu] contained in this button.
				[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
			</description>
		</method>
		<method name="set_disable_shortcuts">
			<return type="void" />
			<argument index="0" name="disabled" type="bool" />
			<description>
				If [code]true[/code], shortcuts are disabled and cannot be used to trigger the button.
			</description>
		</method>
	</methods>
	<members>
		<member name="action_mode" type="int" setter="set_action_mode" getter="get_action_mode" overrides="BaseButton" enum="BaseButton.ActionMode" default="0" />
		<member name="flat" type="bool" setter="set_flat" getter="is_flat" overrides="Button" default="true" />
		<member name="focus_mode" type="int" setter="set_focus_mode" getter="get_focus_mode" overrides="Control" enum="Control.FocusMode" default="0" />
		<member name="switch_on_hover" type="bool" setter="set_switch_on_hover" getter="is_switch_on_hover" default="false">
			If [code]true[/code], when the cursor hovers above another [MenuButton] within the same parent which also has [code]switch_on_hover[/code] enabled, it will close the current [MenuButton] and open the other one.
		</member>
		<member name="toggle_mode" type="bool" setter="set_toggle_mode" getter="is_toggle_mode" overrides="BaseButton" default="true" />
	</members>
	<signals>
		<signal name="about_to_show">
			<description>
				Emitted when [PopupMenu] of this MenuButton is about to show.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
	<theme_items>
		<theme_item name="font_color" data_type="color" type="Color" default="Color( 0.88, 0.88, 0.88, 1 )">
			Default text [Color] of the [MenuButton].
		</theme_item>
		<theme_item name="font_color_disabled" data_type="color" type="Color" default="Color( 1, 1, 1, 0.3 )">
			Text [Color] used when the [MenuButton] is disabled.
		</theme_item>
		<theme_item name="font_color_focus" data_type="color" type="Color" default="Color( 0.94, 0.94, 0.94, 1 )">
			Text [Color] used when the [MenuButton] is focused. Only replaces the normal text color of the button. Disabled, hovered, and pressed states take precedence over this color.
		</theme_item>
		<theme_item name="font_color_hover" data_type="color" type="Color" default="Color( 0.94, 0.94, 0.94, 1 )">
			Text [Color] used when the [MenuButton] is being hovered.
		</theme_item>
		<theme_item name="font_color_pressed" data_type="color" type="Color" default="Color( 1, 1, 1, 1 )">
			Text [Color] used when the [MenuButton] is being pressed.
		</theme_item>
		<theme_item name="hseparation" data_type="constant" type="int" default="3">
			The horizontal space between [MenuButton]'s icon and text.
		</theme_item>
		<theme_item name="font" data_type="font" type="Font">
			[Font] of the [MenuButton]'s text.
		</theme_item>
		<theme_item name="disabled" data_type="style" type="StyleBox">
			[StyleBox] used when the [MenuButton] is disabled.
		</theme_item>
		<theme_item name="focus" data_type="style" type="StyleBox">
			[StyleBox] used when the [MenuButton] is focused. It is displayed over the current [StyleBox], so using [StyleBoxEmpty] will just disable the focus visual effect.
		</theme_item>
		<theme_item name="hover" data_type="style" type="StyleBox">
			[StyleBox] used when the [MenuButton] is being hovered.
		</theme_item>
		<theme_item name="normal" data_type="style" type="StyleBox">
			Default [StyleBox] for the [MenuButton].
		</theme_item>
		<theme_item name="pressed" data_type="style" type="StyleBox">
			[StyleBox] used when the [MenuButton] is being pressed.
		</theme_item>
	</theme_items>
</class>
