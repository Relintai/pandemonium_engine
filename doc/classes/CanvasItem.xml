<?xml version="1.0" encoding="UTF-8" ?>
<class name="CanvasItem" inherits="Node">
	<brief_description>
		Base class of anything 2D.
	</brief_description>
	<description>
		Base class of anything 2D. Canvas items are laid out in a tree; children inherit and extend their parent's transform. [CanvasItem] is extended by [Control] for anything GUI-related, and by [Node2D] for anything related to the 2D engine.
		Any [CanvasItem] can draw. For this, [method update] is called by the engine, then [constant NOTIFICATION_DRAW] will be received on idle time to request redraw. Because of this, canvas items don't need to be redrawn on every frame, improving the performance significantly. Several functions for drawing on the [CanvasItem] are provided (see [code]draw_*[/code] functions). However, they can only be used inside [method _draw], its corresponding [method Object._notification] or methods connected to the [signal draw] signal.
		Canvas items are drawn in tree order. By default, children are on top of their parents so a root [CanvasItem] will be drawn behind everything. This behavior can be changed on a per-item basis.
		A [CanvasItem] can also be hidden, which will also hide its children. It provides many ways to change parameters such as modulation (for itself and its children) and self modulation (only for itself), as well as its blend mode.
		Ultimately, a transform notification can be requested, which will notify the node that its global position changed in case the parent tree changed.
		[b]Note:[/b] Unless otherwise specified, all methods that have angle parameters must have angles specified as [i]radians[/i]. To convert degrees to radians, use [method @GDScript.deg2rad].
	</description>
	<tutorials>
		<link title="Viewport and canvas transforms">$DOCS_URL/tutorials/2d/2d_transforms.md</link>
		<link title="Custom drawing in 2D">$DOCS_URL/tutorials/2d/custom_drawing_in_2d.md</link>
		<link title="Audio Spectrum Demo">https://godotengine.org/asset-library/asset/528</link>
	</tutorials>
	<methods>
		<method name="_draw" qualifiers="virtual">
			<return type="void" />
			<description>
				Called when [CanvasItem] has been requested to redraw (when [method update] is called, either manually or by the engine).
				Corresponds to the [constant NOTIFICATION_DRAW] notification in [method Object._notification].
			</description>
		</method>
		<method name="draw_arc">
			<return type="void" />
			<argument index="0" name="center" type="Vector2" />
			<argument index="1" name="radius" type="float" />
			<argument index="2" name="start_angle" type="float" />
			<argument index="3" name="end_angle" type="float" />
			<argument index="4" name="point_count" type="int" />
			<argument index="5" name="color" type="Color" />
			<argument index="6" name="width" type="float" default="1.0" />
			<argument index="7" name="antialiased" type="bool" default="false" />
			<description>
				Draws a unfilled arc between the given angles. The larger the value of [code]point_count[/code], the smoother the curve. See also [method draw_circle].
				[b]Note:[/b] Line drawing is not accelerated by batching if [code]antialiased[/code] is [code]true[/code].
				[b]Note:[/b] Due to how it works, built-in antialiasing will not look correct for translucent lines and may not work on certain platforms. As a workaround, install the [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] add-on then create an AntialiasedRegularPolygon2D node. That node relies on a texture with custom mipmaps to perform antialiasing. 2D batching is also still supported with those antialiased lines.
			</description>
		</method>
		<method name="draw_char">
			<return type="float" />
			<argument index="0" name="font" type="Font" />
			<argument index="1" name="position" type="Vector2" />
			<argument index="2" name="char" type="String" />
			<argument index="3" name="next" type="String" />
			<argument index="4" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<description>
				Draws a string character using a custom font. Returns the advance, depending on the character width and kerning with an optional next character.
			</description>
		</method>
		<method name="draw_circle">
			<return type="void" />
			<argument index="0" name="position" type="Vector2" />
			<argument index="1" name="radius" type="float" />
			<argument index="2" name="color" type="Color" />
			<description>
				Draws a colored, filled circle. See also [method draw_arc], [method draw_polyline] and [method draw_polygon].
				[b]Note:[/b] Built-in antialiasing is not provided for [method draw_circle]. As a workaround, install the [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] add-on then create an AntialiasedRegularPolygon2D node. That node relies on a texture with custom mipmaps to perform antialiasing.
			</description>
		</method>
		<method name="draw_colored_polygon">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="uvs" type="PoolVector2Array" default="PoolVector2Array(  )" />
			<argument index="3" name="texture" type="Texture" default="null" />
			<argument index="4" name="normal_map" type="Texture" default="null" />
			<argument index="5" name="antialiased" type="bool" default="false" />
			<description>
				Draws a colored polygon of any amount of points, convex or concave. Unlike [method draw_polygon], a single color must be specified for the whole polygon.
				[b]Note:[/b] Due to how it works, built-in antialiasing will not look correct for translucent polygons and may not work on certain platforms. As a workaround, install the [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] add-on then create an AntialiasedPolygon2D node. That node relies on a texture with custom mipmaps to perform antialiasing.
			</description>
		</method>
		<method name="draw_line">
			<return type="void" />
			<argument index="0" name="from" type="Vector2" />
			<argument index="1" name="to" type="Vector2" />
			<argument index="2" name="color" type="Color" />
			<argument index="3" name="width" type="float" default="1.0" />
			<argument index="4" name="antialiased" type="bool" default="false" />
			<description>
				Draws a line from a 2D point to another, with a given color and width. It can be optionally antialiased. See also [method draw_multiline] and [method draw_polyline].
				[b]Note:[/b] Line drawing is not accelerated by batching if [code]antialiased[/code] is [code]true[/code].
				[b]Note:[/b] Due to how it works, built-in antialiasing will not look correct for translucent lines and may not work on certain platforms. As a workaround, install the [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] add-on then create an AntialiasedLine2D node. That node relies on a texture with custom mipmaps to perform antialiasing. 2D batching is also still supported with those antialiased lines.
			</description>
		</method>
		<method name="draw_mesh">
			<return type="void" />
			<argument index="0" name="mesh" type="Mesh" />
			<argument index="1" name="texture" type="Texture" />
			<argument index="2" name="normal_map" type="Texture" default="null" />
			<argument index="3" name="transform" type="Transform2D" default="Transform2D( 1, 0, 0, 1, 0, 0 )" />
			<argument index="4" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<description>
				Draws a [Mesh] in 2D, using the provided texture. See [MeshInstance2D] for related documentation.
			</description>
		</method>
		<method name="draw_multiline">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="width" type="float" default="1.0" />
			<argument index="3" name="antialiased" type="bool" default="false" />
			<description>
				Draws multiple disconnected lines with a uniform [code]color[/code]. When drawing large amounts of lines, this is faster than using individual [method draw_line] calls. To draw interconnected lines, use [method draw_polyline] instead.
				[b]Note:[/b] [code]width[/code] and [code]antialiased[/code] are currently not implemented and have no effect. As a workaround, install the [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] add-on then create an AntialiasedLine2D node. That node relies on a texture with custom mipmaps to perform antialiasing. 2D batching is also still supported with those antialiased lines.
			</description>
		</method>
		<method name="draw_multiline_colors">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="colors" type="PoolColorArray" />
			<argument index="2" name="width" type="float" default="1.0" />
			<argument index="3" name="antialiased" type="bool" default="false" />
			<description>
				Draws multiple disconnected lines with a uniform [code]width[/code] and segment-by-segment coloring. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code]. When drawing large amounts of lines, this is faster than using individual [method draw_line] calls. To draw interconnected lines, use [method draw_polyline_colors] instead.
				[b]Note:[/b] [code]width[/code] and [code]antialiased[/code] are currently not implemented and have no effect. As a workaround, install the [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] add-on then create an AntialiasedLine2D node. That node relies on a texture with custom mipmaps to perform antialiasing. 2D batching is also still supported with those antialiased lines.
			</description>
		</method>
		<method name="draw_multimesh">
			<return type="void" />
			<argument index="0" name="multimesh" type="MultiMesh" />
			<argument index="1" name="texture" type="Texture" />
			<argument index="2" name="normal_map" type="Texture" default="null" />
			<description>
				Draws a [MultiMesh] in 2D with the provided texture. See [MultiMeshInstance2D] for related documentation.
			</description>
		</method>
		<method name="draw_polygon">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="colors" type="PoolColorArray" />
			<argument index="2" name="uvs" type="PoolVector2Array" default="PoolVector2Array(  )" />
			<argument index="3" name="texture" type="Texture" default="null" />
			<argument index="4" name="normal_map" type="Texture" default="null" />
			<argument index="5" name="antialiased" type="bool" default="false" />
			<description>
				Draws a solid polygon of any amount of points, convex or concave. Unlike [method draw_colored_polygon], each point's color can be changed individually. See also [method draw_polyline] and [method draw_polyline_colors].
				[b]Note:[/b] Due to how it works, built-in antialiasing will not look correct for translucent polygons and may not work on certain platforms. As a workaround, install the [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] add-on then create an AntialiasedPolygon2D node. That node relies on a texture with custom mipmaps to perform antialiasing.
			</description>
		</method>
		<method name="draw_polyline">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="width" type="float" default="1.0" />
			<argument index="3" name="antialiased" type="bool" default="false" />
			<description>
				Draws interconnected line segments with a uniform [code]color[/code] and [code]width[/code] and optional antialiasing. When drawing large amounts of lines, this is faster than using individual [method draw_line] calls. To draw disconnected lines, use [method draw_multiline] instead. See also [method draw_polygon].
				[b]Note:[/b] Due to how it works, built-in antialiasing will not look correct for translucent polygons and may not work on certain platforms. As a workaround, install the [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] add-on then create an AntialiasedPolygon2D node. That node relies on a texture with custom mipmaps to perform antialiasing.
			</description>
		</method>
		<method name="draw_polyline_colors">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="colors" type="PoolColorArray" />
			<argument index="2" name="width" type="float" default="1.0" />
			<argument index="3" name="antialiased" type="bool" default="false" />
			<description>
				Draws interconnected line segments with a uniform [code]width[/code] and segment-by-segment coloring, and optional antialiasing. Colors assigned to line segments match by index between [code]points[/code] and [code]colors[/code]. When drawing large amounts of lines, this is faster than using individual [method draw_line] calls. To draw disconnected lines, use [method draw_multiline_colors] instead. See also [method draw_polygon].
				[b]Note:[/b] Due to how it works, built-in antialiasing will not look correct for translucent polygons and may not work on certain platforms. As a workaround, install the [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] add-on then create an AntialiasedPolygon2D node. That node relies on a texture with custom mipmaps to perform antialiasing.
			</description>
		</method>
		<method name="draw_primitive">
			<return type="void" />
			<argument index="0" name="points" type="PoolVector2Array" />
			<argument index="1" name="colors" type="PoolColorArray" />
			<argument index="2" name="uvs" type="PoolVector2Array" />
			<argument index="3" name="texture" type="Texture" default="null" />
			<argument index="4" name="width" type="float" default="1.0" />
			<argument index="5" name="normal_map" type="Texture" default="null" />
			<description>
				Draws a custom primitive. 1 point for a point, 2 points for a line, 3 points for a triangle, and 4 points for a quad. If 0 points or more than 4 points are specified, nothing will be drawn and an error message will be printed. See also [method draw_line], [method draw_polyline], [method draw_polygon], and [method draw_rect].
			</description>
		</method>
		<method name="draw_rect">
			<return type="void" />
			<argument index="0" name="rect" type="Rect2" />
			<argument index="1" name="color" type="Color" />
			<argument index="2" name="filled" type="bool" default="true" />
			<argument index="3" name="width" type="float" default="1.0" />
			<argument index="4" name="antialiased" type="bool" default="false" />
			<description>
				Draws a rectangle. If [code]filled[/code] is [code]true[/code], the rectangle will be filled with the [code]color[/code] specified. If [code]filled[/code] is [code]false[/code], the rectangle will be drawn as a stroke with the [code]color[/code] and [code]width[/code] specified. If [code]antialiased[/code] is [code]true[/code], the lines will attempt to perform antialiasing using OpenGL line smoothing.
				[b]Note:[/b] [code]width[/code] and [code]antialiased[/code] are only effective if [code]filled[/code] is [code]false[/code].
				[b]Note:[/b] Due to how it works, built-in antialiasing will not look correct for translucent polygons and may not work on certain platforms. As a workaround, install the [url=https://github.com/godot-extended-libraries/godot-antialiased-line2d]Antialiased Line2D[/url] add-on then create an AntialiasedPolygon2D node. That node relies on a texture with custom mipmaps to perform antialiasing.
			</description>
		</method>
		<method name="draw_set_transform">
			<return type="void" />
			<argument index="0" name="position" type="Vector2" />
			<argument index="1" name="rotation" type="float" />
			<argument index="2" name="scale" type="Vector2" />
			<description>
				Sets a custom transform for drawing via components. Anything drawn afterwards will be transformed by this.
			</description>
		</method>
		<method name="draw_set_transform_matrix">
			<return type="void" />
			<argument index="0" name="xform" type="Transform2D" />
			<description>
				Sets a custom transform for drawing via matrix. Anything drawn afterwards will be transformed by this.
			</description>
		</method>
		<method name="draw_string">
			<return type="void" />
			<argument index="0" name="font" type="Font" />
			<argument index="1" name="position" type="Vector2" />
			<argument index="2" name="text" type="String" />
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="4" name="clip_w" type="int" default="-1" />
			<description>
				Draws [code]text[/code] using the specified [code]font[/code] at the [code]position[/code] (bottom-left corner using the baseline of the font). The text will have its color multiplied by [code]modulate[/code]. If [code]clip_w[/code] is greater than or equal to 0, the text will be clipped if it exceeds the specified width.
				[b]Example using the default project font:[/b]
				[codeblock]
				# If using this method in a script that redraws constantly, move the
				# `default_font` declaration to a member variable assigned in `_ready()`
				# so the Control is only created once.
				var default_font = Control.new().get_theme_font("font")
				draw_string(default_font, Vector2(64, 64), "Hello world")
				[/codeblock]
				See also [method Font.draw].
			</description>
		</method>
		<method name="draw_style_box">
			<return type="void" />
			<argument index="0" name="style_box" type="StyleBox" />
			<argument index="1" name="rect" type="Rect2" />
			<description>
				Draws a styled rectangle.
			</description>
		</method>
		<method name="draw_texture">
			<return type="void" />
			<argument index="0" name="texture" type="Texture" />
			<argument index="1" name="position" type="Vector2" />
			<argument index="2" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="3" name="normal_map" type="Texture" default="null" />
			<description>
				Draws a texture at a given position.
			</description>
		</method>
		<method name="draw_texture_rect">
			<return type="void" />
			<argument index="0" name="texture" type="Texture" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="tile" type="bool" />
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="4" name="transpose" type="bool" default="false" />
			<argument index="5" name="normal_map" type="Texture" default="null" />
			<description>
				Draws a textured rectangle at a given position, optionally modulated by a color. If [code]transpose[/code] is [code]true[/code], the texture will have its X and Y coordinates swapped.
			</description>
		</method>
		<method name="draw_texture_rect_region">
			<return type="void" />
			<argument index="0" name="texture" type="Texture" />
			<argument index="1" name="rect" type="Rect2" />
			<argument index="2" name="src_rect" type="Rect2" />
			<argument index="3" name="modulate" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="4" name="transpose" type="bool" default="false" />
			<argument index="5" name="normal_map" type="Texture" default="null" />
			<argument index="6" name="clip_uv" type="bool" default="true" />
			<description>
				Draws a textured rectangle region at a given position, optionally modulated by a color. If [code]transpose[/code] is [code]true[/code], the texture will have its X and Y coordinates swapped.
			</description>
		</method>
		<method name="force_update_transform">
			<return type="void" />
			<description>
				Forces the transform to update. Transform changes in physics are not instant for performance reasons. Transforms are accumulated and then set. Use this if you need an up-to-date transform when doing physics operations.
			</description>
		</method>
		<method name="get_canvas" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the [RID] of the [World2D] canvas where this item is in.
			</description>
		</method>
		<method name="get_canvas_item" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the canvas item RID used by [RenderingServer] for this item.
			</description>
		</method>
		<method name="get_canvas_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the transform from the coordinate system of the canvas, this item is in, to the [Viewport]s coordinate system.
			</description>
		</method>
		<method name="get_global_mouse_position" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the mouse's position in the [CanvasLayer] that this [CanvasItem] is in using the coordinate system of the [CanvasLayer].
			</description>
		</method>
		<method name="get_global_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the global transform matrix of this item, i.e. the combined transform up to the topmost [CanvasItem] node. The topmost item is a [CanvasItem] that either has no parent, has non-[CanvasItem] parent or it is top-level. See also [method set_as_toplevel].
			</description>
		</method>
		<method name="get_global_transform_with_canvas" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the transform from the local coordinate system of this [CanvasItem] to the [Viewport]s coordinate system.
			</description>
		</method>
		<method name="get_local_mouse_position" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the mouse's position in this [CanvasItem] using the local coordinate system of this [CanvasItem].
			</description>
		</method>
		<method name="get_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the transform matrix of this item.
			</description>
		</method>
		<method name="get_viewport_rect" qualifiers="const">
			<return type="Rect2" />
			<description>
				Returns the viewport's boundaries as a [Rect2].
			</description>
		</method>
		<method name="get_viewport_transform" qualifiers="const">
			<return type="Transform2D" />
			<description>
				Returns the transform from the coordinate system of the canvas, this item is in, to the [Viewport]s embedders coordinate system.
			</description>
		</method>
		<method name="get_world_2d" qualifiers="const">
			<return type="World2D" />
			<description>
				Returns the [World2D] where this item is in.
			</description>
		</method>
		<method name="hide">
			<return type="void" />
			<description>
				Hide the [CanvasItem] if it's currently visible. This is equivalent to setting [member visible] to [code]false[/code].
			</description>
		</method>
		<method name="is_local_transform_notification_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if local transform notifications are communicated to children.
			</description>
		</method>
		<method name="is_set_as_toplevel" qualifiers="const">
			<return type="bool" />
			<description>
			</description>
		</method>
		<method name="is_transform_notification_enabled" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if global transform notifications are communicated to children.
			</description>
		</method>
		<method name="is_visible_in_tree" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the node is present in the [SceneTree], its [member visible] property is [code]true[/code] and all its ancestors are also visible. If any ancestor is hidden, this node will not be visible in the scene tree, and is consequently not drawn (see [method _draw]).
			</description>
		</method>
		<method name="make_canvas_position_local" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="screen_point" type="Vector2" />
			<description>
				Assigns [code]screen_point[/code] as this node's new local transform.
			</description>
		</method>
		<method name="make_input_local" qualifiers="const">
			<return type="InputEvent" />
			<argument index="0" name="event" type="InputEvent" />
			<description>
				Transformations issued by [code]event[/code]'s inputs are applied in local space instead of global space.
			</description>
		</method>
		<method name="set_as_toplevel">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
			</description>
		</method>
		<method name="set_notify_local_transform">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				If [code]enable[/code] is [code]true[/code], this node will receive [constant NOTIFICATION_LOCAL_TRANSFORM_CHANGED] when its local transform changes.
			</description>
		</method>
		<method name="set_notify_transform">
			<return type="void" />
			<argument index="0" name="enable" type="bool" />
			<description>
				If [code]enable[/code] is [code]true[/code], this node will receive [constant NOTIFICATION_TRANSFORM_CHANGED] when its global transform changes.
			</description>
		</method>
		<method name="show">
			<return type="void" />
			<description>
				Show the [CanvasItem] if it's currently hidden. This is equivalent to setting [member visible] to [code]true[/code]. For controls that inherit [Popup], the correct way to make them visible is to call one of the multiple [code]popup*()[/code] functions instead.
			</description>
		</method>
		<method name="update">
			<return type="void" />
			<description>
				Queues the [CanvasItem] to redraw. During idle time, if [CanvasItem] is visible, [constant NOTIFICATION_DRAW] is sent and [method _draw] is called. This only occurs [b]once[/b] per frame, even if this method has been called multiple times.
			</description>
		</method>
	</methods>
	<members>
		<member name="light_mask" type="int" setter="set_light_mask" getter="get_light_mask" default="1">
			The rendering layers in which this [CanvasItem] responds to [Light2D] nodes.
		</member>
		<member name="material" type="Material" setter="set_material" getter="get_material">
			The material applied to textures on this [CanvasItem].
		</member>
		<member name="modulate" type="Color" setter="set_modulate" getter="get_modulate" default="Color( 1, 1, 1, 1 )">
			The color applied to textures on this [CanvasItem].
		</member>
		<member name="self_modulate" type="Color" setter="set_self_modulate" getter="get_self_modulate" default="Color( 1, 1, 1, 1 )">
			The color applied to textures on this [CanvasItem]. This is not inherited by children [CanvasItem]s.
		</member>
		<member name="show_behind_parent" type="bool" setter="set_draw_behind_parent" getter="is_draw_behind_parent_enabled" default="false">
			If [code]true[/code], the object draws behind its parent.
		</member>
		<member name="use_parent_material" type="bool" setter="set_use_parent_material" getter="get_use_parent_material" default="false">
			If [code]true[/code], the parent [CanvasItem]'s [member material] property is used as this one's material.
		</member>
		<member name="visible" type="bool" setter="set_visible" getter="is_visible" default="true">
			If [code]true[/code], this [CanvasItem] is drawn. The node is only visible if all of its ancestors are visible as well (in other words, [method is_visible_in_tree] must return [code]true[/code]).
			[b]Note:[/b] For controls that inherit [Popup], the correct way to make them visible is to call one of the multiple [code]popup*()[/code] functions instead.
		</member>
	</members>
	<signals>
		<signal name="draw">
			<description>
				Emitted when the [CanvasItem] must redraw, [i]after[/i] the related [constant NOTIFICATION_DRAW] notification, and [i]before[/i] [method _draw] is called.
				[b]Note:[/b] Deferred connections do not allow drawing through the [code]draw_*[/code] methods.
			</description>
		</signal>
		<signal name="hide">
			<description>
				Emitted when becoming hidden.
			</description>
		</signal>
		<signal name="item_rect_changed">
			<description>
				Emitted when the item's [Rect2] boundaries (position or size) have changed, or when an action is taking place that may have impacted these boundaries (e.g. changing [member Sprite.texture]).
			</description>
		</signal>
		<signal name="visibility_changed">
			<description>
				Emitted when the visibility (hidden/visible) changes.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="BLEND_MODE_MIX" value="0" enum="BlendMode">
			Mix blending mode. Colors are assumed to be independent of the alpha (opacity) value.
		</constant>
		<constant name="BLEND_MODE_ADD" value="1" enum="BlendMode">
			Additive blending mode.
		</constant>
		<constant name="BLEND_MODE_SUB" value="2" enum="BlendMode">
			Subtractive blending mode.
		</constant>
		<constant name="BLEND_MODE_MUL" value="3" enum="BlendMode">
			Multiplicative blending mode.
		</constant>
		<constant name="BLEND_MODE_PREMULT_ALPHA" value="4" enum="BlendMode">
			Mix blending mode. Colors are assumed to be premultiplied by the alpha (opacity) value.
		</constant>
		<constant name="BLEND_MODE_DISABLED" value="5" enum="BlendMode">
			Disables blending mode. Colors including alpha are written as-is. Only applicable for render targets with a transparent background. No lighting will be applied.
		</constant>
		<constant name="NOTIFICATION_TRANSFORM_CHANGED" value="2000">
			The [CanvasItem]'s global transform has changed. This notification is only received if enabled by [method set_notify_transform].
		</constant>
		<constant name="NOTIFICATION_LOCAL_TRANSFORM_CHANGED" value="35">
			The [CanvasItem]'s local transform has changed. This notification is only received if enabled by [method set_notify_local_transform].
		</constant>
		<constant name="NOTIFICATION_DRAW" value="30">
			The [CanvasItem] is requested to draw (see [method _draw]).
		</constant>
		<constant name="NOTIFICATION_VISIBILITY_CHANGED" value="31">
			The [CanvasItem]'s visibility has changed.
		</constant>
		<constant name="NOTIFICATION_ENTER_CANVAS" value="32">
			The [CanvasItem] has entered the canvas.
		</constant>
		<constant name="NOTIFICATION_EXIT_CANVAS" value="33">
			The [CanvasItem] has exited the canvas.
		</constant>
	</constants>
</class>
