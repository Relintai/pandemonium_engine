<?xml version="1.0" encoding="UTF-8" ?>
<class name="CollisionObject" inherits="Spatial">
	<brief_description>
		Base node for collision objects.
	</brief_description>
	<description>
		CollisionObject is the base class for physics objects. It can hold any number of collision [Shape]s. Each shape must be assigned to a [i]shape owner[/i]. The CollisionObject can have any number of shape owners. Shape owners are not nodes and do not appear in the editor, but are accessible through code using the [code]shape_owner_*[/code] methods.
		[b]Warning:[/b] With a non-uniform scale this node will probably not function as expected. Please make sure to keep its scale uniform (i.e. the same on all axes), and change the size(s) of its collision shape(s) instead.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_input_event" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="camera" type="Object" />
			<argument index="1" name="event" type="InputEvent" />
			<argument index="2" name="position" type="Vector3" />
			<argument index="3" name="normal" type="Vector3" />
			<argument index="4" name="shape_idx" type="int" />
			<description>
				Receives unhandled [InputEvent]s. [code]position[/code] is the location in world space of the mouse pointer on the surface of the shape with index [code]shape_idx[/code] and [code]normal[/code] is the normal vector of the surface at that point. Connect to the [signal input_event] signal to easily pick up these events.
			</description>
		</method>
		<method name="create_shape_owner">
			<return type="int" />
			<argument index="0" name="owner" type="Object" />
			<description>
				Creates a new shape owner for the given object. Returns [code]owner_id[/code] of the new owner for future reference.
			</description>
		</method>
		<method name="get_collision_layer_bit" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="bit" type="int" />
			<description>
				Returns whether or not the specified [code]bit[/code] of the [member collision_layer] is set.
			</description>
		</method>
		<method name="get_collision_mask_bit" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="bit" type="int" />
			<description>
				Returns whether or not the specified [code]bit[/code] of the [member collision_mask] is set.
			</description>
		</method>
		<method name="get_rid" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the object's [RID].
			</description>
		</method>
		<method name="get_shape_owners">
			<return type="Array" />
			<description>
				Returns an [Array] of [code]owner_id[/code] identifiers. You can use these ids in other methods that take [code]owner_id[/code] as an argument.
			</description>
		</method>
		<method name="is_shape_owner_disabled" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="owner_id" type="int" />
			<description>
				If [code]true[/code], the shape owner and its shapes are disabled.
			</description>
		</method>
		<method name="remove_shape_owner">
			<return type="void" />
			<argument index="0" name="owner_id" type="int" />
			<description>
				Removes the given shape owner.
			</description>
		</method>
		<method name="set_collision_layer_bit">
			<return type="void" />
			<argument index="0" name="bit" type="int" />
			<argument index="1" name="value" type="bool" />
			<description>
				If [code]value[/code] is [code]true[/code], sets the specified [code]bit[/code] in the [member collision_layer].
				If [code]value[/code] is [code]false[/code], clears the specified [code]bit[/code] in the [member collision_layer].
			</description>
		</method>
		<method name="set_collision_mask_bit">
			<return type="void" />
			<argument index="0" name="bit" type="int" />
			<argument index="1" name="value" type="bool" />
			<description>
				If [code]value[/code] is [code]true[/code], sets the specified [code]bit[/code] in the [member collision_mask].
				If [code]value[/code] is [code]false[/code], clears the specified [code]bit[/code] in the [member collision_mask].
			</description>
		</method>
		<method name="shape_find_owner" qualifiers="const">
			<return type="int" />
			<argument index="0" name="shape_index" type="int" />
			<description>
				Returns the [code]owner_id[/code] of the given shape.
			</description>
		</method>
		<method name="shape_owner_add_shape">
			<return type="void" />
			<argument index="0" name="owner_id" type="int" />
			<argument index="1" name="shape" type="Shape" />
			<description>
				Adds a [Shape] to the shape owner.
			</description>
		</method>
		<method name="shape_owner_clear_shapes">
			<return type="void" />
			<argument index="0" name="owner_id" type="int" />
			<description>
				Removes all shapes from the shape owner.
			</description>
		</method>
		<method name="shape_owner_get_owner" qualifiers="const">
			<return type="Object" />
			<argument index="0" name="owner_id" type="int" />
			<description>
				Returns the parent object of the given shape owner.
			</description>
		</method>
		<method name="shape_owner_get_shape" qualifiers="const">
			<return type="Shape" />
			<argument index="0" name="owner_id" type="int" />
			<argument index="1" name="shape_id" type="int" />
			<description>
				Returns the [Shape] with the given id from the given shape owner.
			</description>
		</method>
		<method name="shape_owner_get_shape_count" qualifiers="const">
			<return type="int" />
			<argument index="0" name="owner_id" type="int" />
			<description>
				Returns the number of shapes the given shape owner contains.
			</description>
		</method>
		<method name="shape_owner_get_shape_index" qualifiers="const">
			<return type="int" />
			<argument index="0" name="owner_id" type="int" />
			<argument index="1" name="shape_id" type="int" />
			<description>
				Returns the child index of the [Shape] with the given id from the given shape owner.
			</description>
		</method>
		<method name="shape_owner_get_transform" qualifiers="const">
			<return type="Transform" />
			<argument index="0" name="owner_id" type="int" />
			<description>
				Returns the shape owner's [Transform].
			</description>
		</method>
		<method name="shape_owner_remove_shape">
			<return type="void" />
			<argument index="0" name="owner_id" type="int" />
			<argument index="1" name="shape_id" type="int" />
			<description>
				Removes a shape from the given shape owner.
			</description>
		</method>
		<method name="shape_owner_set_disabled">
			<return type="void" />
			<argument index="0" name="owner_id" type="int" />
			<argument index="1" name="disabled" type="bool" />
			<description>
				If [code]true[/code], disables the given shape owner.
			</description>
		</method>
		<method name="shape_owner_set_transform">
			<return type="void" />
			<argument index="0" name="owner_id" type="int" />
			<argument index="1" name="transform" type="Transform" />
			<description>
				Sets the [Transform] of the given shape owner.
			</description>
		</method>
	</methods>
	<members>
		<member name="collision_layer" type="int" setter="set_collision_layer" getter="get_collision_layer" default="1">
			The physics layers this CollisionObject3D is in. Collision objects can exist in one or more of 32 different layers. See also [member collision_mask].
			[b]Note:[/b] A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See [url=$DOCS_URL/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.
		</member>
		<member name="collision_mask" type="int" setter="set_collision_mask" getter="get_collision_mask" default="1">
			The physics layers this CollisionObject3D scans. Collision objects can scan one or more of 32 different layers. See also [member collision_layer].
			[b]Note:[/b] A contact is detected if object A is in any of the layers that object B scans, or object B is in any layers that object A scans. See [url=$DOCS_URL/tutorials/physics/physics_introduction.html#collision-layers-and-masks]Collision layers and masks[/url] in the documentation for more information.
		</member>
		<member name="input_capture_on_drag" type="bool" setter="set_capture_input_on_drag" getter="get_capture_input_on_drag" default="false">
			If [code]true[/code], the [CollisionObject] will continue to receive input events as the mouse is dragged across its shapes.
		</member>
		<member name="input_ray_pickable" type="bool" setter="set_ray_pickable" getter="is_ray_pickable" default="true">
			If [code]true[/code], this object is pickable. A pickable object can detect the mouse pointer entering/leaving, and if the mouse is inside it, report input events. Requires at least one [member collision_layer] bit to be set.
		</member>
	</members>
	<signals>
		<signal name="input_event">
			<argument index="0" name="camera" type="Node" />
			<argument index="1" name="event" type="InputEvent" />
			<argument index="2" name="position" type="Vector3" />
			<argument index="3" name="normal" type="Vector3" />
			<argument index="4" name="shape_idx" type="int" />
			<description>
				Emitted when the object receives an unhandled [InputEvent]. [code]position[/code] is the location in world space of the mouse pointer on the surface of the shape with index [code]shape_idx[/code] and [code]normal[/code] is the normal vector of the surface at that point.
			</description>
		</signal>
		<signal name="mouse_entered">
			<description>
				Emitted when the mouse pointer enters any of this object's shapes.
			</description>
		</signal>
		<signal name="mouse_exited">
			<description>
				Emitted when the mouse pointer exits all this object's shapes.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
