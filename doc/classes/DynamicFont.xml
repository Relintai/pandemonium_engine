<?xml version="1.0" encoding="UTF-8" ?>
<class name="DynamicFont" inherits="Font">
	<brief_description>
		DynamicFont renders vector font files at runtime.
	</brief_description>
	<description>
		DynamicFont renders vector font files dynamically at runtime instead of using a prerendered texture atlas like [BitmapFont]. This trades the faster loading time of [BitmapFont]s for the ability to change font parameters like size and spacing during runtime. [DynamicFontData] is used for referencing the font file paths. DynamicFont also supports defining one or more fallback fonts, which will be used when displaying a character not supported by the main font.
		DynamicFont uses the [url=https://www.freetype.org/]FreeType[/url] library for rasterization. Supported formats are TrueType ([code].ttf[/code]), OpenType ([code].otf[/code]), Web Open Font Format 1 ([code].woff[/code]), and  Web Open Font Format 2 ([code].woff2[/code]).
		[codeblock]
		var dynamic_font = DynamicFont.new()
		dynamic_font.font_data = load("res://BarlowCondensed-Bold.ttf")
		dynamic_font.size = 64
		$"Label".set("custom_fonts/font", dynamic_font)
		[/codeblock]
		[b]Note:[/b] DynamicFont doesn't support features such as kerning, right-to-left typesetting, ligatures, text shaping, variable fonts and optional font features yet. If you wish to "bake" an optional font feature into a TTF font file, you can use [url=https://fontforge.org/]FontForge[/url] to do so. In FontForge, use [b]File &gt; Generate Fonts[/b], click [b]Options[/b], choose the desired features then generate the font.
	</description>
	<tutorials>
		<link title="3D Voxel Demo">https://godotengine.org/asset-library/asset/676</link>
	</tutorials>
	<methods>
		<method name="add_fallback">
			<return type="void" />
			<argument index="0" name="data" type="DynamicFontData" />
			<description>
				Adds a fallback font.
			</description>
		</method>
		<method name="get_available_chars" qualifiers="const">
			<return type="String" />
			<description>
				Returns a string containing all the characters available in the main and all the fallback fonts.
				If a given character is included in more than one font, it appears only once in the returned string.
			</description>
		</method>
		<method name="get_fallback" qualifiers="const">
			<return type="DynamicFontData" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the fallback font at index [code]idx[/code].
			</description>
		</method>
		<method name="get_fallback_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of fallback fonts.
			</description>
		</method>
		<method name="get_spacing" qualifiers="const">
			<return type="int" />
			<argument index="0" name="type" type="int" />
			<description>
				Returns the spacing for the given [code]type[/code] (see [enum SpacingType]).
			</description>
		</method>
		<method name="remove_fallback">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<description>
				Removes the fallback font at index [code]idx[/code].
			</description>
		</method>
		<method name="set_fallback">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="data" type="DynamicFontData" />
			<description>
				Sets the fallback font at index [code]idx[/code].
			</description>
		</method>
		<method name="set_spacing">
			<return type="void" />
			<argument index="0" name="type" type="int" />
			<argument index="1" name="value" type="int" />
			<description>
				Sets the spacing for [code]type[/code] (see [enum SpacingType]) to [code]value[/code] in pixels (not relative to the font size).
			</description>
		</method>
	</methods>
	<members>
		<member name="extra_spacing_bottom" type="int" setter="set_spacing" getter="get_spacing" default="0">
			Extra spacing at the bottom in pixels.
		</member>
		<member name="extra_spacing_char" type="int" setter="set_spacing" getter="get_spacing" default="0">
			Extra spacing for each character in pixels.
			This can be a negative number to make the distance between characters smaller.
		</member>
		<member name="extra_spacing_space" type="int" setter="set_spacing" getter="get_spacing" default="0">
			Extra spacing for the space character (in addition to [member extra_spacing_char]) in pixels.
			This can be a negative number to make the distance between words smaller.
		</member>
		<member name="extra_spacing_top" type="int" setter="set_spacing" getter="get_spacing" default="0">
			Extra spacing at the top in pixels.
		</member>
		<member name="font_data" type="DynamicFontData" setter="set_font_data" getter="get_font_data">
			The font data.
		</member>
		<member name="outline_color" type="Color" setter="set_outline_color" getter="get_outline_color" default="Color( 1, 1, 1, 1 )">
			The font outline's color.
			[b]Note:[/b] It's recommended to leave this at the default value so that you can adjust it in individual controls. For example, if the outline is made black here, it won't be possible to change its color using a Label's font outline modulate theme item.
		</member>
		<member name="outline_size" type="int" setter="set_outline_size" getter="get_outline_size" default="0">
			The font outline's thickness in pixels (not relative to the font size).
		</member>
		<member name="size" type="int" setter="set_size" getter="get_size" default="16">
			The font size in pixels.
		</member>
		<member name="use_filter" type="bool" setter="set_use_filter" getter="get_use_filter" default="false">
			If [code]true[/code], filtering is used. This makes the font blurry instead of pixelated when scaling it if font oversampling is disabled or ineffective. It's recommended to enable this when using the font in a control whose size changes over time, unless a pixel art aesthetic is desired.
		</member>
		<member name="use_mipmaps" type="bool" setter="set_use_mipmaps" getter="get_use_mipmaps" default="false">
			If [code]true[/code], mipmapping is used. This improves the font's appearance when downscaling it if font oversampling is disabled or ineffective.
		</member>
	</members>
	<constants>
		<constant name="SPACING_TOP" value="0" enum="SpacingType">
			Spacing at the top.
		</constant>
		<constant name="SPACING_BOTTOM" value="1" enum="SpacingType">
			Spacing at the bottom.
		</constant>
		<constant name="SPACING_CHAR" value="2" enum="SpacingType">
			Spacing for each character.
		</constant>
		<constant name="SPACING_SPACE" value="3" enum="SpacingType">
			Spacing for the space character.
		</constant>
	</constants>
</class>
