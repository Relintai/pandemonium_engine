<?xml version="1.0" encoding="UTF-8" ?>
<class name="Navigation" inherits="Spatial">
	<brief_description>
		Mesh-based navigation and pathfinding node.
	</brief_description>
	<description>
		Provides navigation and pathfinding within a collection of [NavigationMesh]es. By default, these will be automatically collected from child [NavigationMeshInstance] nodes. In addition to basic pathfinding, this class also assists with aligning navigation agents with the meshes they are navigating on.
	</description>
	<tutorials>
		<link title="3D Navmesh Demo">https://github.com/Relintai/pandemonium_demo_projects/tree/master/3d/navmesh</link>
	</tutorials>
	<methods>
		<method name="get_closest_point" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="to_point" type="Vector3" />
			<description>
				Returns the navigation point closest to the point given. Points are in local coordinate space.
			</description>
		</method>
		<method name="get_closest_point_normal" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="to_point" type="Vector3" />
			<description>
				Returns the surface normal at the navigation point closest to the point given. Useful for rotating a navigation agent according to the navigation mesh it moves on.
			</description>
		</method>
		<method name="get_closest_point_owner" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="to_point" type="Vector3" />
			<description>
				Returns the owner of the [NavigationMesh] which contains the navigation point closest to the point given. This is usually a [NavigationMeshInstance].
			</description>
		</method>
		<method name="get_closest_point_to_segment" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="start" type="Vector3" />
			<argument index="1" name="end" type="Vector3" />
			<argument index="2" name="use_collision" type="bool" default="false" />
			<description>
				Returns the navigation point closest to the given line segment. When enabling [code]use_collision[/code], only considers intersection points between segment and navigation meshes. If multiple intersection points are found, the one closest to the segment start point is returned.
			</description>
		</method>
		<method name="get_rid" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the [RID] of the navigation map on the [NavigationServer].
			</description>
		</method>
		<method name="get_simple_path" qualifiers="const">
			<return type="PoolVector3Array" />
			<argument index="0" name="start" type="Vector3" />
			<argument index="1" name="end" type="Vector3" />
			<argument index="2" name="optimize" type="bool" default="true" />
			<description>
				Returns the path between two given points. Points are in local coordinate space. If [code]optimize[/code] is [code]true[/code] (the default), the agent properties associated with each [NavigationMesh] (radius, height, etc.) are considered in the path calculation, otherwise they are ignored.
			</description>
		</method>
	</methods>
	<members>
		<member name="cell_height" type="float" setter="set_cell_height" getter="get_cell_height" default="0.25">
			The cell height to use for fields.
		</member>
		<member name="cell_size" type="float" setter="set_cell_size" getter="get_cell_size" default="0.25">
			The XZ plane cell size to use for fields.
		</member>
		<member name="edge_connection_margin" type="float" setter="set_edge_connection_margin" getter="get_edge_connection_margin" default="0.25">
			This value is used to detect the near edges to connect compatible regions.
		</member>
		<member name="navigation_layers" type="int" setter="set_navigation_layers" getter="get_navigation_layers" default="1">
			A bitfield determining all navigation map layers the navigation can use on a [method Navigation.get_simple_path] path query.
		</member>
		<member name="up_vector" type="Vector3" setter="set_up_vector" getter="get_up_vector" default="Vector3( 0, 1, 0 )">
			Defines which direction is up. By default, this is [code](0, 1, 0)[/code], which is the world's "up" direction.
		</member>
	</members>
	<signals>
		<signal name="map_changed">
			<argument index="0" name="map" type="RID" />
			<description>
				Emitted when a navigation map is updated, when a region moves or is modified.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
