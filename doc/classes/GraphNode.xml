<?xml version="1.0" encoding="UTF-8" ?>
<class name="GraphNode" inherits="Container">
	<brief_description>
		A GraphNode is a container with potentially several input and output slots allowing connections between GraphNodes. Slots can have different, incompatible types.
	</brief_description>
	<description>
		A GraphNode is a container. Each GraphNode can have several input and output slots, sometimes referred to as ports, allowing connections between GraphNodes. To add a slot to GraphNode, add any [Control]-derived child node to it.
		After adding at least one child to GraphNode new sections will be automatically created in the Inspector called 'Slot'. When 'Slot' is expanded you will see list with index number for each slot. You can click on each of them to expand further.
		In the Inspector you can enable (show) or disable (hide) slots. By default, all slots are disabled so you may not see any slots on your GraphNode initially. You can assign a type to each slot. Only slots of the same type will be able to connect to each other. You can also assign colors to slots. A tuple of input and output slots is defined for each GUI element included in the GraphNode. Input connections are on the left and output connections are on the right side of GraphNode. Only enabled slots are counted as connections.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="clear_all_slots">
			<return type="void" />
			<description>
				Disables all input and output slots of the GraphNode.
			</description>
		</method>
		<method name="clear_slot">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<description>
				Disables input and output slot whose index is [code]idx[/code].
			</description>
		</method>
		<method name="get_connection_input_color">
			<return type="Color" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the [Color] of the input connection [code]idx[/code].
			</description>
		</method>
		<method name="get_connection_input_count">
			<return type="int" />
			<description>
				Returns the number of enabled input slots (connections) to the GraphNode.
			</description>
		</method>
		<method name="get_connection_input_position">
			<return type="Vector2" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the position of the input connection [code]idx[/code].
			</description>
		</method>
		<method name="get_connection_input_type">
			<return type="int" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the type of the input connection [code]idx[/code].
			</description>
		</method>
		<method name="get_connection_output_color">
			<return type="Color" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the [Color] of the output connection [code]idx[/code].
			</description>
		</method>
		<method name="get_connection_output_count">
			<return type="int" />
			<description>
				Returns the number of enabled output slots (connections) of the GraphNode.
			</description>
		</method>
		<method name="get_connection_output_position">
			<return type="Vector2" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the position of the output connection [code]idx[/code].
			</description>
		</method>
		<method name="get_connection_output_type">
			<return type="int" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the type of the output connection [code]idx[/code].
			</description>
		</method>
		<method name="get_slot_color_left" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the left (input) [Color] of the slot [code]idx[/code].
			</description>
		</method>
		<method name="get_slot_color_right" qualifiers="const">
			<return type="Color" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the right (output) [Color] of the slot [code]idx[/code].
			</description>
		</method>
		<method name="get_slot_type_left" qualifiers="const">
			<return type="int" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the left (input) type of the slot [code]idx[/code].
			</description>
		</method>
		<method name="get_slot_type_right" qualifiers="const">
			<return type="int" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the right (output) type of the slot [code]idx[/code].
			</description>
		</method>
		<method name="is_slot_enabled_left" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns [code]true[/code] if left (input) side of the slot [code]idx[/code] is enabled.
			</description>
		</method>
		<method name="is_slot_enabled_right" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns [code]true[/code] if right (output) side of the slot [code]idx[/code] is enabled.
			</description>
		</method>
		<method name="set_slot">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="enable_left" type="bool" />
			<argument index="2" name="type_left" type="int" />
			<argument index="3" name="color_left" type="Color" />
			<argument index="4" name="enable_right" type="bool" />
			<argument index="5" name="type_right" type="int" />
			<argument index="6" name="color_right" type="Color" />
			<argument index="7" name="custom_left" type="Texture" default="null" />
			<argument index="8" name="custom_right" type="Texture" default="null" />
			<description>
				Sets properties of the slot with ID [code]idx[/code].
				If [code]enable_left[/code]/[code]right[/code], a port will appear and the slot will be able to be connected from this side.
				[code]type_left[/code]/[code]right[/code] is an arbitrary type of the port. Only ports with the same type values can be connected.
				[code]color_left[/code]/[code]right[/code] is the tint of the port's icon on this side.
				[code]custom_left[/code]/[code]right[/code] is a custom texture for this side's port.
				[b]Note:[/b] This method only sets properties of the slot. To create the slot, add a [Control]-derived child to the GraphNode.
				Individual properties can be set using one of the [code]set_slot_*[/code] methods. You must enable at least one side of the slot to do so.
			</description>
		</method>
		<method name="set_slot_color_left">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="color_left" type="Color" />
			<description>
				Sets the [Color] of the left (input) side of the slot [code]idx[/code] to [code]color_left[/code].
			</description>
		</method>
		<method name="set_slot_color_right">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="color_right" type="Color" />
			<description>
				Sets the [Color] of the right (output) side of the slot [code]idx[/code] to [code]color_right[/code].
			</description>
		</method>
		<method name="set_slot_enabled_left">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="enable_left" type="bool" />
			<description>
				Toggles the left (input) side of the slot [code]idx[/code]. If [code]enable_left[/code] is [code]true[/code], a port will appear on the left side and the slot will be able to be connected from this side.
			</description>
		</method>
		<method name="set_slot_enabled_right">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="enable_right" type="bool" />
			<description>
				Toggles the right (output) side of the slot [code]idx[/code]. If [code]enable_right[/code] is [code]true[/code], a port will appear on the right side and the slot will be able to be connected from this side.
			</description>
		</method>
		<method name="set_slot_type_left">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="type_left" type="int" />
			<description>
				Sets the left (input) type of the slot [code]idx[/code] to [code]type_left[/code].
			</description>
		</method>
		<method name="set_slot_type_right">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="type_right" type="int" />
			<description>
				Sets the right (output) type of the slot [code]idx[/code] to [code]type_right[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="comment" type="bool" setter="set_comment" getter="is_comment" default="false">
			If [code]true[/code], the GraphNode is a comment node.
		</member>
		<member name="offset" type="Vector2" setter="set_offset" getter="get_offset" default="Vector2( 0, 0 )">
			The offset of the GraphNode, relative to the scroll offset of the [GraphEdit].
			[b]Note:[/b] You cannot use position directly, as [GraphEdit] is a [Container].
		</member>
		<member name="overlay" type="int" setter="set_overlay" getter="get_overlay" enum="GraphNode.Overlay" default="0">
			Sets the overlay shown above the GraphNode. See [enum Overlay].
		</member>
		<member name="resizable" type="bool" setter="set_resizable" getter="is_resizable" default="false">
			If [code]true[/code], the user can resize the GraphNode.
			[b]Note:[/b] Dragging the handle will only emit the [signal resize_request] signal, the GraphNode needs to be resized manually.
		</member>
		<member name="selected" type="bool" setter="set_selected" getter="is_selected" default="false">
			If [code]true[/code], the GraphNode is selected.
		</member>
		<member name="show_close" type="bool" setter="set_show_close_button" getter="is_close_button_visible" default="false">
			If [code]true[/code], the close button will be visible.
			[b]Note:[/b] Pressing it will only emit the [signal close_request] signal, the GraphNode needs to be removed manually.
		</member>
		<member name="title" type="String" setter="set_title" getter="get_title" default="&quot;&quot;">
			The text displayed in the GraphNode's title bar.
		</member>
	</members>
	<signals>
		<signal name="close_request">
			<description>
				Emitted when the GraphNode is requested to be closed. Happens on clicking the close button (see [member show_close]).
			</description>
		</signal>
		<signal name="dragged">
			<argument index="0" name="from" type="Vector2" />
			<argument index="1" name="to" type="Vector2" />
			<description>
				Emitted when the GraphNode is dragged.
			</description>
		</signal>
		<signal name="offset_changed">
			<description>
				Emitted when the GraphNode is moved.
			</description>
		</signal>
		<signal name="raise_request">
			<description>
				Emitted when the GraphNode is requested to be displayed over other ones. Happens on focusing (clicking into) the GraphNode.
			</description>
		</signal>
		<signal name="resize_request">
			<argument index="0" name="new_minsize" type="Vector2" />
			<description>
				Emitted when the GraphNode is requested to be resized. Happens on dragging the resizer handle (see [member resizable]).
			</description>
		</signal>
		<signal name="selected">
			<description>
				Emitted when the GraphNode is selected.
			</description>
		</signal>
		<signal name="slot_updated">
			<argument index="0" name="idx" type="int" />
			<description>
				Emitted when any GraphNode's slot is updated.
			</description>
		</signal>
		<signal name="unselected">
			<description>
				Emitted when the GraphNode is unselected.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="OVERLAY_DISABLED" value="0" enum="Overlay">
			No overlay is shown.
		</constant>
		<constant name="OVERLAY_BREAKPOINT" value="1" enum="Overlay">
			Show overlay set in the [code]breakpoint[/code] theme property.
		</constant>
		<constant name="OVERLAY_POSITION" value="2" enum="Overlay">
			Show overlay set in the [code]position[/code] theme property.
		</constant>
	</constants>
	<theme_items>
		<theme_item name="close_color" data_type="color" type="Color" default="Color( 0, 0, 0, 1 )">
			The color modulation applied to the close button icon.
		</theme_item>
		<theme_item name="resizer_color" data_type="color" type="Color" default="Color( 0, 0, 0, 1 )">
			The color modulation applied to the resizer icon.
		</theme_item>
		<theme_item name="title_color" data_type="color" type="Color" default="Color( 0, 0, 0, 1 )">
			Color of the title text.
		</theme_item>
		<theme_item name="close_offset" data_type="constant" type="int" default="18">
			The vertical offset of the close button.
		</theme_item>
		<theme_item name="port_offset" data_type="constant" type="int" default="3">
			Horizontal offset for the ports.
		</theme_item>
		<theme_item name="separation" data_type="constant" type="int" default="1">
			The vertical distance between ports.
		</theme_item>
		<theme_item name="title_offset" data_type="constant" type="int" default="20">
			Vertical offset of the title text.
		</theme_item>
		<theme_item name="title_font" data_type="font" type="Font">
			Font used for the title text.
		</theme_item>
		<theme_item name="close" data_type="icon" type="Texture">
			The icon for the close button, visible when [member show_close] is enabled.
		</theme_item>
		<theme_item name="port" data_type="icon" type="Texture">
			The icon used for representing ports.
		</theme_item>
		<theme_item name="resizer" data_type="icon" type="Texture">
			The icon used for resizer, visible when [member resizable] is enabled.
		</theme_item>
		<theme_item name="breakpoint" data_type="style" type="StyleBox">
			The background used when [member overlay] is set to [constant OVERLAY_BREAKPOINT].
		</theme_item>
		<theme_item name="comment" data_type="style" type="StyleBox">
			The [StyleBox] used when [member comment] is enabled.
		</theme_item>
		<theme_item name="commentfocus" data_type="style" type="StyleBox">
			The [StyleBox] used when [member comment] is enabled and the [GraphNode] is focused.
		</theme_item>
		<theme_item name="defaultfocus" data_type="style" type="StyleBox">
		</theme_item>
		<theme_item name="defaultframe" data_type="style" type="StyleBox">
		</theme_item>
		<theme_item name="frame" data_type="style" type="StyleBox">
			The default background for [GraphNode].
		</theme_item>
		<theme_item name="position" data_type="style" type="StyleBox">
			The background used when [member overlay] is set to [constant OVERLAY_POSITION].
		</theme_item>
		<theme_item name="selectedframe" data_type="style" type="StyleBox">
			The background used when the [GraphNode] is selected.
		</theme_item>
	</theme_items>
</class>
