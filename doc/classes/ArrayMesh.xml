<?xml version="1.0" encoding="UTF-8" ?>
<class name="ArrayMesh" inherits="Mesh">
	<brief_description>
		[Mesh] type that provides utility for constructing a surface from arrays.
	</brief_description>
	<description>
		The [ArrayMesh] is used to construct a [Mesh] by specifying the attributes as arrays.
		The most basic example is the creation of a single triangle:
		[codeblock]
		var vertices = PoolVector3Array()
		vertices.push_back(Vector3(0, 1, 0))
		vertices.push_back(Vector3(1, 0, 0))
		vertices.push_back(Vector3(0, 0, 1))
		# Initialize the ArrayMesh.
		var arr_mesh = ArrayMesh.new()
		var arrays = []
		arrays.resize(ArrayMesh.ARRAY_MAX)
		arrays[ArrayMesh.ARRAY_VERTEX] = vertices
		# Create the Mesh.
		arr_mesh.add_surface_from_arrays(Mesh.PRIMITIVE_TRIANGLES, arrays)
		var m = MeshInstance.new()
		m.mesh = arr_mesh
		[/codeblock]
		The [MeshInstance] is ready to be added to the [SceneTree] to be shown.
		See also [ImmediateGeometry], [MeshDataTool] and [SurfaceTool] for procedural geometry generation.
		[b]Note:[/b] Godot uses clockwise [url=https://learnopengl.com/Advanced-OpenGL/Face-culling]winding order[/url] for front faces of triangle primitive modes.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/3d/procedural_geometry/arraymesh.md</link>
	</tutorials>
	<methods>
		<method name="add_blend_shape">
			<return type="void" />
			<argument index="0" name="name" type="StringName" />
			<description>
				Adds name for a blend shape that will be added with [method add_surface_from_arrays]. Must be called before surface is added.
			</description>
		</method>
		<method name="add_surface_from_arrays">
			<return type="void" />
			<argument index="0" name="primitive" type="int" enum="Mesh.PrimitiveType" />
			<argument index="1" name="arrays" type="Array" />
			<argument index="2" name="blend_shapes" type="Array" default="[  ]" />
			<argument index="3" name="compress_flags" type="int" default="2194432" />
			<description>
				Creates a new surface.
				Surfaces are created to be rendered using a [code]primitive[/code], which may be any of the types defined in [enum Mesh.PrimitiveType]. (As a note, when using indices, it is recommended to only use points, lines, or triangles.) [method Mesh.get_surface_count] will become the [code]surf_idx[/code] for this new surface.
				The [code]arrays[/code] argument is an array of arrays. See [enum ArrayType] for the values used in this array. For example, [code]arrays[0][/code] is the array of vertices. That first vertex sub-array is always required; the others are optional. Adding an index array puts this function into "index mode" where the vertex and other arrays become the sources of data and the index array defines the vertex order. All sub-arrays must have the same length as the vertex array or be empty, except for [constant ARRAY_INDEX] if it is used.
				[code]compress_flags[/code] is a bitfield made of [enum Mesh.ArrayFormat] values. It defaults to [constant Mesh.ARRAY_COMPRESS_DEFAULT].
				[b]Note:[/b] The default [code]compress_flags[/code] enable [constant Mesh.ARRAY_COMPRESS_COLOR], which makes vertex colors stored as 8-bit unsigned integers. This will clamp overbright vertex colors to [code]Color(1, 1, 1, 1)[/code] and reduce their precision. To store HDR vertex colors, remove the vertex color compression flag by passing [code]Mesh.ARRAY_COMPRESS_DEFAULT ^ Mesh.ARRAY_COMPRESS_COLOR[/code] as the value of [code]compress_flags[/code].
			</description>
		</method>
		<method name="clear_blend_shapes">
			<return type="void" />
			<description>
				Removes all blend shapes from this [ArrayMesh].
			</description>
		</method>
		<method name="clear_surfaces">
			<return type="void" />
			<description>
				Removes all surfaces from this [ArrayMesh].
			</description>
		</method>
		<method name="get_blend_shape_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of blend shapes that the [ArrayMesh] holds.
			</description>
		</method>
		<method name="get_blend_shape_name" qualifiers="const">
			<return type="StringName" />
			<argument index="0" name="index" type="int" />
			<description>
				Returns the name of the blend shape at this index.
			</description>
		</method>
		<method name="lightmap_unwrap">
			<return type="int" enum="Error" />
			<argument index="0" name="transform" type="Transform" />
			<argument index="1" name="texel_size" type="float" />
			<description>
			</description>
		</method>
		<method name="regen_normalmaps">
			<return type="void" />
			<description>
				Will regenerate normal maps for the [ArrayMesh].
			</description>
		</method>
		<method name="set_blend_shape_name">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<argument index="1" name="name" type="StringName" />
			<description>
				Sets the name of the specified blend shape.
			</description>
		</method>
		<method name="surface_find_by_name" qualifiers="const">
			<return type="int" />
			<argument index="0" name="name" type="String" />
			<description>
				Returns the index of the first surface with this name held within this [ArrayMesh]. If none are found, -1 is returned.
			</description>
		</method>
		<method name="surface_get_array_index_len" qualifiers="const">
			<return type="int" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Returns the length in indices of the index array in the requested surface (see [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_get_array_len" qualifiers="const">
			<return type="int" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Returns the length in vertices of the vertex array in the requested surface (see [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_get_format" qualifiers="const">
			<return type="int" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Returns the format mask of the requested surface (see [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_get_name" qualifiers="const">
			<return type="String" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Gets the name assigned to this surface.
			</description>
		</method>
		<method name="surface_get_primitive_type" qualifiers="const">
			<return type="int" enum="Mesh.PrimitiveType" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Returns the primitive type of the requested surface (see [method add_surface_from_arrays]).
			</description>
		</method>
		<method name="surface_remove">
			<return type="void" />
			<argument index="0" name="surf_idx" type="int" />
			<description>
				Removes a surface at position [code]surf_idx[/code], shifting greater surfaces one [code]surf_idx[/code] slot down.
			</description>
		</method>
		<method name="surface_set_name">
			<return type="void" />
			<argument index="0" name="surf_idx" type="int" />
			<argument index="1" name="name" type="String" />
			<description>
				Sets a name for a given surface.
			</description>
		</method>
		<method name="surface_update_region">
			<return type="void" />
			<argument index="0" name="surf_idx" type="int" />
			<argument index="1" name="offset" type="int" />
			<argument index="2" name="data" type="PoolByteArray" />
			<description>
				Updates a specified region of mesh arrays on the GPU.
				[b]Warning:[/b] Only use if you know what you are doing. You can easily cause crashes by calling this function with improper arguments.
			</description>
		</method>
	</methods>
	<members>
		<member name="blend_shape_mode" type="int" setter="set_blend_shape_mode" getter="get_blend_shape_mode" enum="Mesh.BlendShapeMode" default="1">
			Sets the blend shape mode to one of [enum Mesh.BlendShapeMode].
		</member>
		<member name="custom_aabb" type="AABB" setter="set_custom_aabb" getter="get_custom_aabb" default="AABB( 0, 0, 0, 0, 0, 0 )">
			Overrides the [AABB] with one defined by user for use with frustum culling. Especially useful to avoid unexpected culling when using a shader to offset vertices.
		</member>
	</members>
	<constants>
		<constant name="NO_INDEX_ARRAY" value="-1">
			Default value used for index_array_len when no indices are present.
		</constant>
		<constant name="ARRAY_WEIGHTS_SIZE" value="4">
			Amount of weights/bone indices per vertex (always 4).
		</constant>
		<constant name="ARRAY_VERTEX" value="0" enum="ArrayType">
			[PoolVector3Array], [PoolVector2Array], or [Array] of vertex positions.
		</constant>
		<constant name="ARRAY_NORMAL" value="1" enum="ArrayType">
			[PoolVector3Array] of vertex normals.
		</constant>
		<constant name="ARRAY_TANGENT" value="2" enum="ArrayType">
			[PoolRealArray] of vertex tangents. Each element in groups of 4 floats, first 3 floats determine the tangent, and the last the binormal direction as -1 or 1.
		</constant>
		<constant name="ARRAY_COLOR" value="3" enum="ArrayType">
			[PoolColorArray] of vertex colors.
		</constant>
		<constant name="ARRAY_TEX_UV" value="4" enum="ArrayType">
			[PoolVector2Array] for UV coordinates.
		</constant>
		<constant name="ARRAY_TEX_UV2" value="5" enum="ArrayType">
			[PoolVector2Array] for second UV coordinates.
		</constant>
		<constant name="ARRAY_BONES" value="6" enum="ArrayType">
			[PoolRealArray] or [PoolIntArray] of bone indices. Each element in groups of 4 floats.
		</constant>
		<constant name="ARRAY_WEIGHTS" value="7" enum="ArrayType">
			[PoolRealArray] of bone weights. Each element in groups of 4 floats.
		</constant>
		<constant name="ARRAY_INDEX" value="8" enum="ArrayType">
			[PoolIntArray] of integers used as indices referencing vertices, colors, normals, tangents, and textures. All of those arrays must have the same number of elements as the vertex array. No index can be beyond the vertex array size. When this index array is present, it puts the function into "index mode," where the index selects the *i*'th vertex, normal, tangent, color, UV, etc. This means if you want to have different normals or colors along an edge, you have to duplicate the vertices.
			For triangles, the index array is interpreted as triples, referring to the vertices of each triangle. For lines, the index array is in pairs indicating the start and end of each line.
		</constant>
		<constant name="ARRAY_MAX" value="9" enum="ArrayType">
			Represents the size of the [enum ArrayType] enum.
		</constant>
		<constant name="ARRAY_FORMAT_VERTEX" value="1" enum="ArrayFormat">
			Array format will include vertices (mandatory).
		</constant>
		<constant name="ARRAY_FORMAT_NORMAL" value="2" enum="ArrayFormat">
			Array format will include normals.
		</constant>
		<constant name="ARRAY_FORMAT_TANGENT" value="4" enum="ArrayFormat">
			Array format will include tangents.
		</constant>
		<constant name="ARRAY_FORMAT_COLOR" value="8" enum="ArrayFormat">
			Array format will include a color array.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV" value="16" enum="ArrayFormat">
			Array format will include UVs.
		</constant>
		<constant name="ARRAY_FORMAT_TEX_UV2" value="32" enum="ArrayFormat">
			Array format will include another set of UVs.
		</constant>
		<constant name="ARRAY_FORMAT_BONES" value="64" enum="ArrayFormat">
			Array format will include bone indices.
		</constant>
		<constant name="ARRAY_FORMAT_WEIGHTS" value="128" enum="ArrayFormat">
			Array format will include bone weights.
		</constant>
		<constant name="ARRAY_FORMAT_INDEX" value="256" enum="ArrayFormat">
			Index array will be used.
		</constant>
	</constants>
</class>
