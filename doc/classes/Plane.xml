<?xml version="1.0" encoding="UTF-8" ?>
<class name="Plane">
	<brief_description>
		Plane in hessian form.
	</brief_description>
	<description>
		Plane represents a normalized plane equation. Basically, "normal" is the normal of the plane (a,b,c normalized), and "d" is the distance from the origin to the plane (in the direction of "normal"). "Over" or "Above" the plane is considered the side of the plane towards where the normal is pointing.
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/math/index.md</link>
	</tutorials>
	<methods>
		<method name="Plane">
			<return type="Plane" />
			<argument index="0" name="normal" type="Vector3" />
			<argument index="1" name="d" type="float" />
			<description>
				Creates a plane from the normal and the plane's distance to the origin.
			</description>
		</method>
		<method name="Plane">
			<return type="Plane" />
			<argument index="0" name="v1" type="Vector3" />
			<argument index="1" name="v2" type="Vector3" />
			<argument index="2" name="v3" type="Vector3" />
			<description>
				Creates a plane from the three points, given in clockwise order.
			</description>
		</method>
		<method name="Plane">
			<return type="Plane" />
			<argument index="0" name="a" type="float" />
			<argument index="1" name="b" type="float" />
			<argument index="2" name="c" type="float" />
			<argument index="3" name="d" type="float" />
			<description>
				Creates a plane from the four parameters. The three components of the resulting plane's [member normal] are [code]a[/code], [code]b[/code] and [code]c[/code], and the plane has a distance of [code]d[/code] from the origin.
			</description>
		</method>
		<method name="center">
			<return type="Vector3" />
			<description>
				Returns the center of the plane.
			</description>
		</method>
		<method name="distance_to">
			<return type="float" />
			<argument index="0" name="point" type="Vector3" />
			<description>
				Returns the shortest distance from the plane to the position [code]point[/code].
			</description>
		</method>
		<method name="get_any_perpendicular_normal">
			<return type="Vector3" />
			<description>
			</description>
		</method>
		<method name="get_any_point">
			<return type="Vector3" />
			<description>
				Returns the center of the plane.
				This method is deprecated, please use [method center] instead.
			</description>
		</method>
		<method name="get_normal">
			<return type="Vector3" />
			<description>
			</description>
		</method>
		<method name="has_point">
			<return type="bool" />
			<argument index="0" name="point" type="Vector3" />
			<argument index="1" name="epsilon" type="float" default="1e-05" />
			<description>
				Returns [code]true[/code] if [code]point[/code] is inside the plane. Comparison uses a custom minimum [code]epsilon[/code] threshold.
			</description>
		</method>
		<method name="intersect_3">
			<return type="Vector3" />
			<argument index="0" name="b" type="Plane" />
			<argument index="1" name="c" type="Plane" />
			<description>
				Returns the intersection point of the three planes [code]b[/code], [code]c[/code] and this plane. If no intersection is found, [code]null[/code] is returned.
			</description>
		</method>
		<method name="intersects_ray">
			<return type="Vector3" />
			<argument index="0" name="from" type="Vector3" />
			<argument index="1" name="dir" type="Vector3" />
			<description>
				Returns the intersection point of a ray consisting of the position [code]from[/code] and the direction normal [code]dir[/code] with this plane. If no intersection is found, [code]null[/code] is returned.
			</description>
		</method>
		<method name="intersects_segment">
			<return type="Vector3" />
			<argument index="0" name="begin" type="Vector3" />
			<argument index="1" name="end" type="Vector3" />
			<description>
				Returns the intersection point of a segment from position [code]begin[/code] to position [code]end[/code] with this plane. If no intersection is found, [code]null[/code] is returned.
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool" />
			<argument index="0" name="plane" type="Plane" />
			<description>
				Returns [code]true[/code] if this plane and [code]plane[/code] are approximately equal, by running [method @GDScript.is_equal_approx] on each component.
			</description>
		</method>
		<method name="is_equal_approx_any_side">
			<return type="bool" />
			<argument index="0" name="plane" type="Plane" />
			<description>
			</description>
		</method>
		<method name="is_point_over">
			<return type="bool" />
			<argument index="0" name="point" type="Vector3" />
			<description>
				Returns [code]true[/code] if [code]point[/code] is located above the plane.
			</description>
		</method>
		<method name="normalize">
			<description>
			</description>
		</method>
		<method name="normalized">
			<return type="Plane" />
			<description>
				Returns a copy of the plane, normalized.
			</description>
		</method>
		<method name="project">
			<return type="Vector3" />
			<argument index="0" name="point" type="Vector3" />
			<description>
				Returns the orthogonal projection of [code]point[/code] into a point in the plane.
			</description>
		</method>
		<method name="set_normal">
			<argument index="0" name="normal" type="Vector3" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="d" type="float" setter="" getter="" default="0.0">
			The distance from the origin to the plane, in the direction of [member normal]. This value is typically non-negative.
			In the scalar equation of the plane [code]ax + by + cz = d[/code], this is [code]d[/code], while the [code](a, b, c)[/code] coordinates are represented by the [member normal] property.
		</member>
		<member name="normal" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 0 )">
			The normal of the plane, which must be normalized.
			In the scalar equation of the plane [code]ax + by + cz = d[/code], this is the vector [code](a, b, c)[/code], where [code]d[/code] is the [member d] property.
		</member>
		<member name="x" type="float" setter="" getter="" default="0.0">
			The X component of the plane's [member normal] vector.
		</member>
		<member name="y" type="float" setter="" getter="" default="0.0">
			The Y component of the plane's [member normal] vector.
		</member>
		<member name="z" type="float" setter="" getter="" default="0.0">
			The Z component of the plane's [member normal] vector.
		</member>
	</members>
	<constants>
		<constant name="PLANE_YZ" value="Plane( 1, 0, 0, 0 )">
			A plane that extends in the Y and Z axes (normal vector points +X).
		</constant>
		<constant name="PLANE_XZ" value="Plane( 0, 1, 0, 0 )">
			A plane that extends in the X and Z axes (normal vector points +Y).
		</constant>
		<constant name="PLANE_XY" value="Plane( 0, 0, 1, 0 )">
			A plane that extends in the X and Y axes (normal vector points +Z).
		</constant>
	</constants>
</class>
