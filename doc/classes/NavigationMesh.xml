<?xml version="1.0" encoding="UTF-8" ?>
<class name="NavigationMesh" inherits="Resource">
	<brief_description>
		A mesh that defines the areas traversable by navigation agents that are safe from obstructions.
	</brief_description>
	<description>
		A NavigationMesh is used in pathfinding to describe the traversable area that is safe from collision and other obstructions, assuming an agent's center position at zero radius. The mesh data can be created and baked to polygons with the [NavigationMeshGenerator] by parsing source geometry from the [SceneTree]. The mesh data can also be created without baking by adding the required arrays of vertices and polygon indices with a script.
		When making procedual changes, a call to [method commit_changes] is required to apply these changes and to synchronize them with the [NavigationServer].
	</description>
	<tutorials>
		<link title="3D Navmesh Demo">https://github.com/Relintai/pandemonium_demo_projects/tree/master/3d/navmesh</link>
		<link title="Using NavigationMeshes">$DOCS_URL/tutorials/navigation/navigation_using_navigationmeshes.md</link>
	</tutorials>
	<methods>
		<method name="add_polygon">
			<return type="void" />
			<argument index="0" name="polygon" type="PoolIntArray" />
			<description>
				Adds a polygon using the indices of the vertices you get when calling [method get_vertices].
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Clears both the internal polygons and vertices arrays.
			</description>
		</method>
		<method name="clear_polygons">
			<return type="void" />
			<description>
				Clears the array of polygons, but it doesn't clear the array of vertices.
			</description>
		</method>
		<method name="commit_changes">
			<return type="void" />
			<description>
				Applies all changes to vertices and polygons and synchronizes with the NavigationServer.
			</description>
		</method>
		<method name="create_from_mesh">
			<return type="void" />
			<argument index="0" name="mesh" type="Mesh" />
			<description>
				Initializes the navigation mesh by setting the vertices and indices according to a [Mesh].
			</description>
		</method>
		<method name="get_collision_mask_bit" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="bit" type="int" />
			<description>
				Returns whether the specified [code]bit[/code] of the [member geometry_collision_mask] is set.
			</description>
		</method>
		<method name="get_polygon">
			<return type="PoolIntArray" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns a [PoolIntArray] containing the indices of the vertices of a created polygon.
			</description>
		</method>
		<method name="get_polygon_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of polygons in the navigation mesh.
			</description>
		</method>
		<method name="get_vertices" qualifiers="const">
			<return type="PoolVector3Array" />
			<description>
				Returns a [PoolVector3Array] containing all the vertices being used to create the polygons.
			</description>
		</method>
		<method name="set_collision_mask_bit">
			<return type="void" />
			<argument index="0" name="bit" type="int" />
			<argument index="1" name="value" type="bool" />
			<description>
				If [code]value[/code] is [code]true[/code], sets the specified [code]bit[/code] in the [member geometry_collision_mask].
				If [code]value[/code] is [code]false[/code], clears the specified [code]bit[/code] in the [member geometry_collision_mask].
			</description>
		</method>
		<method name="set_vertices">
			<return type="void" />
			<argument index="0" name="vertices" type="PoolVector3Array" />
			<description>
				Sets the vertices that need to be indexed with the [method add_polygon] or [method set_polygons] methods. When finished changing the navigation mesh call [method commit_changes] in order to synchronize the changes with the [NavigationServer].
			</description>
		</method>
	</methods>
	<members>
		<member name="agent_height" type="float" setter="set_agent_height" getter="get_agent_height" default="1.5">
			The minimum floor to ceiling height that will still allow the floor area to be considered walkable.
			[b]Note:[/b] While baking, this value will be rounded up to the nearest multiple of [member cell_height].
		</member>
		<member name="agent_max_climb" type="float" setter="set_agent_max_climb" getter="get_agent_max_climb" default="0.25">
			The minimum ledge height that is considered to still be traversable.
			[b]Note:[/b] While baking, this value will be rounded down to the nearest multiple of [member cell_height].
		</member>
		<member name="agent_max_slope" type="float" setter="set_agent_max_slope" getter="get_agent_max_slope" default="45.0">
			The maximum slope that is considered walkable, in degrees.
		</member>
		<member name="agent_radius" type="float" setter="set_agent_radius" getter="get_agent_radius" default="0.5">
			The distance to erode/shrink the walkable area of the heightfield away from obstructions.
			[b]Note:[/b] While baking, this value will be rounded up to the nearest multiple of [member cell_size].
		</member>
		<member name="cell_height" type="float" setter="set_cell_height" getter="get_cell_height" default="0.25">
			The cell height used to rasterize the navigation mesh vertices on the Y axis. Must match with the cell height on the navigation map.
		</member>
		<member name="cell_size" type="float" setter="set_cell_size" getter="get_cell_size" default="0.25">
			The cell size used to rasterize the navigation mesh vertices on the XZ plane. Must match with the cell size on the navigation map.
		</member>
		<member name="detail_sample_distance" type="float" setter="set_detail_sample_distance" getter="get_detail_sample_distance" default="6.0">
			The sampling distance to use when generating the detail mesh, in cell unit.
		</member>
		<member name="detail_sample_max_error" type="float" setter="set_detail_sample_max_error" getter="get_detail_sample_max_error" default="5.0">
			The maximum distance the detail mesh surface should deviate from heightfield, in cell unit.
		</member>
		<member name="edge_max_error" type="float" setter="set_edge_max_error" getter="get_edge_max_error" default="1.3">
			The maximum distance a simplfied contour's border edges should deviate the original raw contour.
		</member>
		<member name="edge_max_length" type="float" setter="set_edge_max_length" getter="get_edge_max_length" default="0.0">
			The maximum allowed length for contour edges along the border of the mesh.  A value of [code]0.0[/code] disables this feature.
			[b]Note:[/b] While baking, this value will be rounded up to the nearest multiple of [member cell_size].
		</member>
		<member name="filter_baking_aabb" type="AABB" setter="set_filter_baking_aabb" getter="get_filter_baking_aabb" default="AABB( 0, 0, 0, 0, 0, 0 )">
			If the baking [AABB] has a volume the navigation mesh baking will be restricted to its enclosing area.
		</member>
		<member name="filter_baking_aabb_offset" type="Vector3" setter="set_filter_baking_aabb_offset" getter="get_filter_baking_aabb_offset" default="Vector3( 0, 0, 0 )">
			The position offset applied to the [member filter_baking_aabb] [AABB].
		</member>
		<member name="filter_ledge_spans" type="bool" setter="set_filter_ledge_spans" getter="get_filter_ledge_spans" default="false">
		</member>
		<member name="filter_low_hanging_obstacles" type="bool" setter="set_filter_low_hanging_obstacles" getter="get_filter_low_hanging_obstacles" default="false">
		</member>
		<member name="filter_walkable_low_height_spans" type="bool" setter="set_filter_walkable_low_height_spans" getter="get_filter_walkable_low_height_spans" default="false">
		</member>
		<member name="geometry_collision_mask" type="int" setter="set_collision_mask" getter="get_collision_mask" default="4294967295">
			The physics layers to scan for static colliders.
			Only used when [member geometry_parsed_geometry_type] is [constant PARSED_GEOMETRY_STATIC_COLLIDERS] or [constant PARSED_GEOMETRY_BOTH].
		</member>
		<member name="geometry_parsed_geometry_type" type="int" setter="set_parsed_geometry_type" getter="get_parsed_geometry_type" enum="NavigationMesh.ParsedGeometryType" default="0">
			Determines which type of nodes will be parsed as geometry. See [enum ParsedGeometryType] for possible values.
		</member>
		<member name="geometry_source_geometry_mode" type="int" setter="set_source_geometry_mode" getter="get_source_geometry_mode" enum="NavigationMesh.SourceGeometryMode" default="0">
			The source of the geometry used when baking. See [enum SourceGeometryMode] for possible values.
		</member>
		<member name="geometry_source_group_name" type="StringName" setter="set_source_group_name" getter="get_source_group_name" default="@&quot;navigation_mesh&quot;">
			The name of the group to scan for geometry.
			Only used when [member geometry_source_geometry_mode] is [constant SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN] or [constant SOURCE_GEOMETRY_GROUPS_EXPLICIT].
		</member>
		<member name="region_merge_size" type="float" setter="set_region_merge_size" getter="get_region_merge_size" default="20.0">
			Any regions with a size smaller than this will be merged with larger regions if possible.
			[b]Note:[/b] This value will be squared to calculate the number of cells. For example, a value of 20 will set the number of cells to 400.
		</member>
		<member name="region_min_size" type="float" setter="set_region_min_size" getter="get_region_min_size" default="2.0">
			The minimum size of a region for it to be created.
			[b]Note:[/b] This value will be squared to calculate the minimum number of cells allowed to form isolated island areas. For example, a value of 8 will set the number of cells to 64.
		</member>
		<member name="sample_partition_type" type="int" setter="set_sample_partition_type" getter="get_sample_partition_type" enum="NavigationMesh.SamplePartitionType" default="0">
		</member>
		<member name="vertices_per_polygon" type="float" setter="set_vertices_per_polygon" getter="get_vertices_per_polygon" default="6.0">
			The maximum number of vertices allowed for polygons generated during the contour to polygon conversion process.
		</member>
	</members>
	<constants>
		<constant name="SAMPLE_PARTITION_WATERSHED" value="0" enum="SamplePartitionType">
			Watershed partitioning. Generally the best choice if you precompute the navigation mesh, use this if you have large open areas.
		</constant>
		<constant name="SAMPLE_PARTITION_MONOTONE" value="1" enum="SamplePartitionType">
			Monotone partitioning. Use this if you want fast navigation mesh generation.
		</constant>
		<constant name="SAMPLE_PARTITION_LAYERS" value="2" enum="SamplePartitionType">
			Layer partitioning. Good choice to use for tiled navigation mesh with medium and small sized tiles.
		</constant>
		<constant name="SAMPLE_PARTITION_MAX" value="3" enum="SamplePartitionType">
			Represents the size of the [enum SamplePartitionType] enum.
		</constant>
		<constant name="PARSED_GEOMETRY_MESH_INSTANCES" value="0" enum="ParsedGeometryType">
			Parses mesh instances as geometry. This includes [MeshInstance], [CSGShape], and [GridMap] nodes.
		</constant>
		<constant name="PARSED_GEOMETRY_STATIC_COLLIDERS" value="1" enum="ParsedGeometryType">
			Parses [StaticBody] colliders as geometry. The collider should be in any of the layers specified by [member geometry_collision_mask].
		</constant>
		<constant name="PARSED_GEOMETRY_BOTH" value="2" enum="ParsedGeometryType">
			Both [constant PARSED_GEOMETRY_MESH_INSTANCES] and [constant PARSED_GEOMETRY_STATIC_COLLIDERS].
		</constant>
		<constant name="PARSED_GEOMETRY_MAX" value="3" enum="ParsedGeometryType">
			Represents the size of the [enum ParsedGeometryType] enum.
		</constant>
		<constant name="SOURCE_GEOMETRY_ROOT_NODE_CHILDREN" value="0" enum="SourceGeometryMode">
			Scans the child nodes of the root node recursively for geometry.
		</constant>
		<constant name="SOURCE_GEOMETRY_GROUPS_WITH_CHILDREN" value="1" enum="SourceGeometryMode">
			Scans nodes in a group and their child nodes recursively for geometry. The group is specified by [member geometry_source_group_name].
		</constant>
		<constant name="SOURCE_GEOMETRY_GROUPS_EXPLICIT" value="2" enum="SourceGeometryMode">
			Uses nodes in a group for geometry. The group is specified by [member geometry_source_group_name].
		</constant>
		<constant name="SOURCE_GEOMETRY_MAX" value="3" enum="SourceGeometryMode">
			Represents the size of the [enum SourceGeometryMode] enum.
		</constant>
	</constants>
</class>
