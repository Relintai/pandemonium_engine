<?xml version="1.0" encoding="UTF-8" ?>
<class name="Camera2D" inherits="Node2D">
	<brief_description>
		Camera node for 2D scenes.
	</brief_description>
	<description>
		Camera node for 2D scenes. It forces the screen (current layer) to scroll following this node. This makes it easier (and faster) to program scrollable scenes than manually changing the position of [CanvasItem]-based nodes.
		This node is intended to be a simple helper to get things going quickly, but more functionality may be desired to change how the camera works. To make your own custom camera node, inherit it from [Node2D] and change the transform of the canvas by setting [member Viewport.canvas_transform] in [Viewport] (you can obtain the current [Viewport] by using [method Node.get_viewport]).
		Note that the [Camera2D] node's [code]position[/code] doesn't represent the actual position of the screen, which may differ due to applied smoothing or limits. You can use [method get_camera_screen_center] to get the real position.
	</description>
	<tutorials>
		<link title="2D Platformer Demo">https://godotengine.org/asset-library/asset/120</link>
		<link title="2D Isometric Demo">https://godotengine.org/asset-library/asset/112</link>
		<link title="2D HDR Demo">https://godotengine.org/asset-library/asset/110</link>
	</tutorials>
	<methods>
		<method name="align">
			<return type="void" />
			<description>
				Aligns the camera to the tracked node.
			</description>
		</method>
		<method name="force_update_scroll">
			<return type="void" />
			<description>
				Forces the camera to update scroll immediately.
			</description>
		</method>
		<method name="get_camera_position" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the camera's [code]position[/code] (the tracked point the camera attempts to follow), relative to the origin.
				[b]Note:[/b] The returned value is not the same as [member Node2D.position] or [member Node2D.global_position], as it is affected by the [code]drag[/code] properties.
			</description>
		</method>
		<method name="get_camera_screen_center" qualifiers="const">
			<return type="Vector2" />
			<description>
				Returns the location of the [Camera2D]'s screen-center, relative to the origin.
				[b]Note:[/b] The real [code]position[/code] of the camera may be different, see [method get_camera_position].
			</description>
		</method>
		<method name="get_drag_margin" qualifiers="const">
			<return type="float" />
			<argument index="0" name="margin" type="int" enum="Margin" />
			<description>
				Returns the specified margin. See also [member drag_margin_bottom], [member drag_margin_top], [member drag_margin_left], and [member drag_margin_right].
			</description>
		</method>
		<method name="get_limit" qualifiers="const">
			<return type="int" />
			<argument index="0" name="margin" type="int" enum="Margin" />
			<description>
				Returns the specified camera limit. See also [member limit_bottom], [member limit_top], [member limit_left], and [member limit_right].
			</description>
		</method>
		<method name="is_current" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if this [Camera2D] is the active camera (see [method Viewport.get_camera_2d]).
			</description>
		</method>
		<method name="make_current">
			<return type="void" />
			<description>
				Forces this [Camera2D] to become the current active one. [member enabled] must be [code]true[/code].
			</description>
		</method>
		<method name="reset_smoothing">
			<return type="void" />
			<description>
				Sets the camera's position immediately to its current smoothing destination.
				This method has no effect if [member smoothing_enabled] is [code]false[/code].
			</description>
		</method>
		<method name="set_drag_margin">
			<return type="void" />
			<argument index="0" name="margin" type="int" enum="Margin" />
			<argument index="1" name="drag_margin" type="float" />
			<description>
				Sets the specified margin. See also [member drag_margin_bottom], [member drag_margin_top], [member drag_margin_left], and [member drag_margin_right].
			</description>
		</method>
		<method name="set_limit">
			<return type="void" />
			<argument index="0" name="margin" type="int" enum="Margin" />
			<argument index="1" name="limit" type="int" />
			<description>
				Sets the specified camera limit. See also [member limit_bottom], [member limit_top], [member limit_left], and [member limit_right].
			</description>
		</method>
	</methods>
	<members>
		<member name="anchor_mode" type="int" setter="set_anchor_mode" getter="get_anchor_mode" enum="Camera2D.AnchorMode" default="1">
			The Camera2D's anchor point. See [enum AnchorMode] constants.
		</member>
		<member name="custom_viewport" type="Node" setter="set_custom_viewport" getter="get_custom_viewport">
			The custom [Viewport] node attached to the [Camera2D]. If [code]null[/code] or not a [Viewport], uses the default viewport instead.
		</member>
		<member name="drag_margin_bottom" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Bottom margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.
		</member>
		<member name="drag_margin_h_enabled" type="bool" setter="set_h_drag_enabled" getter="is_h_drag_enabled" default="false">
			If [code]true[/code], the camera only moves when reaching the horizontal drag margins. If [code]false[/code], the camera moves horizontally regardless of margins.
		</member>
		<member name="drag_margin_left" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Left margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.
		</member>
		<member name="drag_margin_right" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Right margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.
		</member>
		<member name="drag_margin_top" type="float" setter="set_drag_margin" getter="get_drag_margin" default="0.2">
			Top margin needed to drag the camera. A value of [code]1[/code] makes the camera move only when reaching the edge of the screen.
		</member>
		<member name="drag_margin_v_enabled" type="bool" setter="set_v_drag_enabled" getter="is_v_drag_enabled" default="false">
			If [code]true[/code], the camera only moves when reaching the vertical drag margins. If [code]false[/code], the camera moves vertically regardless of margins.
		</member>
		<member name="editor_draw_drag_margin" type="bool" setter="set_margin_drawing_enabled" getter="is_margin_drawing_enabled" default="false">
			If [code]true[/code], draws the camera's drag margin rectangle in the editor.
		</member>
		<member name="editor_draw_limits" type="bool" setter="set_limit_drawing_enabled" getter="is_limit_drawing_enabled" default="false">
			If [code]true[/code], draws the camera's limits rectangle in the editor.
		</member>
		<member name="editor_draw_screen" type="bool" setter="set_screen_drawing_enabled" getter="is_screen_drawing_enabled" default="true">
			If [code]true[/code], draws the camera's screen rectangle in the editor.
		</member>
		<member name="enabled" type="bool" setter="set_enabled" getter="is_enabled" default="true">
			Controls whether the camera can be active or not. If [code]true[/code], the [Camera2D] will become the main camera when it enters the scene tree and there is no active camera currently (see [method Viewport.get_camera_2d]).
			When the camera is currently active and [member enabled] is set to [code]false[/code], the next enabled [Camera2D] in the scene tree will become active.
		</member>
		<member name="limit_bottom" type="int" setter="set_limit" getter="get_limit" default="10000000">
			Bottom scroll limit in pixels. The camera stops moving when reaching this value.
		</member>
		<member name="limit_left" type="int" setter="set_limit" getter="get_limit" default="-10000000">
			Left scroll limit in pixels. The camera stops moving when reaching this value.
		</member>
		<member name="limit_right" type="int" setter="set_limit" getter="get_limit" default="10000000">
			Right scroll limit in pixels. The camera stops moving when reaching this value.
		</member>
		<member name="limit_smoothed" type="bool" setter="set_limit_smoothing_enabled" getter="is_limit_smoothing_enabled" default="false">
			If [code]true[/code], the camera smoothly stops when reaches its limits.
			This property has no effect if [member smoothing_enabled] is [code]false[/code].
			[b]Note:[/b] To immediately update the camera's position to be within limits without smoothing, even with this setting enabled, invoke [method reset_smoothing].
		</member>
		<member name="limit_top" type="int" setter="set_limit" getter="get_limit" default="-10000000">
			Top scroll limit in pixels. The camera stops moving when reaching this value.
		</member>
		<member name="offset" type="Vector2" setter="set_offset" getter="get_offset" default="Vector2( 0, 0 )">
			The camera's offset, useful for looking around or camera shake animations.
		</member>
		<member name="offset_h" type="float" setter="set_h_offset" getter="get_h_offset" default="0.0">
			The horizontal offset of the camera, relative to the drag margins.
			[b]Note:[/b] Offset H is used only to force offset relative to margins. It's not updated in any way if drag margins are enabled and can be used to set initial offset.
		</member>
		<member name="offset_v" type="float" setter="set_v_offset" getter="get_v_offset" default="0.0">
			The vertical offset of the camera, relative to the drag margins.
			[b]Note:[/b] Used the same as [member offset_h].
		</member>
		<member name="process_mode" type="int" setter="set_process_mode" getter="get_process_mode" enum="Camera2D.Camera2DProcessMode" default="1">
			The camera's process callback. See [enum Camera2DProcessMode].
		</member>
		<member name="rotating" type="bool" setter="set_rotating" getter="is_rotating" default="false">
			If [code]true[/code], the camera view rotates with the target.
		</member>
		<member name="smoothing_enabled" type="bool" setter="set_enable_follow_smoothing" getter="is_follow_smoothing_enabled" default="false">
			If [code]true[/code], the camera smoothly moves towards the target at [member smoothing_speed].
		</member>
		<member name="smoothing_speed" type="float" setter="set_follow_smoothing" getter="get_follow_smoothing" default="5.0">
			Speed in pixels per second of the camera's smoothing effect when [member smoothing_enabled] is [code]true[/code].
		</member>
		<member name="zoom" type="Vector2" setter="set_zoom" getter="get_zoom" default="Vector2( 1, 1 )">
			The camera's zoom relative to the viewport. Values larger than [code]Vector2(1, 1)[/code] zoom out and smaller values zoom in. For an example, use [code]Vector2(0.5, 0.5)[/code] for a 2× zoom-in, and [code]Vector2(4, 4)[/code] for a 4× zoom-out.
		</member>
	</members>
	<constants>
		<constant name="ANCHOR_MODE_FIXED_TOP_LEFT" value="0" enum="AnchorMode">
			The camera's position is fixed so that the top-left corner is always at the origin.
		</constant>
		<constant name="ANCHOR_MODE_DRAG_CENTER" value="1" enum="AnchorMode">
			The camera's position takes into account vertical/horizontal offsets and the screen size.
		</constant>
		<constant name="CAMERA2D_PROCESS_PHYSICS" value="0" enum="Camera2DProcessMode">
			The camera updates with the [code]_physics_process[/code] callback.
		</constant>
		<constant name="CAMERA2D_PROCESS_IDLE" value="1" enum="Camera2DProcessMode">
			The camera updates with the [code]_process[/code] callback.
		</constant>
	</constants>
</class>
