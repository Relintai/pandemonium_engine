<?xml version="1.0" encoding="UTF-8" ?>
<class name="Semaphore" inherits="Reference">
	<brief_description>
		A synchronization semaphore.
	</brief_description>
	<description>
		A synchronization semaphore which can be used to synchronize multiple [Thread]s. Initialized to zero on creation. Be careful to avoid deadlocks. For a binary version, see [Mutex].
	</description>
	<tutorials>
		<link>$DOCS_URL/tutorials/performance/threads/using_multiple_threads.md</link>
	</tutorials>
	<methods>
		<method name="post">
			<return type="int" enum="Error" />
			<description>
				Lowers the [Semaphore], allowing one more thread in.
				[b]Note:[/b] This method internals' can't possibly fail, but an error code is returned for backwards compatibility, which will always be [constant OK].
			</description>
		</method>
		<method name="try_wait">
			<return type="int" enum="Error" />
			<description>
				Like [method wait], but won't block, so if the value is zero, fails immediately and returns [constant ERR_BUSY]. If non-zero, it returns [constant OK] to report success.
			</description>
		</method>
		<method name="wait">
			<return type="int" enum="Error" />
			<description>
				Waits for the [Semaphore], if its value is zero, blocks until non-zero.
				[b]Note:[/b] This method internals' can't possibly fail, but an error code is returned for backwards compatibility, which will always be [constant OK].
			</description>
		</method>
	</methods>
	<constants>
	</constants>
</class>
