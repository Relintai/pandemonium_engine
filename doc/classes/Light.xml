<?xml version="1.0" encoding="UTF-8" ?>
<class name="Light" inherits="VisualInstance">
	<brief_description>
		Provides a base class for different kinds of light nodes.
	</brief_description>
	<description>
		Light is the [i]abstract[/i] base class for light nodes. As it can't be instanced, it shouldn't be used directly. Other types of light nodes inherit from it. Light contains the common variables and parameters used for lighting.
	</description>
	<tutorials>
		<link title="3D lights and shadows">$DOCS_URL/tutorials/3d/lights_and_shadows.md</link>
		<link title="Third Person Shooter Demo">https://godotengine.org/asset-library/asset/678</link>
	</tutorials>
	<methods>
		<method name="get_param" qualifiers="const">
			<return type="float" />
			<argument index="0" name="param" type="int" enum="Light.Param" />
			<description>
				Returns the value of the specified [enum Light.Param] parameter.
			</description>
		</method>
		<method name="set_param">
			<return type="void" />
			<argument index="0" name="param" type="int" enum="Light.Param" />
			<argument index="1" name="value" type="float" />
			<description>
				Sets the value of the specified [enum Light.Param] parameter.
			</description>
		</method>
	</methods>
	<members>
		<member name="editor_only" type="bool" setter="set_editor_only" getter="is_editor_only" default="false">
			If [code]true[/code], the light only appears in the editor and will not be visible at runtime.
		</member>
		<member name="light_bake_mode" type="int" setter="set_bake_mode" getter="get_bake_mode" enum="Light.BakeMode" default="1">
		</member>
		<member name="light_color" type="Color" setter="set_color" getter="get_color" default="Color( 1, 1, 1, 1 )">
			The light's color. An [i]overbright[/i] color can be used to achieve a result equivalent to increasing the light's [member light_energy].
		</member>
		<member name="light_cull_mask" type="int" setter="set_cull_mask" getter="get_cull_mask" default="4294967295">
			The light will affect objects in the selected layers.
		</member>
		<member name="light_energy" type="float" setter="set_param" getter="get_param" default="1.0">
			The light's strength multiplier (this is not a physical unit). For [OmniLight] and [SpotLight], changing this value will only change the light color's intensity, not the light's radius.
		</member>
		<member name="light_indirect_energy" type="float" setter="set_param" getter="get_param" default="1.0">
			Secondary multiplier used with indirect light (light bounces). This works on both [BakedLightmap] and [GIProbe].
		</member>
		<member name="light_negative" type="bool" setter="set_negative" getter="is_negative" default="false">
			If [code]true[/code], the light's effect is reversed, darkening areas and casting bright shadows.
		</member>
		<member name="light_size" type="float" setter="set_param" getter="get_param" default="0.0">
			The size of the light in Godot units. Only considered in baked lightmaps and only if [member light_bake_mode] is set to [constant BAKE_ALL]. Increasing this value will make the shadows appear blurrier. This can be used to simulate area lights to an extent.
			[b]Note:[/b] [member light_size] is not affected by [member Spatial.scale] (the light's scale or its parent's scale).
		</member>
		<member name="light_specular" type="float" setter="set_param" getter="get_param" default="0.5">
			The intensity of the specular blob in objects affected by the light. At [code]0[/code], the light becomes a pure diffuse light. When not baking emission, this can be used to avoid unrealistic reflections when placing lights above an emissive surface.
		</member>
		<member name="shadow_bias" type="float" setter="set_param" getter="get_param" default="0.1">
			Used to adjust shadow appearance. Too small a value results in self-shadowing ("shadow acne"), while too large a value causes shadows to separate from casters ("peter-panning"). Adjust as needed.
		</member>
		<member name="shadow_color" type="Color" setter="set_shadow_color" getter="get_shadow_color" default="Color( 0, 0, 0, 1 )">
			The color of shadows cast by this light.
		</member>
		<member name="shadow_contact" type="float" setter="set_param" getter="get_param" default="0.0">
			Attempts to reduce [member shadow_bias] gap by rendering screen-space contact shadows. This has a performance impact, especially at higher values.
			[b]Note:[/b] Contact shadows can look broken, so leaving this property to [code]0.0[/code] is recommended.
		</member>
		<member name="shadow_enabled" type="bool" setter="set_shadow" getter="has_shadow" default="false">
			If [code]true[/code], the light will cast shadows.
		</member>
		<member name="shadow_reverse_cull_face" type="bool" setter="set_shadow_reverse_cull_face" getter="get_shadow_reverse_cull_face" default="false">
			If [code]true[/code], reverses the backface culling of the mesh. This can be useful when you have a flat mesh that has a light behind it. If you need to cast a shadow on both sides of the mesh, set the mesh to use double-sided shadows with [constant GeometryInstance.SHADOW_CASTING_SETTING_DOUBLE_SIDED].
		</member>
	</members>
	<constants>
		<constant name="PARAM_ENERGY" value="0" enum="Param">
			Constant for accessing [member light_energy].
		</constant>
		<constant name="PARAM_INDIRECT_ENERGY" value="1" enum="Param">
			Constant for accessing [member light_indirect_energy].
		</constant>
		<constant name="PARAM_SIZE" value="2" enum="Param">
			Constant for accessing [member light_size].
		</constant>
		<constant name="PARAM_SPECULAR" value="3" enum="Param">
			Constant for accessing [member light_specular].
		</constant>
		<constant name="PARAM_RANGE" value="4" enum="Param">
			Constant for accessing [member OmniLight.omni_range] or [member SpotLight.spot_range].
		</constant>
		<constant name="PARAM_ATTENUATION" value="5" enum="Param">
			Constant for accessing [member OmniLight.omni_attenuation] or [member SpotLight.spot_attenuation].
		</constant>
		<constant name="PARAM_SPOT_ANGLE" value="6" enum="Param">
			Constant for accessing [member SpotLight.spot_angle].
		</constant>
		<constant name="PARAM_SPOT_ATTENUATION" value="7" enum="Param">
			Constant for accessing [member SpotLight.spot_angle_attenuation].
		</constant>
		<constant name="PARAM_CONTACT_SHADOW_SIZE" value="8" enum="Param">
			Constant for accessing [member shadow_contact].
		</constant>
		<constant name="PARAM_SHADOW_MAX_DISTANCE" value="9" enum="Param">
			Constant for accessing [member DirectionalLight.directional_shadow_max_distance].
		</constant>
		<constant name="PARAM_SHADOW_SPLIT_1_OFFSET" value="10" enum="Param">
			Constant for accessing [member DirectionalLight.directional_shadow_split_1].
		</constant>
		<constant name="PARAM_SHADOW_SPLIT_2_OFFSET" value="11" enum="Param">
			Constant for accessing [member DirectionalLight.directional_shadow_split_2].
		</constant>
		<constant name="PARAM_SHADOW_SPLIT_3_OFFSET" value="12" enum="Param">
			Constant for accessing [member DirectionalLight.directional_shadow_split_3].
		</constant>
		<constant name="PARAM_SHADOW_NORMAL_BIAS" value="13" enum="Param">
			Constant for accessing [member DirectionalLight.directional_shadow_normal_bias].
		</constant>
		<constant name="PARAM_SHADOW_BIAS" value="14" enum="Param">
			Constant for accessing [member shadow_bias].
		</constant>
		<constant name="PARAM_SHADOW_BIAS_SPLIT_SCALE" value="15" enum="Param">
			Constant for accessing [member DirectionalLight.directional_shadow_bias_split_scale].
		</constant>
		<constant name="PARAM_SHADOW_FADE_START" value="16" enum="Param">
			Constant for accessing [member DirectionalLight.directional_shadow_fade_start].
		</constant>
		<constant name="PARAM_MAX" value="17" enum="Param">
			Represents the size of the [enum Param] enum.
		</constant>
		<constant name="BAKE_DISABLED" value="0" enum="BakeMode">
		</constant>
		<constant name="BAKE_INDIRECT" value="1" enum="BakeMode">
		</constant>
		<constant name="BAKE_ALL" value="2" enum="BakeMode">
		</constant>
	</constants>
</class>
