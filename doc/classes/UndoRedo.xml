<?xml version="1.0" encoding="UTF-8" ?>
<class name="UndoRedo" inherits="Object">
	<brief_description>
		Helper to manage undo/redo operations in the editor or custom tools.
	</brief_description>
	<description>
		Helper to manage undo/redo operations in the editor or custom tools. It works by registering methods and property changes inside "actions".
		Common behavior is to create an action, then add do/undo calls to functions or property changes, then committing the action.
		Here's an example on how to add an action to the Godot editor's own [UndoRedo], from a plugin:
		[codeblock]
		var undo_redo = get_undo_redo() # Method of EditorPlugin.

		func do_something():
		    pass # Put your code here.

		func undo_something():
		    pass # Put here the code that reverts what's done by "do_something()".

		func _on_MyButton_pressed():
		    var node = get_node("MyNode2D")
		    undo_redo.create_action("Move the node")
		    undo_redo.add_do_method(self, "do_something")
		    undo_redo.add_undo_method(self, "undo_something")
		    undo_redo.add_do_property(node, "position", Vector2(100,100))
		    undo_redo.add_undo_property(node, "position", node.position)
		    undo_redo.commit_action()
		[/codeblock]
		[method create_action], [method add_do_method], [method add_undo_method], [method add_do_property], [method add_undo_property], and [method commit_action] should be called one after the other, like in the example. Not doing so could lead to crashes.
		If you don't need to register a method, you can leave [method add_do_method] and [method add_undo_method] out; the same goes for properties. You can also register more than one method/property.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_do_method" qualifiers="vararg">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="method" type="String" />
			<description>
				Register a method that will be called when the action is committed.
			</description>
		</method>
		<method name="add_do_property">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="property" type="StringName" />
			<argument index="2" name="value" type="Variant" />
			<description>
				Register a property value change for "do".
			</description>
		</method>
		<method name="add_do_reference">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<description>
				Register a reference for "do" that will be erased if the "do" history is lost. This is useful mostly for new nodes created for the "do" call. Do not use for resources.
			</description>
		</method>
		<method name="add_undo_method" qualifiers="vararg">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="method" type="StringName" />
			<description>
				Register a method that will be called when the action is undone.
			</description>
		</method>
		<method name="add_undo_property">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<argument index="1" name="property" type="StringName" />
			<argument index="2" name="value" type="Variant" />
			<description>
				Register a property value change for "undo".
			</description>
		</method>
		<method name="add_undo_reference">
			<return type="void" />
			<argument index="0" name="object" type="Object" />
			<description>
				Register a reference for "undo" that will be erased if the "undo" history is lost. This is useful mostly for nodes removed with the "do" call (not the "undo" call!).
			</description>
		</method>
		<method name="clear_history">
			<return type="void" />
			<argument index="0" name="increase_version" type="bool" default="true" />
			<description>
				Clear the undo/redo history and associated references.
				Passing [code]false[/code] to [code]increase_version[/code] will prevent the version number to be increased from this.
			</description>
		</method>
		<method name="commit_action">
			<return type="void" />
			<description>
				Commit the action. All "do" methods/properties are called/set when this function is called.
			</description>
		</method>
		<method name="create_action">
			<return type="void" />
			<argument index="0" name="name" type="String" />
			<argument index="1" name="merge_mode" type="int" enum="UndoRedo.MergeMode" default="0" />
			<description>
				Create a new action. After this is called, do all your calls to [method add_do_method], [method add_undo_method], [method add_do_property], and [method add_undo_property], then commit the action with [method commit_action].
				The way actions are merged is dictated by the [code]merge_mode[/code] argument. See [enum MergeMode] for details.
			</description>
		</method>
		<method name="get_current_action_name" qualifiers="const">
			<return type="String" />
			<description>
				Gets the name of the current action.
			</description>
		</method>
		<method name="get_version" qualifiers="const">
			<return type="int" />
			<description>
				Gets the version. Every time a new action is committed, the [UndoRedo]'s version number is increased automatically.
				This is useful mostly to check if something changed from a saved version.
			</description>
		</method>
		<method name="has_redo" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if a "redo" action is available.
			</description>
		</method>
		<method name="has_undo" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if an "undo" action is available.
			</description>
		</method>
		<method name="is_commiting_action" qualifiers="const">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the [UndoRedo] is currently committing the action, i.e. running its "do" method or property change (see [method commit_action]).
			</description>
		</method>
		<method name="redo">
			<return type="bool" />
			<description>
				Redo the last action.
			</description>
		</method>
		<method name="undo">
			<return type="bool" />
			<description>
				Undo the last action.
			</description>
		</method>
	</methods>
	<signals>
		<signal name="version_changed">
			<description>
				Called when [method undo] or [method redo] was called.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="MERGE_DISABLE" value="0" enum="MergeMode">
			Makes "do"/"undo" operations stay in separate actions.
		</constant>
		<constant name="MERGE_ENDS" value="1" enum="MergeMode">
			Makes so that the action's "do" operation is from the first action created and the "undo" operation is from the last subsequent action with the same name.
		</constant>
		<constant name="MERGE_ALL" value="2" enum="MergeMode">
			Makes subsequent actions with the same name be merged into one.
		</constant>
	</constants>
</class>
