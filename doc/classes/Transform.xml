<?xml version="1.0" encoding="UTF-8" ?>
<class name="Transform">
	<brief_description>
		3D transformation (3×4 matrix).
	</brief_description>
	<description>
		3×4 matrix (3 rows, 4 columns) used for 3D linear transformations. It can represent transformations such as translation, rotation, or scaling. It consists of a [member basis] (first 3 columns) and a [Vector3] for the [member origin] (last column).
		For more information, read the "Matrices and transforms" documentation article.
	</description>
	<tutorials>
		<link title="Math tutorial index">$DOCS_URL/tutorials/math/index.md</link>
		<link title="Matrices and transforms">$DOCS_URL/tutorials/math/matrices_and_transforms.md</link>
		<link title="Using 3D transforms">$DOCS_URL/tutorials/3d/using_transforms.md</link>
		<link title="Matrix Transform Demo">https://godotengine.org/asset-library/asset/584</link>
		<link title="3D Platformer Demo">https://godotengine.org/asset-library/asset/125</link>
		<link title="2.5D Demo">https://godotengine.org/asset-library/asset/583</link>
	</tutorials>
	<methods>
		<method name="Transform">
			<return type="Transform" />
			<argument index="0" name="from" type="Transform2D" />
			<description>
				Constructs a Transform from a [Transform2D].
			</description>
		</method>
		<method name="Transform">
			<return type="Transform" />
			<argument index="0" name="from" type="Basis" />
			<description>
				Constructs the Transform from a [Basis]. The origin will be Vector3(0, 0, 0).
			</description>
		</method>
		<method name="Transform">
			<return type="Transform" />
			<argument index="0" name="from" type="Quaternion" />
			<description>
				Constructs a Transform from a [Quaternion]. The origin will be [code]Vector3(0, 0, 0)[/code].
			</description>
		</method>
		<method name="Transform">
			<return type="Transform" />
			<argument index="0" name="basis" type="Basis" />
			<argument index="1" name="origin" type="Vector3" />
			<description>
				Constructs a Transform from a [Basis] and [Vector3].
			</description>
		</method>
		<method name="Transform">
			<return type="Transform" />
			<argument index="0" name="x_axis" type="Vector3" />
			<argument index="1" name="y_axis" type="Vector3" />
			<argument index="2" name="z_axis" type="Vector3" />
			<argument index="3" name="origin" type="Vector3" />
			<description>
				Constructs a Transform from four [Vector3] values (matrix columns). Each axis corresponds to local basis vectors (some of which may be scaled).
			</description>
		</method>
		<method name="affine_inverse">
			<return type="Transform" />
			<description>
				Returns the inverse of the transform, under the assumption that the transformation is composed of rotation, scaling and translation.
			</description>
		</method>
		<method name="affine_invert">
			<description>
			</description>
		</method>
		<method name="get_basis">
			<return type="Basis" />
			<description>
			</description>
		</method>
		<method name="get_origin">
			<return type="Vector3" />
			<description>
			</description>
		</method>
		<method name="interpolate_with">
			<return type="Transform" />
			<argument index="0" name="transform" type="Transform" />
			<argument index="1" name="weight" type="float" />
			<description>
				Returns a transform interpolated between this transform and another by a given [code]weight[/code] (on the range of 0.0 to 1.0).
			</description>
		</method>
		<method name="inverse">
			<return type="Transform" />
			<description>
				Returns the inverse of the transform, under the assumption that the transformation is composed of rotation and translation (no scaling, use [method affine_inverse] for transforms with scaling).
			</description>
		</method>
		<method name="invert">
			<description>
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool" />
			<argument index="0" name="transform" type="Transform" />
			<description>
				Returns [code]true[/code] if this transform and [code]transform[/code] are approximately equal, by calling [code]is_equal_approx[/code] on each component.
			</description>
		</method>
		<method name="looking_at">
			<return type="Transform" />
			<argument index="0" name="target" type="Vector3" />
			<argument index="1" name="up" type="Vector3" />
			<argument index="2" name="use_model_front" type="bool" default="false" />
			<description>
				Returns a copy of the transform rotated such that its (-Z, [constant Vector3.FORWARD]) axis points towards the [code]target[/code] position. If the [param use_model_front] options is specified, then the model is oriented in reverse, towards the model front axis (+Z, [constant Vector3.MODEL_FRONT]), which is more useful for orienting 3D models.
				The transform will first be rotated around the given [code]up[/code] vector, and then fully aligned to the target by a further rotation around an axis perpendicular to both the [code]target[/code] and [code]up[/code] vectors.
				Operations take place in global space.
			</description>
		</method>
		<method name="orthogonalize">
			<description>
			</description>
		</method>
		<method name="orthogonalized">
			<return type="Transform" />
			<description>
			</description>
		</method>
		<method name="orthonormalize">
			<description>
			</description>
		</method>
		<method name="orthonormalized">
			<return type="Transform" />
			<description>
				Returns the transform with the basis orthogonal (90 degrees), and normalized axis vectors (scale of 1 or -1).
			</description>
		</method>
		<method name="rotate">
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="phi" type="float" />
			<description>
			</description>
		</method>
		<method name="rotate_basis">
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="phi" type="float" />
			<description>
			</description>
		</method>
		<method name="rotate_local">
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="phi" type="float" />
			<description>
			</description>
		</method>
		<method name="rotated">
			<return type="Transform" />
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="phi" type="float" />
			<description>
				Returns a copy of the transform rotated around the given [code]axis[/code] by the given [code]angle[/code] (in radians).
				The [code]axis[/code] must be a normalized vector.
				This method is an optimized version of multiplying the given transform [code]X[/code]
				with a corresponding rotation transform [code]R[/code] from the left, i.e., [code]R * X[/code].
				This can be seen as transforming with respect to the global/parent frame.
			</description>
		</method>
		<method name="rotated_local">
			<return type="Transform" />
			<argument index="0" name="axis" type="Vector3" />
			<argument index="1" name="phi" type="float" />
			<description>
				Returns a copy of the transform rotated around the given [code]axis[/code] by the given [code]angle[/code] (in radians).
				The [code]axis[/code] must be a normalized vector.
				This method is an optimized version of multiplying the given transform [code]X[/code]
				with a corresponding rotation transform [code]R[/code] from the right, i.e., [code]X * R[/code].
				This can be seen as transforming with respect to the local frame.
			</description>
		</method>
		<method name="scale">
			<argument index="0" name="scale" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="scale_basis">
			<argument index="0" name="scale" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="scaled">
			<return type="Transform" />
			<argument index="0" name="scale" type="Vector3" />
			<description>
				Returns a copy of the transform scaled by the given [code]scale[/code] factor.
				This method is an optimized version of multiplying the given transform [code]X[/code]
				with a corresponding scaling transform [code]S[/code] from the left, i.e., [code]S * X[/code].
				This can be seen as transforming with respect to the global/parent frame.
			</description>
		</method>
		<method name="scaled_local">
			<return type="Transform" />
			<argument index="0" name="scale" type="Vector3" />
			<description>
				Returns a copy of the transform scaled by the given [code]scale[/code] factor.
				This method is an optimized version of multiplying the given transform [code]X[/code]
				with a corresponding scaling transform [code]S[/code] from the right, i.e., [code]X * S[/code].
				This can be seen as transforming with respect to the local frame.
			</description>
		</method>
		<method name="set_basis">
			<argument index="0" name="basis" type="Basis" />
			<description>
			</description>
		</method>
		<method name="set_look_at">
			<argument index="0" name="eye" type="Vector3" />
			<argument index="1" name="target" type="Vector3" />
			<argument index="2" name="up" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="set_origin">
			<argument index="0" name="origin" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="spherical_interpolate_with">
			<return type="Transform" />
			<argument index="0" name="transform" type="Transform" />
			<argument index="1" name="c" type="float" />
			<description>
			</description>
		</method>
		<method name="translate_localr">
			<argument index="0" name="tx" type="float" />
			<argument index="1" name="ty" type="float" />
			<argument index="2" name="tz" type="float" />
			<description>
			</description>
		</method>
		<method name="translate_localv">
			<argument index="0" name="scale" type="Vector3" />
			<description>
			</description>
		</method>
		<method name="translated">
			<return type="Transform" />
			<argument index="0" name="translation" type="Vector3" />
			<description>
				Returns a copy of the transform translated by the given [code]offset[/code].
				This method is an optimized version of multiplying the given transform [code]X[/code]
				with a corresponding translation transform [code]T[/code] from the left, i.e., [code]T * X[/code].
				This can be seen as transforming with respect to the global/parent frame.
			</description>
		</method>
		<method name="translated_local">
			<return type="Transform" />
			<argument index="0" name="offset" type="Vector3" />
			<description>
				Returns a copy of the transform translated by the given [code]offset[/code].
				This method is an optimized version of multiplying the given transform [code]X[/code]
				with a corresponding translation transform [code]T[/code] from the right, i.e., [code]X * T[/code].
				This can be seen as transforming with respect to the local frame.
			</description>
		</method>
		<method name="xform">
			<return type="Variant" />
			<argument index="0" name="v" type="Variant" />
			<description>
				Transforms the given [Vector3], [Plane], [AABB], or [PoolVector3Array] by this transform.
			</description>
		</method>
		<method name="xform_inv">
			<return type="Variant" />
			<argument index="0" name="v" type="Variant" />
			<description>
				Inverse-transforms the given [Vector3], [Plane], [AABB], or [PoolVector3Array] by this transform, under the assumption that the transformation is composed of rotation and translation (no scaling). Equivalent to calling [code]inverse().xform(v)[/code] on this transform. For affine transformations (e.g. with scaling) see [method affine_inverse] method.
			</description>
		</method>
	</methods>
	<members>
		<member name="basis" type="Basis" setter="" getter="" default="Basis( 1, 0, 0, 0, 1, 0, 0, 0, 1 )">
			The basis is a matrix containing 3 [Vector3] as its columns: X axis, Y axis, and Z axis. These vectors can be interpreted as the basis vectors of local coordinate system traveling with the object.
		</member>
		<member name="origin" type="Vector3" setter="" getter="" default="Vector3( 0, 0, 0 )">
			The translation offset of the transform (column 3, the fourth column). Equivalent to array index [code]3[/code].
		</member>
	</members>
	<constants>
		<constant name="IDENTITY" value="Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )">
			[Transform] with no translation, rotation or scaling applied. When applied to other data structures, [constant IDENTITY] performs no transformation.
		</constant>
		<constant name="FLIP_X" value="Transform( -1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )">
			[Transform] with mirroring applied perpendicular to the YZ plane.
		</constant>
		<constant name="FLIP_Y" value="Transform( 1, 0, 0, 0, -1, 0, 0, 0, 1, 0, 0, 0 )">
			[Transform] with mirroring applied perpendicular to the XZ plane.
		</constant>
		<constant name="FLIP_Z" value="Transform( 1, 0, 0, 0, 1, 0, 0, 0, -1, 0, 0, 0 )">
			[Transform] with mirroring applied perpendicular to the XY plane.
		</constant>
	</constants>
</class>
