<?xml version="1.0" encoding="UTF-8" ?>
<class name="OptionButton" inherits="Button">
	<brief_description>
		Button control that provides selectable options when pressed.
	</brief_description>
	<description>
		OptionButton is a type button that provides a selectable list of items when pressed. The item selected becomes the "current" item and is displayed as the button text.
		See also [BaseButton] which contains common properties and methods associated with this node.
		[b]Note:[/b] The ID values used for items are limited to 32 bits, not full 64 bits of [int]. This has a range of [code]-2^32[/code] to [code]2^32 - 1[/code], i.e. [code]-2147483648[/code] to [code]2147483647[/code].
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_icon_item">
			<return type="void" />
			<argument index="0" name="texture" type="Texture" />
			<argument index="1" name="label" type="String" />
			<argument index="2" name="id" type="int" default="-1" />
			<description>
				Adds an item, with a [code]texture[/code] icon, text [code]label[/code] and (optionally) [code]id[/code]. If no [code]id[/code] is passed, the item index will be used as the item's ID. New items are appended at the end.
			</description>
		</method>
		<method name="add_item">
			<return type="void" />
			<argument index="0" name="label" type="String" />
			<argument index="1" name="id" type="int" default="-1" />
			<description>
				Adds an item, with text [code]label[/code] and (optionally) [code]id[/code]. If no [code]id[/code] is passed, the item index will be used as the item's ID. New items are appended at the end.
			</description>
		</method>
		<method name="add_separator">
			<return type="void" />
			<description>
				Adds a separator to the list of items. Separators help to group items. Separator also takes up an index and is appended at the end.
			</description>
		</method>
		<method name="clear">
			<return type="void" />
			<description>
				Clears all the items in the [OptionButton].
			</description>
		</method>
		<method name="get_item_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the amount of items in the OptionButton, including separators.
			</description>
		</method>
		<method name="get_item_icon" qualifiers="const">
			<return type="Texture" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the icon of the item at index [code]idx[/code].
			</description>
		</method>
		<method name="get_item_id" qualifiers="const">
			<return type="int" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the ID of the item at index [code]idx[/code].
			</description>
		</method>
		<method name="get_item_index" qualifiers="const">
			<return type="int" />
			<argument index="0" name="id" type="int" />
			<description>
				Returns the index of the item with the given [code]id[/code].
			</description>
		</method>
		<method name="get_item_metadata" qualifiers="const">
			<return type="Variant" />
			<argument index="0" name="idx" type="int" />
			<description>
				Retrieves the metadata of an item. Metadata may be any type and can be used to store extra information about an item, such as an external string ID.
			</description>
		</method>
		<method name="get_item_text" qualifiers="const">
			<return type="String" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the text of the item at index [code]idx[/code].
			</description>
		</method>
		<method name="get_item_tooltip" qualifiers="const">
			<return type="String" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns the tooltip of the item at index [code]idx[/code].
			</description>
		</method>
		<method name="get_popup" qualifiers="const">
			<return type="PopupMenu" />
			<description>
				Returns the [PopupMenu] contained in this button.
				[b]Warning:[/b] This is a required internal node, removing and freeing it may cause a crash. If you wish to hide it or any of its children, use their [member CanvasItem.visible] property.
			</description>
		</method>
		<method name="get_selected_id" qualifiers="const">
			<return type="int" />
			<description>
				Returns the ID of the selected item, or [code]-1[/code] if no item is selected.
			</description>
		</method>
		<method name="get_selected_metadata" qualifiers="const">
			<return type="Variant" />
			<description>
				Gets the metadata of the selected item. Metadata for items can be set using [method set_item_metadata].
			</description>
		</method>
		<method name="is_item_disabled" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="idx" type="int" />
			<description>
				Returns [code]true[/code] if the item at index [code]idx[/code] is disabled.
			</description>
		</method>
		<method name="remove_item">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<description>
				Removes the item at index [code]idx[/code].
			</description>
		</method>
		<method name="select">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<description>
				Selects an item by index and makes it the current item. This will work even if the item is disabled.
				Passing [code]-1[/code] as the index deselects any currently selected item.
			</description>
		</method>
		<method name="set_item_disabled">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="disabled" type="bool" />
			<description>
				Sets whether the item at index [code]idx[/code] is disabled.
				Disabled items are drawn differently in the dropdown and are not selectable by the user. If the current selected item is set as disabled, it will remain selected.
			</description>
		</method>
		<method name="set_item_icon">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="texture" type="Texture" />
			<description>
				Sets the icon of the item at index [code]idx[/code].
			</description>
		</method>
		<method name="set_item_id">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="id" type="int" />
			<description>
				Sets the ID of the item at index [code]idx[/code].
			</description>
		</method>
		<method name="set_item_metadata">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="metadata" type="Variant" />
			<description>
				Sets the metadata of an item. Metadata may be of any type and can be used to store extra information about an item, such as an external string ID.
			</description>
		</method>
		<method name="set_item_text">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="text" type="String" />
			<description>
				Sets the text of the item at index [code]idx[/code].
			</description>
		</method>
		<method name="set_item_tooltip">
			<return type="void" />
			<argument index="0" name="idx" type="int" />
			<argument index="1" name="tooltip" type="String" />
			<description>
				Sets the tooltip of the item at index [code]idx[/code].
			</description>
		</method>
	</methods>
	<members>
		<member name="action_mode" type="int" setter="set_action_mode" getter="get_action_mode" overrides="BaseButton" enum="BaseButton.ActionMode" default="0" />
		<member name="align" type="int" setter="set_text_align" getter="get_text_align" overrides="Button" enum="Button.TextAlign" default="0" />
		<member name="selected" type="int" setter="_select_int" getter="get_selected" default="-1">
			The index of the currently selected item, or [code]-1[/code] if no item is selected.
		</member>
		<member name="toggle_mode" type="bool" setter="set_toggle_mode" getter="is_toggle_mode" overrides="BaseButton" default="true" />
	</members>
	<signals>
		<signal name="item_focused">
			<argument index="0" name="index" type="int" />
			<description>
				Emitted when the user navigates to an item using the [code]ui_up[/code] or [code]ui_down[/code] actions. The index of the item selected is passed as argument.
			</description>
		</signal>
		<signal name="item_selected">
			<argument index="0" name="index" type="int" />
			<description>
				Emitted when the current item has been changed by the user. The index of the item selected is passed as argument.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
	<theme_items>
		<theme_item name="font_color" data_type="color" type="Color" default="Color( 0.88, 0.88, 0.88, 1 )">
			Default text [Color] of the [OptionButton].
		</theme_item>
		<theme_item name="font_color_disabled" data_type="color" type="Color" default="Color( 0.9, 0.9, 0.9, 0.2 )">
			Text [Color] used when the [OptionButton] is disabled.
		</theme_item>
		<theme_item name="font_color_focus" data_type="color" type="Color" default="Color( 0.94, 0.94, 0.94, 1 )">
			Text [Color] used when the [OptionButton] is focused. Only replaces the normal text color of the button. Disabled, hovered, and pressed states take precedence over this color.
		</theme_item>
		<theme_item name="font_color_hover" data_type="color" type="Color" default="Color( 0.94, 0.94, 0.94, 1 )">
			Text [Color] used when the [OptionButton] is being hovered.
		</theme_item>
		<theme_item name="font_color_pressed" data_type="color" type="Color" default="Color( 1, 1, 1, 1 )">
			Text [Color] used when the [OptionButton] is being pressed.
		</theme_item>
		<theme_item name="arrow_margin" data_type="constant" type="int" default="2">
			The horizontal space between the arrow icon and the right edge of the button.
		</theme_item>
		<theme_item name="hseparation" data_type="constant" type="int" default="2">
			The horizontal space between [OptionButton]'s icon and text.
		</theme_item>
		<theme_item name="font" data_type="font" type="Font">
			[Font] of the [OptionButton]'s text.
		</theme_item>
		<theme_item name="arrow" data_type="icon" type="Texture">
			The arrow icon to be drawn on the right end of the button.
		</theme_item>
		<theme_item name="disabled" data_type="style" type="StyleBox">
			[StyleBox] used when the [OptionButton] is disabled.
		</theme_item>
		<theme_item name="focus" data_type="style" type="StyleBox">
			[StyleBox] used when the [OptionButton] is focused. It is displayed over the current [StyleBox], so using [StyleBoxEmpty] will just disable the focus visual effect.
		</theme_item>
		<theme_item name="hover" data_type="style" type="StyleBox">
			[StyleBox] used when the [OptionButton] is being hovered.
		</theme_item>
		<theme_item name="normal" data_type="style" type="StyleBox">
			Default [StyleBox] for the [OptionButton].
		</theme_item>
		<theme_item name="pressed" data_type="style" type="StyleBox">
			[StyleBox] used when the [OptionButton] is being pressed.
		</theme_item>
	</theme_items>
</class>
