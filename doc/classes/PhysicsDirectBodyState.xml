<?xml version="1.0" encoding="UTF-8" ?>
<class name="PhysicsDirectBodyState" inherits="Object">
	<brief_description>
		Direct access object to a physics body in the [PhysicsServer].
	</brief_description>
	<description>
		Provides direct access to a physics body in the [PhysicsServer], allowing safe changes to physics properties. This object is passed via the direct state callback of rigid/character bodies, and is intended for changing the direct state of that body. See [method RigidBody._integrate_forces].
	</description>
	<tutorials>
		<link title="Physics introduction">$DOCS_URL/tutorials/physics/physics_introduction.md</link>
		<link title="Ray-casting">$DOCS_URL/tutorials/physics/ray-casting.md</link>
	</tutorials>
	<methods>
		<method name="add_central_force">
			<return type="void" />
			<argument index="0" name="force" type="Vector3" />
			<description>
				Adds a constant directional force without affecting rotation.
				This is equivalent to [code]add_force(force, Vector3(0,0,0))[/code].
			</description>
		</method>
		<method name="add_force">
			<return type="void" />
			<argument index="0" name="force" type="Vector3" />
			<argument index="1" name="position" type="Vector3" />
			<description>
				Adds a positioned force to the body. Both the force and the offset from the body origin are in global coordinates.
			</description>
		</method>
		<method name="add_torque">
			<return type="void" />
			<argument index="0" name="torque" type="Vector3" />
			<description>
				Adds a constant rotational force without affecting position.
			</description>
		</method>
		<method name="apply_central_impulse">
			<return type="void" />
			<argument index="0" name="j" type="Vector3" />
			<description>
				Applies a single directional impulse without affecting rotation.
				This is equivalent to [code]apply_impulse(Vector3(0, 0, 0), impulse)[/code].
			</description>
		</method>
		<method name="apply_impulse">
			<return type="void" />
			<argument index="0" name="position" type="Vector3" />
			<argument index="1" name="j" type="Vector3" />
			<description>
				Applies a positioned impulse to the body. An impulse is time-independent! Applying an impulse every frame would result in a framerate-dependent force. For this reason it should only be used when simulating one-time impacts. The position uses the rotation of the global coordinate system, but is centered at the object's origin.
			</description>
		</method>
		<method name="apply_torque_impulse">
			<return type="void" />
			<argument index="0" name="j" type="Vector3" />
			<description>
				Apply a torque impulse (which will be affected by the body mass and shape). This will rotate the body around the vector [code]j[/code] passed as parameter.
			</description>
		</method>
		<method name="get_contact_collider" qualifiers="const">
			<return type="RID" />
			<argument index="0" name="contact_idx" type="int" />
			<description>
				Returns the collider's [RID].
			</description>
		</method>
		<method name="get_contact_collider_id" qualifiers="const">
			<return type="int" />
			<argument index="0" name="contact_idx" type="int" />
			<description>
				Returns the collider's object id.
			</description>
		</method>
		<method name="get_contact_collider_object" qualifiers="const">
			<return type="Object" />
			<argument index="0" name="contact_idx" type="int" />
			<description>
				Returns the collider object.
			</description>
		</method>
		<method name="get_contact_collider_position" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="contact_idx" type="int" />
			<description>
				Returns the contact position in the collider.
			</description>
		</method>
		<method name="get_contact_collider_shape" qualifiers="const">
			<return type="int" />
			<argument index="0" name="contact_idx" type="int" />
			<description>
				Returns the collider's shape index.
			</description>
		</method>
		<method name="get_contact_collider_velocity_at_position" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="contact_idx" type="int" />
			<description>
				Returns the linear velocity vector at the collider's contact point.
			</description>
		</method>
		<method name="get_contact_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the number of contacts this body has with other bodies.
				[b]Note:[/b] By default, this returns 0 unless bodies are configured to monitor contacts. See [member RigidBody.contact_monitor].
			</description>
		</method>
		<method name="get_contact_impulse" qualifiers="const">
			<return type="float" />
			<argument index="0" name="contact_idx" type="int" />
			<description>
				Impulse created by the contact. Only implemented for Bullet physics.
			</description>
		</method>
		<method name="get_contact_local_normal" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="contact_idx" type="int" />
			<description>
				Returns the local normal at the contact point.
			</description>
		</method>
		<method name="get_contact_local_position" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="contact_idx" type="int" />
			<description>
				Returns the local position of the contact point.
			</description>
		</method>
		<method name="get_contact_local_shape" qualifiers="const">
			<return type="int" />
			<argument index="0" name="contact_idx" type="int" />
			<description>
				Returns the local shape index of the collision.
			</description>
		</method>
		<method name="get_space_state">
			<return type="PhysicsDirectSpaceState" />
			<description>
				Returns the current state of the space, useful for queries.
			</description>
		</method>
		<method name="get_velocity_at_local_position" qualifiers="const">
			<return type="Vector3" />
			<argument index="0" name="local_position" type="Vector3" />
			<description>
				Returns the body's velocity at the given relative position, including both translation and rotation.
			</description>
		</method>
		<method name="integrate_forces">
			<return type="void" />
			<description>
				Calls the built-in force integration code.
			</description>
		</method>
	</methods>
	<members>
		<member name="angular_velocity" type="Vector3" setter="set_angular_velocity" getter="get_angular_velocity">
			The body's rotational velocity in axis-angle format. The magnitude of the vector is the rotation rate in [i]radians[/i] per second.
		</member>
		<member name="center_of_mass" type="Vector3" setter="" getter="get_center_of_mass">
		</member>
		<member name="inverse_inertia" type="Vector3" setter="" getter="get_inverse_inertia">
			The inverse of the inertia of the body.
		</member>
		<member name="inverse_mass" type="float" setter="" getter="get_inverse_mass">
			The inverse of the mass of the body.
		</member>
		<member name="linear_velocity" type="Vector3" setter="set_linear_velocity" getter="get_linear_velocity">
			The body's linear velocity in units per second.
		</member>
		<member name="principal_inertia_axes" type="Basis" setter="" getter="get_principal_inertia_axes">
		</member>
		<member name="sleeping" type="bool" setter="set_sleep_state" getter="is_sleeping">
			If [code]true[/code], this body is currently sleeping (not active).
		</member>
		<member name="step" type="float" setter="" getter="get_step">
			The timestep (delta) used for the simulation.
		</member>
		<member name="total_angular_damp" type="float" setter="" getter="get_total_angular_damp">
			The rate at which the body stops rotating, if there are not any other forces moving it.
		</member>
		<member name="total_gravity" type="Vector3" setter="" getter="get_total_gravity">
			The total gravity vector being currently applied to this body.
		</member>
		<member name="total_linear_damp" type="float" setter="" getter="get_total_linear_damp">
			The rate at which the body stops moving, if there are not any other forces moving it.
		</member>
		<member name="transform" type="Transform" setter="set_transform" getter="get_transform">
			The body's transformation matrix.
		</member>
	</members>
	<constants>
	</constants>
</class>
