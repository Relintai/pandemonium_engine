<?xml version="1.0" encoding="UTF-8" ?>
<class name="Rect2">
	<brief_description>
		2D axis-aligned bounding box.
	</brief_description>
	<description>
		[Rect2] consists of a position, a size, and several utility functions. It is typically used for fast overlap tests.
		It uses floating-point coordinates.
		The 3D counterpart to [Rect2] is [AABB].
	</description>
	<tutorials>
		<link title="Math tutorial index">$DOCS_URL/tutorials/math/index.md</link>
		<link title="Vector math">$DOCS_URL/tutorials/math/vector_math.md</link>
		<link title="Advanced vector math">$DOCS_URL/tutorials/math/vectors_advanced.md</link>
	</tutorials>
	<methods>
		<method name="Rect2">
			<return type="Rect2" />
			<argument index="0" name="from" type="Rect2i" />
			<description>
			</description>
		</method>
		<method name="Rect2">
			<return type="Rect2" />
			<argument index="0" name="x" type="float" />
			<argument index="1" name="y" type="float" />
			<argument index="2" name="width" type="float" />
			<argument index="3" name="height" type="float" />
			<description>
				Constructs a [Rect2] by x, y, width, and height.
			</description>
		</method>
		<method name="Rect2">
			<return type="Rect2" />
			<argument index="0" name="position" type="Vector2" />
			<argument index="1" name="size" type="Vector2" />
			<description>
				Constructs a [Rect2] by position and size.
			</description>
		</method>
		<method name="abs">
			<return type="Rect2" />
			<description>
				Returns a [Rect2] with equivalent position and area, modified so that the top-left corner is the origin and [code]width[/code] and [code]height[/code] are positive.
			</description>
		</method>
		<method name="clip">
			<return type="Rect2" />
			<argument index="0" name="b" type="Rect2" />
			<description>
				Returns the intersection of this [Rect2] and b.
			</description>
		</method>
		<method name="distance_to">
			<return type="float" />
			<argument index="0" name="point" type="Vector2" />
			<description>
			</description>
		</method>
		<method name="encloses">
			<return type="bool" />
			<argument index="0" name="b" type="Rect2" />
			<description>
				Returns [code]true[/code] if this [Rect2] completely encloses another one.
			</description>
		</method>
		<method name="expand">
			<return type="Rect2" />
			<argument index="0" name="to" type="Vector2" />
			<description>
				Returns a copy of this [Rect2] expanded to include a given point.
				[b]Example:[/b]
				[codeblock]
				# position (-3, 2), size (1, 1)
				var rect = Rect2(Vector2(-3, 2), Vector2(1, 1))
				# position (-3, -1), size (3, 4), so we fit both rect and Vector2(0, -1)
				var rect2 = rect.expand(Vector2(0, -1))
				[/codeblock]
			</description>
		</method>
		<method name="expand_to">
			<return type="Rect2" />
			<argument index="0" name="to" type="Vector2" />
			<description>
			</description>
		</method>
		<method name="get_area">
			<return type="float" />
			<description>
				Returns the area of the [Rect2]. See also [method has_no_area].
			</description>
		</method>
		<method name="get_center">
			<return type="Vector2" />
			<description>
				Returns the center of the [Rect2], which is equal to [member position] + ([member size] / 2).
			</description>
		</method>
		<method name="get_end">
			<return type="Vector2" />
			<description>
			</description>
		</method>
		<method name="get_position">
			<return type="Vector2" />
			<description>
			</description>
		</method>
		<method name="get_size">
			<return type="Vector2" />
			<description>
			</description>
		</method>
		<method name="get_support">
			<return type="Vector2" />
			<argument index="0" name="normal" type="Vector2" />
			<description>
			</description>
		</method>
		<method name="grow">
			<return type="Rect2" />
			<argument index="0" name="by" type="float" />
			<description>
				Returns a copy of the [Rect2] grown a given amount of units towards all the sides.
			</description>
		</method>
		<method name="grow_by">
			<argument index="0" name="by" type="float" />
			<description>
			</description>
		</method>
		<method name="grow_individual">
			<return type="Rect2" />
			<argument index="0" name="left" type="float" />
			<argument index="1" name="top" type="float" />
			<argument index="2" name="right" type="float" />
			<argument index="3" name=" bottom" type="float" />
			<description>
				Returns a copy of the [Rect2] grown a given amount of units towards each direction individually.
			</description>
		</method>
		<method name="grow_margin">
			<return type="Rect2" />
			<argument index="0" name="margin" type="int" />
			<argument index="1" name="by" type="float" />
			<description>
				Returns a copy of the [Rect2] grown a given amount of units towards the [enum Margin] direction.
			</description>
		</method>
		<method name="grow_side">
			<return type="Rect2" />
			<argument index="0" name="side" type="int" />
			<argument index="1" name="by" type="float" />
			<description>
			</description>
		</method>
		<method name="has_no_area">
			<return type="bool" />
			<description>
				Returns [code]true[/code] if the [Rect2] is flat or empty, [code]false[/code] otherwise. See also [method get_area].
				[b]Note:[/b] If the [Rect2] has a negative size and is not flat or empty, [method has_no_area] will return [code]true[/code].
			</description>
		</method>
		<method name="has_point">
			<return type="bool" />
			<argument index="0" name="point" type="Vector2" />
			<description>
				Returns [code]true[/code] if the [Rect2] contains a point. By convention, the right and bottom edges of the [Rect2] are considered exclusive, so points on these edges are [b]not[/b] included.
				[b]Note:[/b] This method is not reliable for [Rect2] with a [i]negative size[/i]. Use [method abs] to get a positive sized equivalent rectangle to check for contained points.
			</description>
		</method>
		<method name="intersection">
			<return type="Rect2" />
			<argument index="0" name="rect" type="Rect2" />
			<description>
			</description>
		</method>
		<method name="intersects">
			<return type="bool" />
			<argument index="0" name="b" type="Rect2" />
			<argument index="1" name="include_borders" type="bool" default="false" />
			<description>
				Returns [code]true[/code] if the [Rect2] overlaps with [code]b[/code] (i.e. they have at least one point in common).
				If [code]include_borders[/code] is [code]true[/code], they will also be considered overlapping if their borders touch, even without intersection.
			</description>
		</method>
		<method name="intersects_segment">
			<return type="Variant" />
			<argument index="0" name="from" type="Vector2" />
			<argument index="1" name="to" type="Vector2" />
			<description>
			</description>
		</method>
		<method name="intersects_transformed">
			<return type="bool" />
			<argument index="0" name="xform" type="Transform2D" />
			<argument index="1" name="rect" type="Rect2" />
			<description>
			</description>
		</method>
		<method name="is_equal_approx">
			<return type="bool" />
			<argument index="0" name="rect" type="Rect2" />
			<description>
				Returns [code]true[/code] if this [Rect2] and [code]rect[/code] are approximately equal, by calling [code]is_equal_approx[/code] on each component.
			</description>
		</method>
		<method name="merge">
			<return type="Rect2" />
			<argument index="0" name="b" type="Rect2" />
			<description>
				Returns a larger [Rect2] that contains this [Rect2] and [code]b[/code].
			</description>
		</method>
		<method name="set_end">
			<argument index="0" name="end" type="Vector2" />
			<description>
			</description>
		</method>
		<method name="set_position">
			<argument index="0" name="pos" type="Vector2" />
			<description>
			</description>
		</method>
		<method name="set_size">
			<argument index="0" name="size" type="Vector2" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="end" type="Vector2" setter="" getter="" default="Vector2( 0, 0 )">
			Ending corner. This is calculated as [code]position + size[/code]. Setting this value will change the size.
		</member>
		<member name="position" type="Vector2" setter="" getter="" default="Vector2( 0, 0 )">
			Beginning corner. Typically has values lower than [member end].
		</member>
		<member name="size" type="Vector2" setter="" getter="" default="Vector2( 0, 0 )">
			Size from [member position] to [member end]. Typically, all components are positive.
			If the size is negative, you can use [method abs] to fix it.
		</member>
	</members>
	<constants>
	</constants>
</class>
