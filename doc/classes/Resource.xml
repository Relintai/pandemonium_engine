<?xml version="1.0" encoding="UTF-8" ?>
<class name="Resource" inherits="Reference">
	<brief_description>
		Base class for serializable objects.
	</brief_description>
	<description>
		Resource is the base class for all Godot-specific resource types, serving primarily as data containers. Since they inherit from [Reference], resources are reference-counted and freed when no longer in use. They can also be nested within other resources, and saved on disk. [PackedScene], one of the most common [Object]s in a Godot project, is also a resource, uniquely capable of storing and instantiating the [Node]s it contains as many times as desired.
		In GDScript, resources can loaded from disk by their [member resource_path] using [method @GDScript.load] or [method @GDScript.preload].
		The engine keeps a global cache of all loaded resources, referenced by paths (see [method ResourceLoader.has_cached]). A resource will be cached when loaded for the first time and removed from cache once all references are released. When a resource is cached, subsequent loads using its path will return the cached reference.
		[b]Note:[/b] In C#, resources will not be freed instantly after they are no longer in use. Instead, garbage collection will run periodically and will free resources that are no longer in use. This means that unused resources will linger on for a while before being removed.
	</description>
	<tutorials>
		<link title="Resources">$DOCS_URL/tutorials/scripting/resources.md</link>
		<link title="When and how to avoid using nodes for everything">$DOCS_URL/tutorials/best_practices/node_alternatives.md</link>
	</tutorials>
	<methods>
		<method name="_setup_local_to_scene" qualifiers="virtual">
			<return type="void" />
			<description>
				Override this method to customize the newly duplicated resource created from [method PackedScene.instance], if the original's [member resource_local_to_scene] is set to [code]true[/code].
				[b]Example:[/b] Set a random [code]damage[/code] value to every local resource from an instantiated scene.
				[codeblock]
				extends Resource

				var damage = 0

				func _setup_local_to_scene():
				    damage = rand_range(10, 40)
				[/codeblock]
			</description>
		</method>
		<method name="duplicate" qualifiers="const">
			<return type="Resource" />
			<argument index="0" name="subresources" type="bool" default="false" />
			<description>
				Duplicates this resource, returning a new resource with its [code]export[/code]ed or [constant PROPERTY_USAGE_STORAGE] properties copied from the original.
				If [code]subresources[/code] is [code]false[/code], a shallow copy is returned; nested resources within subresources are not duplicated and are shared from the original resource. If [code]subresources[/code] is [code]true[/code], a deep copy is returned; nested subresources will be duplicated and are not shared.
				[b]Note:[/b] For custom resources, this method will fail if [method Object._init] has been defined with required parameters.
			</description>
		</method>
		<method name="emit_changed">
			<return type="void" />
			<description>
				Emits the [signal changed] signal. This method is called automatically for some built-in resources.
				[b]Note:[/b] For custom resources, it's recommended to call this method whenever a meaningful change occurs, such as a modified property. This ensures that custom [Object]s depending on the resource are properly updated.
				[codeblock]
				var damage setget set_damage

				func set_damage(new_value):
				    if damage != new_value:
				        damage = new_value
				        emit_changed()
				[/codeblock]
			</description>
		</method>
		<method name="get_local_scene" qualifiers="const">
			<return type="Node" />
			<description>
				If [member resource_local_to_scene] is set to [code]true[/code] and the resource has been loaded from a [PackedScene] instantiation, returns the root [Node] of the scene where this resource is used. Otherwise, returns [code]null[/code].
			</description>
		</method>
		<method name="get_rid" qualifiers="const">
			<return type="RID" />
			<description>
				Returns the [RID] of this resource (or an empty RID). Many resources (such as [Texture], [Shape], and so on) are high-level abstractions of resources stored in a specialized server ([VisualServer], [PhysicsServer], etc.), so this function will return the original [RID].
			</description>
		</method>
		<method name="setup_local_to_scene">
			<return type="void" />
			<description>
				Calls [method _setup_local_to_scene]. If [member resource_local_to_scene] is set to [code]true[/code], this method is automatically called from [method PackedScene.instance] by the newly duplicated resource within the scene instance.
			</description>
		</method>
		<method name="take_over_path">
			<return type="void" />
			<argument index="0" name="path" type="String" />
			<description>
				Sets the [member resource_path] to [code]path[/code], potentially overriding an existing cache entry for this path. Further attempts to load an overridden resource by path will instead return this resource.
			</description>
		</method>
	</methods>
	<members>
		<member name="resource_local_to_scene" type="bool" setter="set_local_to_scene" getter="is_local_to_scene" default="false">
			If [code]true[/code], the resource is duplicated for each instance of all scenes using it. At run-time, the resource can be modified in one scene without affecting other instances (see [method PackedScene.instance]).
			[b]Note:[/b] Changing this property at run-time has no effect on already created duplicate resources.
		</member>
		<member name="resource_name" type="String" setter="set_name" getter="get_name" default="&quot;&quot;">
			An optional name for this resource. When defined, its value is displayed to represent the resource in the Inspector dock. For built-in scripts, the name is displayed as part of the tab name in the script editor.
			[b]Note:[/b] Some resource formats do not support resource names. You can still set the name in the editor or via code, but it will be lost when the resource is reloaded. For example, only built-in scripts can have a resource name, while scripts stored in separate files cannot.
		</member>
		<member name="resource_path" type="String" setter="set_path" getter="get_path" default="&quot;&quot;">
			The unique path to this resource. If it has been saved to disk, the value will be its filepath. If the resource is exclusively contained within a scene, the value will be the [PackedScene]'s filepath, followed by a unique identifier.
			[b]Note:[/b] Setting this property manually may fail if a resource with the same path has already been previously loaded. If necessary, use [method take_over_path].
		</member>
	</members>
	<signals>
		<signal name="changed">
			<description>
				Emitted when the resource changes, usually when one of its properties is modified. See also [method emit_changed].
				[b]Note:[/b] This signal is not emitted automatically for custom resources, which means that you need to create a setter and emit the signal yourself.
			</description>
		</signal>
	</signals>
	<constants>
	</constants>
</class>
