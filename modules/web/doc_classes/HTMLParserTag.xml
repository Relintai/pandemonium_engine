<?xml version="1.0" encoding="UTF-8" ?>
<class name="HTMLParserTag" inherits="Reference">
	<brief_description>
		[HTMLParser] stores html tags using this class.
	</brief_description>
	<description>
		[HTMLParser] stores html tags using this class. 
		It has helper methods for searching and modifying data.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="add_child_attribute">
			<return type="void" />
			<argument index="0" name="tag" type="HTMLParserAttribute" />
			<description>
				Add attribute.
			</description>
		</method>
		<method name="add_child_tag">
			<return type="void" />
			<argument index="0" name="tag" type="HTMLParserTag" />
			<description>
				Add a child tag.
			</description>
		</method>
		<method name="clear_child_attributes">
			<return type="void" />
			<description>
				Clear attributes.
			</description>
		</method>
		<method name="clear_child_tags">
			<return type="void" />
			<description>
				clear tags.
			</description>
		</method>
		<method name="convert_to_string" qualifiers="const">
			<return type="String" />
			<argument index="0" name="level" type="int" default="0" />
			<description>
				The HTML tag can be turned back into well formatted HTML using this method.
			</description>
		</method>
		<method name="get_attribute">
			<return type="HTMLParserAttribute" />
			<argument index="0" name="attrib" type="String" />
			<description>
				Return the given attribute if exitst.
			</description>
		</method>
		<method name="get_attribute_value">
			<return type="String" />
			<argument index="0" name="attrib" type="String" />
			<description>
				Return the given attribute's value if exitst.
			</description>
		</method>
		<method name="get_attributec">
			<return type="HTMLParserAttribute" />
			<argument index="0" name="attrib" type="String" />
			<argument index="1" name="contains_val" type="String" />
			<description>
				Returns the first attribute with name that contains the given value.
			</description>
		</method>
		<method name="get_child_attribute">
			<return type="HTMLParserAttribute" />
			<argument index="0" name="index" type="int" />
			<description>
				Returns an attribute by index.
			</description>
		</method>
		<method name="get_child_attribute_count" qualifiers="const">
			<return type="int" />
			<description>
				Return attribute count.
			</description>
		</method>
		<method name="get_child_tag">
			<return type="HTMLParserTag" />
			<argument index="0" name="index" type="int" />
			<description>
				Returns child tag by index.
			</description>
		</method>
		<method name="get_child_tag_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns child tag count.
			</description>
		</method>
		<method name="get_first">
			<return type="HTMLParserTag" />
			<argument index="0" name="t" type="String" />
			<description>
				Returns the first tag with the given name.
			</description>
		</method>
		<method name="get_firstc">
			<return type="HTMLParserTag" />
			<argument index="0" name="t" type="String" />
			<argument index="1" name="attrib" type="String" />
			<argument index="2" name="val" type="String" />
			<description>
				Returns the first tag with the given name which has the given attribute and value.
			</description>
		</method>
		<method name="has_attribute">
			<return type="bool" />
			<argument index="0" name="attrib" type="String" />
			<description>
				Checks if this tag has the given attribute.
			</description>
		</method>
		<method name="has_attributec">
			<return type="bool" />
			<argument index="0" name="attrib" type="String" />
			<argument index="1" name="contains_val" type="String" />
			<description>
				Checks if this tag has the given attribute and value.
			</description>
		</method>
		<method name="parse_args">
			<return type="void" />
			<argument index="0" name="args" type="String" />
			<description>
				Parses the given data as html.
			</description>
		</method>
		<method name="print" qualifiers="const">
			<return type="void" />
			<description>
				Equivalent to [code]print(convert_to_string())[/code].
			</description>
		</method>
		<method name="process">
			<return type="void" />
			<description>
				Process raw data in [member data].
			</description>
		</method>
		<method name="remote_child_attribute">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
				Remove attribute at index.
			</description>
		</method>
		<method name="remote_child_tag">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
				Remove tag at index.
			</description>
		</method>
	</methods>
	<members>
		<member name="attributes" type="Array" setter="set_attributes" getter="get_attributes" default="[  ]">
			Returns the attributes of this tag.
		</member>
		<member name="child_tags" type="Array" setter="set_child_tags" getter="get_child_tags" default="[  ]">
			Returns all child tags.
		</member>
		<member name="data" type="String" setter="set_data" getter="get_data" default="&quot;&quot;">
			The tag's data.
		</member>
		<member name="tag" type="String" setter="set_tag" getter="get_tag" default="&quot;&quot;">
			The tag's name.
		</member>
		<member name="type" type="int" setter="set_type" getter="get_type" default="0">
			The tag's type.
		</member>
	</members>
	<constants>
		<constant name="HTML_PARSER_TAG_TYPE_NONE" value="0" enum="HTMLParserTagType">
			Unknown tag.
		</constant>
		<constant name="HTML_PARSER_TAG_TYPE_OPENING_TAG" value="1" enum="HTMLParserTagType">
			Opening tag.
		</constant>
		<constant name="HTML_PARSER_TAG_TYPE_CLOSING_TAG" value="2" enum="HTMLParserTagType">
			Closing tag.
		</constant>
		<constant name="HTML_PARSER_TAG_TYPE_SELF_CLOSING_TAG" value="3" enum="HTMLParserTagType">
			Self-closing tag.
		</constant>
		<constant name="HTML_PARSER_TAG_TYPE_COMMENT" value="4" enum="HTMLParserTagType">
			Comment.
		</constant>
		<constant name="HTML_PARSER_TAG_TYPE_DOCTYPE" value="5" enum="HTMLParserTagType">
			Doctype tag.
		</constant>
		<constant name="HTML_PARSER_TAG_TYPE_CONTENT" value="6" enum="HTMLParserTagType">
			Content (between tags).
		</constant>
	</constants>
</class>
