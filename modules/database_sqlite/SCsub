
#Import("env_db")
#Import("env")

#env_db.core_sources = []

#env_db.add_source_files(env_db.core_sources, "*.cpp")
#env_db.core_sources.append("./sqlite/sqlite3.c")

# Build it all as a library
#lib = env_db.add_library("database_sqlite", env_db.core_sources)
#env.Prepend(LIBS=[lib])


import os
import version

Import('env')

module_env = env.Clone()

sources = [
    "register_types.cpp",

    "sqlite/sqlite3.c",

    "sqlite3_database.cpp",
    "sqlite3_connection.cpp",
    "sqlite3_query_builder.cpp",
    "sqlite3_query_result.cpp",
    "sqlite3_table_builder.cpp",
    "sqlite3_prepared_statement.cpp",
]

if ARGUMENTS.get('custom_modules_shared', 'no') == 'yes':
    # Shared lib compilation
    module_env.Append(CCFLAGS=['-fPIC'])
    module_env['LIBS'] = []
    shared_lib = module_env.SharedLibrary(target='#bin/database_sqlite', source=sources)
    shared_lib_shim = shared_lib[0].name.rsplit('.', 1)[0]
    env.Append(LIBS=[shared_lib_shim])
    env.Append(LIBPATH=['#bin'])
else:
    # Static compilation
    module_env.add_source_files(env.modules_sources, sources)

