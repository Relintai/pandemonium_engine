<?xml version="1.0" encoding="UTF-8" ?>
<class name="SkeletonModification2DFABRIK" inherits="SkeletonModification2D">
	<brief_description>
		A modification that uses FABRIK to manipulate a series of [Bone2D] nodes to reach a target.
	</brief_description>
	<description>
		This [SkeletonModification2D] uses an algorithm called Forward And Backward Reaching Inverse Kinematics, or FABRIK, to rotate a bone chain so that it reaches a target.
		FABRIK works by knowing the positions and lengths of a series of bones, typically called a "bone chain". It first starts by running a forward pass, which places the final bone at the target's position. Then all other bones are moved towards the tip bone, so they stay at the defined bone length away. Then a backwards pass is performed, where the root/first bone in the FABRIK chain is placed back at the origin. then all other bones are moved so they stay at the defined bone length away. This positions the bone chain so that it reaches the target when possible, but all of the bones stay the correct length away from each other.
		Because of how FABRIK works, it often gives more natural results than those seen in [SkeletonModification2DCCDIK]. FABRIK also supports angle constraints, which are fully taken into account when solving.
		[b]Note:[/b] The FABRIK modifier has [code]fabrik_joints[/code], which are the data objects that hold the data for each joint in the FABRIK chain. This is different from [Bone2D] nodes! FABRIK joints hold the data needed for each [Bone2D] in the bone chain used by FABRIK.
		To help control how the FABRIK joints move, a magnet vector can be passed, which can nudge the bones in a certain direction prior to solving, giving a level of control over the final result.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="get_fabrik_joint_bone2d_node" qualifiers="const">
			<return type="NodePath" />
			<argument index="0" name="joint_idx" type="int" />
			<description>
			</description>
		</method>
		<method name="get_fabrik_joint_bone_index" qualifiers="const">
			<return type="int" />
			<argument index="0" name="joint_idx" type="int" />
			<description>
			</description>
		</method>
		<method name="get_fabrik_joint_magnet_position" qualifiers="const">
			<return type="Vector2" />
			<argument index="0" name="joint_idx" type="int" />
			<description>
			</description>
		</method>
		<method name="get_fabrik_joint_use_target_rotation" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="joint_idx" type="int" />
			<description>
			</description>
		</method>
		<method name="set_fabrik_joint_bone2d_node">
			<return type="void" />
			<argument index="0" name="joint_idx" type="int" />
			<argument index="1" name="bone2d_nodepath" type="NodePath" />
			<description>
			</description>
		</method>
		<method name="set_fabrik_joint_bone_index">
			<return type="void" />
			<argument index="0" name="joint_idx" type="int" />
			<argument index="1" name="bone_idx" type="int" />
			<description>
			</description>
		</method>
		<method name="set_fabrik_joint_magnet_position">
			<return type="void" />
			<argument index="0" name="joint_idx" type="int" />
			<argument index="1" name="magnet_position" type="Vector2" />
			<description>
			</description>
		</method>
		<method name="set_fabrik_joint_use_target_rotation">
			<return type="void" />
			<argument index="0" name="joint_idx" type="int" />
			<argument index="1" name="use_target_rotation" type="bool" />
			<description>
			</description>
		</method>
	</methods>
	<members>
		<member name="fabrik_data_chain_length" type="int" setter="set_fabrik_data_chain_length" getter="get_fabrik_data_chain_length" default="0">
			The amount of FABRIK joints in the FABRIK modification.
		</member>
		<member name="target_nodepath" type="NodePath" setter="set_target_node" getter="get_target_node" default="NodePath(&quot;&quot;)">
			The NodePath to the node that is the target for the FABRIK modification. This node is what the FABRIK chain will attempt to rotate the bone chain to.
		</member>
	</members>
	<constants>
	</constants>
</class>
