<?xml version="1.0" encoding="UTF-8" ?>
<class name="TerrainWorld" inherits="Spatial">
	<brief_description>
		Base class for the terrain system which stores and manages [TerrainChunk]s.
	</brief_description>
	<description>
		Base class for the terrain system.
		Stores and manages [TerrainChunk]s and other data, also contains necessary and useful virtual methods.
		Should be inherited from.
	</description>
	<tutorials>
	</tutorials>
	<methods>
		<method name="_chunk_added" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				Called when a chunk was added.
			</description>
		</method>
		<method name="_create_chunk" qualifiers="virtual">
			<return type="TerrainChunk" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="z" type="int" />
			<argument index="2" name="chunk" type="TerrainChunk" />
			<description>
				Called when a chunk needs to be created.
				In this method all necessary serialized properties should be setup for the chunk to function.
				For non-serialized properties use [method _setup_chunk].
				When loading chunks from disk, only [method _setup_chunk] will be called, this one won't.
				Note the [TerrainChunk] parameter. The first reaced implementation should create the appropiate [TerrainChunk] implementation, then it can call base implementation to do their own initialization on the new instance. Tipically in code this would look like:
				[code]func _create_chunk(x : int, z : int, chunk : TerrainChunk) -&gt; TerrainChunk:
				  if (!chunk):
				    chunk = MyTerrainChunk.new()

				  return ._create_chunk(x, z, chunk)[/code]
			</description>
		</method>
		<method name="_generate_chunk" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				Called when a chunk needs to be generated.
			</description>
		</method>
		<method name="_generation_finished" qualifiers="virtual">
			<return type="void" />
			<description>
				Called when [member is_priority_generation] is true and all generating chunks finished.
			</description>
		</method>
		<method name="_get_channel_index_info" qualifiers="virtual">
			<return type="int" />
			<argument index="0" name="channel_type" type="int" />
			<description>
				The editor tools ask the world for chunk channel information using this method.
			</description>
		</method>
		<method name="_prepare_chunk_for_generation" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				This method will get called for chunks before generation so they can be prepared if needed.
				For example channel allocations can happen here.
			</description>
		</method>
		<method name="_setup_chunk" qualifiers="virtual">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				Set up a chunk. Non-serialized properties should be initialized in this method, like [TerrainJob] and [TerrainMesher] setup.
				[method chunk_setup] call this.
			</description>
		</method>
		<method name="can_chunk_do_build_step">
			<return type="bool" />
			<description>
				Returns whether a chunk can do it's next build step in the current frame. See [member max_frame_chunk_build_steps].
			</description>
		</method>
		<method name="chunk_add">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainChunk" />
			<argument index="1" name="x" type="int" />
			<argument index="2" name="z" type="int" />
			<description>
				Add a chunk at chunk position x, z.
			</description>
		</method>
		<method name="chunk_create">
			<return type="TerrainChunk" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="z" type="int" />
			<description>
				Create a chunk at chunk position x, z.
			</description>
		</method>
		<method name="chunk_get">
			<return type="TerrainChunk" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="z" type="int" />
			<description>
				Return the chunk at chunk position x, z or null if it doesn't exists.
			</description>
		</method>
		<method name="chunk_get_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns the chunk count.
			</description>
		</method>
		<method name="chunk_get_index">
			<return type="TerrainChunk" />
			<argument index="0" name="index" type="int" />
			<description>
				Returns the chunk at at index.
			</description>
		</method>
		<method name="chunk_get_or_create">
			<return type="TerrainChunk" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="z" type="int" />
			<description>
				Return the chunk at chunk position x, z or creates one if it doesn't exists.
			</description>
		</method>
		<method name="chunk_get_or_load">
			<return type="TerrainChunk" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="z" type="int" />
			<description>
				Return the chunk at chunk position x, z or loads one if it doesn't exists. Returns null if one can't be loaded.
			</description>
		</method>
		<method name="chunk_has" qualifiers="const">
			<return type="bool" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="z" type="int" />
			<description>
				Return whether the chunk at chunk position x, z exists or not.
			</description>
		</method>
		<method name="chunk_load">
			<return type="TerrainChunk" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="z" type="int" />
			<description>
				Loads the chunk at chunk position x, z.
			</description>
		</method>
		<method name="chunk_remove">
			<return type="TerrainChunk" />
			<argument index="0" name="x" type="int" />
			<argument index="1" name="z" type="int" />
			<description>
				Removes the chunk at chunk position x, z.
			</description>
		</method>
		<method name="chunk_remove_index">
			<return type="TerrainChunk" />
			<argument index="0" name="index" type="int" />
			<description>
				Removes the chunk at the given index.
			</description>
		</method>
		<method name="chunk_setup">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				Calls [method _chunk_setup] if [member TerrainChunk.is_setup] is false.
				[method _chunk_setup] is where a chunk should be setup. Non-serialized properties should be initialized in this method, like [TerrainJob] and [TerrainMesher] setup.
			</description>
		</method>
		<method name="chunks_clear">
			<return type="void" />
			<description>
				Clear all chunks.
			</description>
		</method>
		<method name="force_save_all_chunks">
			<return type="void" />
			<description>
				Save all chunks.
			</description>
		</method>
		<method name="generation_add_to">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				Add chunk to the generation list.
			</description>
		</method>
		<method name="generation_get_index">
			<return type="TerrainChunk" />
			<argument index="0" name="index" type="int" />
			<description>
				Return the chunk at the given index in the generation list.
			</description>
		</method>
		<method name="generation_get_size" qualifiers="const">
			<return type="int" />
			<description>
				Returns the generation list's size.
			</description>
		</method>
		<method name="generation_queue_add_to">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				Add chunk to the generation queue.
			</description>
		</method>
		<method name="generation_queue_get_index">
			<return type="TerrainChunk" />
			<argument index="0" name="index" type="int" />
			<description>
				Return the chunk at the given index in the generation queue.
			</description>
		</method>
		<method name="generation_queue_get_size" qualifiers="const">
			<return type="int" />
			<description>
				Returns the generation queue's size.
			</description>
		</method>
		<method name="generation_queue_remove_index">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
			</description>
		</method>
		<method name="generation_remove_index">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
				Removes the chunk at the given index from the generation queue.
			</description>
		</method>
		<method name="get_channel_index_info">
			<return type="int" />
			<argument index="0" name="channel_type" type="int" enum="TerrainWorld.ChannelTypeInfo" />
			<description>
				The editor tools ask the world for chunk channel information using this method.
				Calls [member _get_channel_index_info].
			</description>
		</method>
		<method name="get_chunk_at_world_data_position">
			<return type="TerrainChunk" />
			<argument index="0" name="world_data_position" type="Vector2i" />
			<description>
				Returns the chunk at the given world data position or null if it doesn't exists.
			</description>
		</method>
		<method name="get_chunk_at_world_position">
			<return type="TerrainChunk" />
			<argument index="0" name="world_position" type="Vector3" />
			<description>
				Returns the chunk at the given world position or null if it doesn't exists.
			</description>
		</method>
		<method name="get_data_at_world_data_position">
			<return type="int" />
			<argument index="0" name="world_data_position" type="Vector2i" />
			<argument index="1" name="channel_index" type="int" />
			<description>
			</description>
		</method>
		<method name="get_data_at_world_position">
			<return type="int" />
			<argument index="0" name="world_position" type="Vector3" />
			<argument index="1" name="channel_index" type="int" />
			<description>
			</description>
		</method>
		<method name="get_editor_camera">
			<return type="Spatial" />
			<description>
				Returns the editor camera or null if it's not the editor.
			</description>
		</method>
		<method name="get_or_create_chunk_at_world_data_position">
			<return type="TerrainChunk" />
			<argument index="0" name="world_data_position" type="Vector2i" />
			<description>
				Returns the chunk at the given world data position will create one if it doesn't exists.
			</description>
		</method>
		<method name="get_or_create_chunk_at_world_position">
			<return type="TerrainChunk" />
			<argument index="0" name="world_position" type="Vector3" />
			<description>
				Returns the chunk at the given world position will create one if it doesn't exists.
			</description>
		</method>
		<method name="get_voxel_at_world_data_position">
			<return type="int" />
			<argument index="0" name="world_data_position" type="Vector2i" />
			<argument index="1" name="channel_index" type="int" />
			<description>
				Returns the value in the channel at the given world data position.
			</description>
		</method>
		<method name="get_voxel_at_world_position">
			<return type="int" />
			<argument index="0" name="world_position" type="Vector3" />
			<argument index="1" name="channel_index" type="int" />
			<description>
				Returns the value in the channel at the given world position.
			</description>
		</method>
		<method name="is_position_walkable">
			<return type="bool" />
			<argument index="0" name="position" type="Vector3" />
			<description>
				Returns whether a world position is walkable (is a chunk loaded there) or not.
			</description>
		</method>
		<method name="light_add">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainLight" />
			<description>
				Add a light.
			</description>
		</method>
		<method name="light_remove">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainLight" />
			<description>
				Remove a light.
			</description>
		</method>
		<method name="lights_clear">
			<return type="void" />
			<description>
				Clear all lights.
			</description>
		</method>
		<method name="mesh_data_resource_add">
			<return type="void" />
			<argument index="0" name="mesh" type="MeshDataResource" />
			<argument index="1" name="transform" type="Transform" />
			<argument index="2" name="texture" type="Texture" default="null" />
			<argument index="3" name="color" type="Color" default="Color( 1, 1, 1, 1 )" />
			<argument index="4" name="original" type="bool" default="true" />
			<argument index="5" name="name" type="String" default="&quot;&quot;" />
			<description>
				Add a [MeshDataResource].
			</description>
		</method>
		<method name="mesh_data_resource_add_material">
			<return type="void" />
			<argument index="0" name="mesh" type="MeshDataResource" />
			<argument index="1" name="transform" type="Transform" />
			<argument index="2" name="texture" type="Texture" default="null" />
			<argument index="3" name="material" type="Material" default="Color( 1, 1, 1, 1 )" />
			<argument index="4" name="original" type="bool" default="true" />
			<argument index="5" name="name" type="String" default="&quot;&quot;" />
			<description>
				Add a [MeshDataResource] with a material.
			</description>
		</method>
		<method name="on_chunk_mesh_generation_finished">
			<return type="void" />
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				Called when a chunk finished it's mesh generation.
			</description>
		</method>
		<method name="prop_add">
			<return type="void" />
			<argument index="0" name="transform" type="Transform" />
			<argument index="1" name="prop" type="PropData" />
			<argument index="2" name="apply_terrain_scale" type="bool" default="true" />
			<argument index="3" name="original" type="bool" default="true" />
			<argument index="4" name="name" type="String" default="&quot;&quot;" />
			<description>
				Add prop.
			</description>
		</method>
		<method name="scene_add">
			<return type="void" />
			<argument index="0" name="scene" type="PackedScene" />
			<argument index="1" name="transform" type="Transform" default="Transform( 1, 0, 0, 0, 1, 0, 0, 0, 1, 0, 0, 0 )" />
			<argument index="2" name="node" type="Node" default="null" />
			<argument index="3" name="original" type="bool" default="true" />
			<argument index="4" name="name" type="String" default="&quot;&quot;" />
			<description>
				Add scene.
			</description>
		</method>
		<method name="set_data_at_world_data_position">
			<return type="void" />
			<argument index="0" name="world_data_position" type="Vector2i" />
			<argument index="1" name="data" type="int" />
			<argument index="2" name="channel_index" type="int" />
			<argument index="3" name="rebuild" type="bool" default="true" />
			<argument index="4" name="allow_creating_chunks" type="bool" default="true" />
			<description>
			</description>
		</method>
		<method name="set_data_at_world_position">
			<return type="void" />
			<argument index="0" name="world_position" type="Vector3" />
			<argument index="1" name="data" type="int" />
			<argument index="2" name="channel_index" type="int" />
			<argument index="3" name="rebuild" type="bool" default="true" />
			<description>
			</description>
		</method>
		<method name="set_datas_at_world_data_position">
			<return type="void" />
			<argument index="0" name="data" type="Array" />
			<argument index="1" name="channel_index" type="int" />
			<argument index="2" name="immediate_build" type="bool" default="false" />
			<argument index="3" name="allow_creating_chunks" type="bool" default="true" />
			<argument index="4" name="invalidate_texture_caches" type="bool" default="true" />
			<description>
			</description>
		</method>
		<method name="set_voxel_at_world_data_position">
			<return type="void" />
			<argument index="0" name="world_data_position" type="Vector2i" />
			<argument index="1" name="data" type="int" />
			<argument index="2" name="channel_index" type="int" />
			<argument index="3" name="rebuild" type="bool" default="true" />
			<argument index="4" name="allow_creating_chunks" type="bool" default="true" />
			<description>
				Set voxel data at the given world data position.
			</description>
		</method>
		<method name="set_voxel_at_world_position">
			<return type="void" />
			<argument index="0" name="world_position" type="Vector3" />
			<argument index="1" name="data" type="int" />
			<argument index="2" name="channel_index" type="int" />
			<argument index="3" name="rebuild" type="bool" default="true" />
			<description>
				Set voxel data at the given world position.
			</description>
		</method>
		<method name="set_voxels_at_world_data_position">
			<return type="void" />
			<argument index="0" name="data" type="Array" />
			<argument index="1" name="channel_index" type="int" />
			<argument index="2" name="immediate_build" type="bool" default="false" />
			<argument index="3" name="allow_creating_chunks" type="bool" default="true" />
			<argument index="4" name="invalidate_texture_caches" type="bool" default="true" />
			<description>
				Set multiple voxel data at the given world data position.
				The data array should contain: Vector2i world data position 0, uint8 data 0, Vector2i world data position 1, uint8 data 1, ...
			</description>
		</method>
		<method name="terrain_structure_add">
			<return type="void" />
			<argument index="0" name="structure" type="TerrainStructure" />
			<description>
				Add a terrain structure.
			</description>
		</method>
		<method name="terrain_structure_add_at_position">
			<return type="void" />
			<argument index="0" name="structure" type="TerrainStructure" />
			<argument index="1" name="world_position" type="Vector3" />
			<description>
				Add a terrain structure at the given world position.
			</description>
		</method>
		<method name="terrain_structure_get" qualifiers="const">
			<return type="TerrainStructure" />
			<argument index="0" name="index" type="int" />
			<description>
				Return the terrain structure at index.
			</description>
		</method>
		<method name="terrain_structure_get_count" qualifiers="const">
			<return type="int" />
			<description>
				Return the terrain structure count.
			</description>
		</method>
		<method name="terrain_structure_remove">
			<return type="void" />
			<argument index="0" name="structure" type="TerrainStructure" />
			<description>
				Remove the given terrain structure.
			</description>
		</method>
		<method name="terrain_structure_remove_index">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
				Remove the terrain structure at index.
			</description>
		</method>
		<method name="terrain_structures_clear">
			<return type="void" />
			<description>
				Clear terrain structures.
			</description>
		</method>
		<method name="world_area_add">
			<return type="void" />
			<argument index="0" name="area" type="TerrainWorldArea" />
			<description>
				Add world area.
			</description>
		</method>
		<method name="world_area_get" qualifiers="const">
			<return type="TerrainWorldArea" />
			<argument index="0" name="index" type="int" />
			<description>
				Returns world area at index.
			</description>
		</method>
		<method name="world_area_get_count" qualifiers="const">
			<return type="int" />
			<description>
				Returns world area count.
			</description>
		</method>
		<method name="world_area_remove">
			<return type="void" />
			<argument index="0" name="index" type="int" />
			<description>
				Remove world area.
			</description>
		</method>
		<method name="world_areas_clear">
			<return type="void" />
			<description>
				Clear world areas.
			</description>
		</method>
		<method name="world_data_position_to_chunk_position">
			<return type="Vector2i" />
			<argument index="0" name="world_data_position" type="Vector2i" />
			<description>
				Converts world data position to chunk position.
			</description>
		</method>
		<method name="world_data_position_to_world_position">
			<return type="Vector3" />
			<argument index="0" name="position" type="Vector2i" />
			<description>
				Converts world data position to world position.
			</description>
		</method>
		<method name="world_data_position_to_world_position_3d">
			<return type="Vector3" />
			<argument index="0" name="position" type="Vector3i" />
			<description>
				Converts 3d world data position to world position.
			</description>
		</method>
		<method name="world_position_to_chunk_position">
			<return type="Vector2i" />
			<argument index="0" name="world_position" type="Vector3" />
			<description>
				Converts world position to chunk position.
			</description>
		</method>
		<method name="world_position_to_world_data_position">
			<return type="Vector2i" />
			<argument index="0" name="world_position" type="Vector3" />
			<description>
				Converts world position to world data position.
			</description>
		</method>
		<method name="world_position_to_world_data_position_3d">
			<return type="Vector3i" />
			<argument index="0" name="world_position" type="Vector3" />
			<description>
				Converts world position to 3d world data position.
			</description>
		</method>
	</methods>
	<members>
		<member name="active" type="bool" setter="set_active" getter="get_active" default="true">
			Is the world active?
		</member>
		<member name="chunk_size_x" type="int" setter="set_chunk_size_x" getter="get_chunk_size_x" default="16">
			Chunk size on the x axis.
		</member>
		<member name="chunk_size_z" type="int" setter="set_chunk_size_z" getter="get_chunk_size_z" default="16">
			Chunk size on the z axis.
		</member>
		<member name="chunk_spawn_range" type="int" setter="set_chunk_spawn_range" getter="get_chunk_spawn_range" default="4">
			Chunk spawn range.
		</member>
		<member name="chunks" type="Array" setter="chunks_set" getter="chunks_get" default="[  ]">
			All loaded chunks.
		</member>
		<member name="current_seed" type="int" setter="set_current_seed" getter="get_current_seed" default="0">
			The world seed.
		</member>
		<member name="data_margin_end" type="int" setter="set_data_margin_end" getter="get_data_margin_end" default="0">
			Data margin end for the chunks.
		</member>
		<member name="data_margin_start" type="int" setter="set_data_margin_start" getter="get_data_margin_start" default="0">
			Data margin start for the chunks.
		</member>
		<member name="editable" type="bool" setter="set_editable" getter="get_editable" default="false">
			Is this world editable?
			If this is true the editor plugin will show up and allow editing this world.
		</member>
		<member name="is_priority_generation" type="bool" setter="set_is_priority_generation" getter="get_is_priority_generation">
			Is the current set of generation a priority generation?
			Priority generation should be used for the initial mesh and terrain generation like during loading screens.
		</member>
		<member name="level_generator" type="TerrainLevelGenerator" setter="set_level_generator" getter="get_level_generator">
			THe active level generator.
		</member>
		<member name="library" type="TerrainLibrary" setter="set_library" getter="get_library">
			The active terrain library.
		</member>
		<member name="max_concurrent_generations" type="int" setter="set_max_concurrent_generations" getter="get_max_concurrent_generations" default="3">
			Maximum allowed concurrent generations.
		</member>
		<member name="player" type="Spatial" setter="set_player" getter="get_player">
			The player's body. If set, the world will load and make chunks visible around it.
		</member>
		<member name="player_path" type="NodePath" setter="set_player_path" getter="get_player_path" default="NodePath(&quot;&quot;)">
			The player's body's path. If set, the world will get and set it to [member player].
		</member>
		<member name="terrain_scale" type="float" setter="set_terrain_scale" getter="get_terrain_scale" default="1.0">
		</member>
		<member name="terrain_structures" type="Array" setter="terrain_structures_set" getter="terrain_structures_get" default="[  ]">
			Terrain structures.
		</member>
		<member name="use_vertex_lights_3d" type="bool" setter="set_use_vertex_lights_3d" getter="get_use_vertex_lights_3d" default="true">
			Whether to use the [VertexLights3D] system.
		</member>
		<member name="voxel_scale" type="float" setter="set_voxel_scale" getter="get_voxel_scale">
			The terrain scale.
		</member>
		<member name="world_chunk_data_manager" type="TerrainWorldChunkDataManager" setter="set_world_chunk_data_manager" getter="get_world_chunk_data_manager">
			The active world chunk data manager. These can save and load chunks.
		</member>
		<member name="world_height" type="float" setter="set_world_height" getter="get_world_height" default="256.0">
			The world's height in 3d space.
		</member>
	</members>
	<signals>
		<signal name="chunk_added">
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				Emitted when a chunk is added.
			</description>
		</signal>
		<signal name="chunk_mesh_generation_finished">
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				Emitted when a chunk's mesh generation is finished.
			</description>
		</signal>
		<signal name="chunk_removed">
			<argument index="0" name="chunk" type="TerrainChunk" />
			<description>
				Emitted when a chunk is removed.
			</description>
		</signal>
		<signal name="generation_finished">
			<description>
				Emitted when a priority generation finishes.
			</description>
		</signal>
	</signals>
	<constants>
		<constant name="CHANNEL_TYPE_INFO_TYPE" value="0" enum="ChannelTypeInfo">
			Which chunk channel contains type information.
		</constant>
		<constant name="CHANNEL_TYPE_INFO_ISOLEVEL" value="1" enum="ChannelTypeInfo">
			Which chunk channel contains isolevel information.
		</constant>
		<constant name="CHANNEL_TYPE_INFO_LIQUID_TYPE" value="2" enum="ChannelTypeInfo">
			Which chunk channel contains liquid type information.
		</constant>
		<constant name="CHANNEL_TYPE_INFO_LIQUID_ISOLEVEL" value="3" enum="ChannelTypeInfo">
			Which chunk channel contains liquid isolevel information.
		</constant>
		<constant name="CHANNEL_TYPE_INFO_LIQUID_FLOW" value="4" enum="ChannelTypeInfo">
			Which chunk channel contains liquid flow information.
		</constant>
		<constant name="NOTIFICATION_ACTIVE_STATE_CHANGED" value="9000">
			Emitted when the world's [member active] state changes.
		</constant>
	</constants>
</class>
